const e={".gitignore":{file:{contents:`# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
build
dist
dist-ssr
*.local
.turbo

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

test-results
playwright-report
blob-report
playwright
`}},".changeset":{directory:{"config.json":{file:{contents:`{
  "$schema": "https://unpkg.com/@changesets/config@3.0.5/schema.json",
  "changelog": "@changesets/cli/changelog",
  "commit": false,
  "fixed": [],
  "linked": [],
  "access": "public",
  "baseBranch": "main",
  "updateInternalDependencies": "patch",
  "ignore": []
}`}},"README.md":{file:{contents:`# Changesets

Hello and welcome! This folder has been automatically generated by \`@changesets/cli\`, a build tool that works
with multi-package repos, or single-package repos to help you version and publish your code. You can
find the full documentation for it [in our repository](https://github.com/changesets/changesets)

We have a quick list of common questions to get you started engaging with this project in
[our documentation](https://github.com/changesets/changesets/blob/main/docs/common-questions.md)
`}}}},"package.json":{file:{contents:`{
  "name": "@jsnix/jsnix",
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "build": "turbo run build",
    "lint": "turbo run lint",
    "clean": "turbo clean && rm -rf .turbo node_modules",
    "build:utils": "npm run build --workspace=@jsnix/utils",
    "build:cli": "npm run build --workspace=@jsnix/cli",
    "build:scripts": "npm run build --workspace=@jsnix/scripts",
    "build:relay": "npm run build --workspace=@jsnix/relay",
    "build:react": "npm run build --workspace=@jsnix/react",
    "dev": "turbo dev",
    "changeset": "changeset",
    "secret": "cd packages/scripts && npm run build && cd ../utils && npm run build && cd ../cli && npm run build",
    "version": "changeset version",
    "publish": "npm run build && changeset publish"
  },
  "workspaces": [
    "packages/cli",
    "packages/react",
    "packages/scripts",
    "packages/utils",
    "packages/relay",
    "packages/testing"
  ],
  "devDependencies": {
    "@changesets/cli": "^2.27.11",
    "@eslint/compat": "^1.2.4",
    "@eslint/js": "^9.17.0",
    "@stylistic/eslint-plugin": "^2.12.1",
    "@types/react-dom": "^19.0.3",
    "@typescript-eslint/eslint-plugin": "^8.19.0",
    "@typescript-eslint/parser": "^8.19.0",
    "eslint": "^9.17.0",
    "eslint-plugin-react": "^7.37.3",
    "globals": "^15.14.0",
    "turbo": "^1.13.4",
    "typescript": "^5.7.2",
    "typescript-eslint": "^8.19.0"
  },
  "packageManager": "npm@10.2.3"
}
`}},packages:{directory:{cli:{directory:{components:{directory:{"Form.tsx":{file:{contents:`import React, { useState } from 'react';
import TextInput from 'ink-text-input';
import { Box, Text } from 'ink';
import { ZodString } from 'zod';

export type StringInputProps = {
	string: ZodString;
};

export const StringInput = ({ string }: StringInputProps) => {
	const [value, setValue] = useState<string>('');

	return (
		<Box>
			<Box flexDirection="column">
				{string.description && (
					<Text>
						{string.description}
						:
					</Text>
				)}
			</Box>
			<TextInput value={value} onChange={setValue} />
		</Box>
	);
};
`}},"Text.tsx":{file:{contents:`import React from 'react';
import { TextProps as InkTextProps } from 'ink';
import { Transform, Text as InkText } from 'ink';

export type TextProps = {
	children: React.ReactNode;
	trimWrap?: boolean;
} & InkTextProps;

export const Text = ({ children, trimWrap = true, ...props }: TextProps) => (
	<Transform
		transform={(line, index) =>
			index === 0 ? line : (trimWrap ? line.trimStart() : line)}
	>
		<InkText {...props}>{children}</InkText>
	</Transform>
);
`}},"Spinner.tsx":{file:{contents:`import React, { useState, useEffect } from 'react';
import { Text } from 'ink';

type SpinnerProps = {
	interval: number;
	frames: string[];
};

export default function Spinner({ frames, interval }: SpinnerProps) {
	const [frame, setFrame] = useState<number>(0);

	useEffect(() => {
		const timer = setInterval(() => {
			setFrame((previousFrame) => (previousFrame + 1) % frames.length);
		}, interval);

		return () => {
			clearInterval(timer);
		};
	}, [frames, interval]);
	return <Text>{frames[frame]}</Text>;
};
`}},"ScrollArea.tsx":{file:{contents:`// Based on: https://github.com/vadimdemedes/ink/issues/432#issuecomment-1519671092

import { Box, DOMElement, measureElement, useInput } from 'ink';
import React, { useEffect, useRef, useState } from 'react';

export type ScrollAreaProps = {
	height: number;
	children: React.ReactNode;
	notifyInnerHeight?: (height: number) => void;
};

export default function ScrollArea({ height, children, notifyInnerHeight }: ScrollAreaProps) {
	const ref = useRef<DOMElement>(null);
	const [innerHeight, setInnerHeight] = useState(height);
	const [scrollTop, setScrollTop] = useState(0);

	const scroll = (amount: number) => {
		if (innerHeight > height) {
			if (amount > 0) {
				setScrollTop((prev) => Math.min(innerHeight - height, prev + amount));
			}
			else if (amount < 0) {
				setScrollTop((prev) => Math.max(0, prev + amount));
			}
		}
	};

	useEffect(() => {
		notifyInnerHeight?.(innerHeight);
	}, [innerHeight]);

	useEffect(() => {
		if (ref.current) {
			const dimensions = measureElement(ref.current);
			setInnerHeight(dimensions.height);
			if (dimensions.height < height) {
				setScrollTop(0);
			}
		}
	}, [ref, height]);

	useInput((_input, key) => {
		if (key.upArrow) {
			scroll(-1);
		}

		if (key.downArrow) {
			scroll(1);
		}

		if (key.pageUp) {
			scroll(-height);
		}

		if (key.pageDown) {
			scroll(height);
		}
	});

	return (
		<Box height={height} flexDirection="column" overflow="hidden">
			<Box
				ref={ref}
				flexShrink={0}
				flexDirection="column"
				marginTop={-scrollTop}
			>
				{children}
			</Box>
		</Box>
	);
}
`}},"Scroller.tsx":{file:{contents:`import { Box, DOMElement, measureElement, Text, useInput } from 'ink';
import React, { useEffect, useRef, useState } from 'react';
import ScrollArea from '@jsnix/cli/components/ScrollArea';
import useStdoutDimensions from '@jsnix/cli/hooks/useStdoutDimensions';

type LegendProps = {
	ref: React.RefObject<DOMElement>;
	hasScroll: boolean;
};

const Legend = ({ ref, hasScroll }: LegendProps) => {
	// TODO: figure out why 'hasScroll' doesn't work in the browser
	hasScroll;

	return (
		<Box ref={ref} gap={1} justifyContent="space-between">
			<Text>
				exit (
				<Text color="green">q</Text>
				{' or '}
				<Text color="green">esc</Text>
				)
			</Text>
			<Text>
				scroll (
				<Text color="green">‚Üë/pgup</Text>
				{' or '}
				<Text color="green">‚Üì/pgdn</Text>
				)
			</Text>
		</Box>
	);
};

export type ScrollerProps = {
	height?: number;
	onExit?: () => void;
	children: React.ReactNode;
};

export default function Scroller({ height, onExit, children }: ScrollerProps) {
	const { rows } = useStdoutDimensions();
	const legendRef = useRef<any>(null);
	const [legendHeight, setLegendHeight] = useState(0);
	const [innerHeight, setInnerHeight] = useState(0);
	const boxHeight = height || rows;
	const hasScroll = innerHeight > (boxHeight - legendHeight);

	useInput((input, key) => {
		if (input === 'q' || key.escape) {
			onExit && onExit();
		}
	});

	useEffect(() => {
		if (legendRef.current) {
			const { height } = measureElement(legendRef.current);
			setLegendHeight(height);
		}
	}, [legendRef]);

	return (
		<Box height={boxHeight} flexDirection="column">
			<Box borderStyle="single" borderColor="greenBright" paddingLeft={2} paddingRight={2}>
				{/* account for the borders in the available height passed to the scroll area */}
				<ScrollArea height={boxHeight - legendHeight - 3} notifyInnerHeight={setInnerHeight}>
					{children}
				</ScrollArea>
			</Box>
			<Legend ref={legendRef} hasScroll={hasScroll} />
		</Box>
	);
}
`}}}},"tsconfig.json":{file:{contents:`{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "outDir": "./dist",
    "types": [
      "node"
    ]
  },
  "include": [
    "."
  ]
}`}},"package.json":{file:{contents:`{
  "name": "@jsnix/cli",
  "version": "0.0.58",
  "description": "jsnix cli",
  "scripts": {
    "dev": "tsc",
    "build": "tsc",
    "check-types": "tsc --noEmit",
    "lint": "eslint --fix -c ../../eslint.config.js .",
    "postbuild": "chmod +x dist/cli/index.js",
    "start": "node dist/cli/index.js",
    "test": "echo \\"Error: no test specified\\" && exit 1",
    "clean": "rm -rf .turbo dist node_modules"
  },
  "author": "theodore brockman",
  "license": "MIT",
  "bin": {
    "jsnix": "dist/cli/index.js"
  },
  "type": "module",
  "exports": {
    ".": "./dist/cli/index.js",
    "./*": "./dist/cli/*.js"
  },
  "files": [
    "dist"
  ],
  "dependencies": {
    "@jsnix/pastel": "^3.0.8",
    "@jsnix/scripts": "file:../scripts",
    "@jsnix/utils": "file:../utils",
    "chalk": "^5.4.0",
    "ink": "^5.1.0",
    "ink-big-text": "^2.0.0",
    "ink-link": "^4.1.0",
    "ink-select-input": "^6.0.0",
    "ink-text-input": "^6.0.0",
    "react": "^18.3.1",
    "zod": "^3.24.1",
    "zustand": "^5.0.2"
  },
  "devDependencies": {
    "@sindresorhus/tsconfig": "^7.0.0",
    "@types/node": "^22.10.5",
    "typescript": "^5.7.2"
  }
}
`}},"README.md":{file:{contents:`# @jsnix/cli
`}},"index.ts":{file:{contents:`#!/usr/bin/env node
const { default: Pastel } = await import('@jsnix/pastel');

// TODO: fix ctrl-c
const app = new Pastel({
	importMeta: import.meta,
	name: 'jsnix',
});
const { waitUntilExit } = await app.run();
await waitUntilExit();
process.exit(); // Seems to be necessary for terminating if opened with "container.spawn" ü§∑‚Äç‚ôÇÔ∏è
`}},"CHANGELOG.md":{file:{contents:`# @jsnix/cli

## 0.0.58

### Patch Changes

- Attempting fix

## 0.0.57

### Patch Changes

- Updating Pastel dep
- Updated dependencies
  - @jsnix/scripts@1.0.20
  - @jsnix/utils@0.0.60

## 0.0.56

### Patch Changes

- Fixes
- Updated dependencies
  - @jsnix/utils@0.0.59

## 0.0.55

### Patch Changes

- Remove some logs
- Updated dependencies
  - @jsnix/utils@0.0.57

## 0.0.54

### Patch Changes

- Publishing
- Updated dependencies
  - @jsnix/utils@0.0.55

## 0.0.53

### Patch Changes

- Bump
- Updated dependencies
  - @jsnix/utils@0.0.54

## 0.0.52

### Patch Changes

- Remove import.

## 0.0.51

### Patch Changes

- Don't remember
- Updated dependencies
  - @jsnix/utils@0.0.53

## 0.0.50

### Patch Changes

- Updates
- Updated dependencies
  - @jsnix/utils@0.0.52

## 0.0.49

### Patch Changes

- Bumping
- Updated dependencies
  - @jsnix/utils@0.0.51
  - @jsnix/scripts@1.0.19

## 0.0.48

### Patch Changes

- Bump
- Updated dependencies
  - @jsnix/scripts@1.0.18
  - @jsnix/utils@0.0.50

## 0.0.47

### Patch Changes

- Exit early, try writing newline after command.
- Updated dependencies
  - @jsnix/utils@0.0.49

## 0.0.46

### Patch Changes

- Bug fixes
- Updated dependencies
  - @jsnix/utils@0.0.48

## 0.0.45

### Patch Changes

- Forting nites
- Updated dependencies
  - @jsnix/utils@0.0.47

## 0.0.44

### Patch Changes

- Up
- Updated dependencies
  - @jsnix/scripts@1.0.17
  - @jsnix/utils@0.0.46

## 0.0.43

### Patch Changes

- Rebuild
- Updated dependencies
  - @jsnix/scripts@1.0.16
  - @jsnix/utils@0.0.45

## 0.0.42

### Patch Changes

- Removing source maps
- Updated dependencies
  - @jsnix/scripts@1.0.15
  - @jsnix/utils@0.0.44

## 0.0.41

### Patch Changes

- Rendering changes and CLI update
- Updated dependencies
  - @jsnix/scripts@1.0.14
  - @jsnix/utils@0.0.43

## 0.0.40

### Patch Changes

- Fix loadJsnixEports
- Updated dependencies
  - @jsnix/utils@0.0.42

## 0.0.39

### Patch Changes

- Fixing
- Updated dependencies
  - @jsnix/utils@0.0.41

## 0.0.38

### Patch Changes

- Changes
- Updated dependencies
  - @jsnix/utils@0.0.40

## 0.0.37

### Patch Changes

- Removing deps
- Updated dependencies
  - @jsnix/utils@0.0.39

## 0.0.36

### Patch Changes

- Fixing HTML command rendering
- Updated dependencies
  - @jsnix/scripts@1.0.13
  - @jsnix/utils@0.0.38

## 0.0.35

### Patch Changes

- Bump

## 0.0.34

### Patch Changes

- Fix 'html' command and add 'Scroller' component to CLI
- Updated dependencies
  - @jsnix/utils@0.0.37

## 0.0.33

### Patch Changes

- Debug build
- Updated dependencies
  - @jsnix/utils@0.0.36

## 0.0.32

### Patch Changes

- Debug build
- Updated dependencies
  - @jsnix/utils@0.0.35

## 0.0.31

### Patch Changes

- Trying to fix size
- Updated dependencies
  - @jsnix/utils@0.0.34

## 0.0.30

### Patch Changes

- Fixes and such
- Updated dependencies
  - @jsnix/utils@0.0.33

## 0.0.29

### Patch Changes

- Bump for dep

## 0.0.28

### Patch Changes

- Bump
- Updated dependencies
  - @jsnix/scripts@1.0.11
  - @jsnix/utils@0.0.32

## 0.0.27

### Patch Changes

- Bump
- Updated dependencies
  - @jsnix/scripts@1.0.10
  - @jsnix/utils@0.0.31

## 0.0.26

### Patch Changes

- Bump
- Updated dependencies
  - @jsnix/scripts@1.0.9
  - @jsnix/utils@0.0.30

## 0.0.25

### Patch Changes

- Bump
- Updated dependencies
  - @jsnix/scripts@1.0.8
  - @jsnix/utils@0.0.29

## 0.0.24

### Patch Changes

- Hmm?

## 0.0.23

### Patch Changes

- Fix exports

## 0.0.23

### Patch Changes

- Bump
- Updated dependencies
  - @jsnix/scripts@1.0.7
  - @jsnix/utils@0.0.28

## 0.0.22

### Patch Changes

- Fixing html command
- Updated dependencies
  - @jsnix/utils@0.0.27

## 0.0.21

### Patch Changes

- Woopsie
- Updated dependencies
  - @jsnix/utils@0.0.26

## 0.0.20

### Patch Changes

- Fixing container path resolution
- Updated dependencies
  - @jsnix/utils@0.0.25

## 0.0.19

### Patch Changes

- Bumping
- Updated dependencies
  - @jsnix/scripts@1.0.6
  - @jsnix/utils@0.0.24

## 0.0.18

### Patch Changes

- Bumping all for changes
- Updated dependencies
  - @jsnix/scripts@1.0.5
  - @jsnix/utils@0.0.23

## 0.0.17

### Patch Changes

- New build
- Updated dependencies
  - @jsnix/scripts@1.0.4
  - @jsnix/utils@0.0.22

## 0.0.16

### Patch Changes

- Updating utils, scripts, react, and cli.
- Updated dependencies
  - @jsnix/scripts@1.0.3
  - @jsnix/utils@0.0.21

## 0.0.15

### Patch Changes

- Add dep

## 0.0.14

### Patch Changes

- Bumping patch
- Updated dependencies
  - @jsnix/utils@0.0.20

## 0.0.13

### Patch Changes

- 8899e2e: Releasing version for integration testing
- Updated dependencies [8899e2e]
  - @jsnix/utils@0.0.19
`}},hooks:{directory:{"useStdoutDimensions.ts":{file:{contents:`import { useEffect, useState } from 'react';
import { useStdout } from 'ink';

export type Dimensions = {
	rows: number;
	cols: number;
};

export default function useStdoutDimensions(): Dimensions {
	const { stdout } = useStdout();
	const [dimensions, setDimensions] = useState<Dimensions>({ cols: stdout.columns, rows: stdout.rows });

	useEffect(() => {
		const handler = () => setDimensions({ cols: stdout.columns, rows: stdout.rows });
		stdout.on('resize', handler);
		return () => {
			stdout.off('resize', handler);
		};
	}, [stdout]);

	return dimensions;
}
`}},"useCommands.ts":{file:{contents:`import { useEffect, useState } from 'react';
import { useStore } from './useStore.js';
import { readCommands } from '@jsnix/pastel';

export default function useCommands() {
	const [isPending, setIsPending] = useState(false);
	const commands = useStore((state) => state.commands);
	const setCommands = useStore((state) => state.setCommands);

	const fetchCommands = async () => {
		setIsPending(true);
		const path = new URL('../../cli/commands', import.meta.url).pathname;
		const commands = await readCommands(path);
		const result = Array.from(commands, ([, val]) => (val));
		setCommands(result);
		setIsPending(false);
	};

	useEffect(() => {
		fetchCommands();
	}, []);

	return { commands, isPending, setCommands };
}
`}},"useStore.ts":{file:{contents:`import { Command } from '@jsnix/pastel';
import { create } from 'zustand';

type State = {
	commands: Command[];
	setCommands: (commands: Command[]) => void;
};

export const useStore = create<State>((set) => ({
	commands: [],
	setCommands: (commands: Command[]) => set({ commands }),
}));
`}}}},commands:{directory:{code:{directory:{_app:{directory:{"jsnix.ts":{file:{contents:`import { OnServerReadyHandler } from '@jsnix/utils/types';

export const port = 9191;
export const bin = ['code'];
export const onServerReady: OnServerReadyHandler = async ({ port: serverPort, fetch, editor, initEditor }) => {
	if (serverPort !== port) {
		return;
	}

	let response = await fetch({ method: 'GET' });
	const { path, cwd } = (await response?.json()) || {};

	if (!editor) {
		editor = (await initEditor()).editor!;
	}

	if (path) {
		await editor.open(path, cwd);
	}
	// Close our server after opening the editor (exitting the CLI)
	try {
		response = await fetch({ method: 'POST', path: '/exit' });
	} catch (e) {
		console.error('failed to forcefully close', e)
	}
};
`}}}},"index.tsx":{file:{contents:`import React, { useEffect, useState } from 'react';
import { Box, useApp } from 'ink';
import zod from 'zod';
import { argument } from '@jsnix/pastel';
import type Pastel from '@jsnix/pastel';
import Spinner from '@jsnix/cli/components/Spinner';
import { dots } from '@jsnix/utils/spinner';
import { port } from './_app/jsnix.js';
import http from 'http';
import { promiseWithTimeout } from '@jsnix/utils/promises';

export const example = ['code', 'jsnix/README.md'];
export const description = \`üìÇ edit files

* ctrl+s to save
* ctrl+q to quit
* can only open children of ~/workspace
\`;
export const args = zod.tuple([
	zod.string().describe(argument({
		name: 'file',
		description: 'file to open',
	})),
]);

export type CodeProps = {
	app: Pastel;
	args: zod.infer<typeof args>;
};

type StartServerProps = {
	args: CodeProps['args'];
};

const startServer = async ({ args }: StartServerProps): Promise<void> => {
	let server: http.Server | null = null;

	try {
		server = await promiseWithTimeout<http.Server>(async (resolve, reject) => {

			try {
				const inner = http.createServer((req, res) => {
					if (req.url === '/' && req.method === 'GET') {
						res.statusCode = 200;
						res.setHeader('Content-Type', 'application/json');
						res.end(JSON.stringify({
							path: args[0],
							cwd: process.cwd(),
						}));
					} else if (req.url === '/exit' && req.method === 'POST') {
						res.statusCode = 200;
						res.setHeader('Content-Type', 'text/plain');
						res.end('OK');
						resolve(inner);
					}
					else {
						res.statusCode = 404;
						res.setHeader('Content-Type', 'text/plain');
						res.end('Not Found');
					}
				});
				inner.listen(port, 'localhost');
			}
			catch (e) {
				reject(e);
			}
			return null;
		}, 5 * 60 * 1000); // wait at most 5m for the server to start

	} catch (e) {
		console.error(e);
	} finally {
		server?.close();
	}
};

export default function Code({ args, app }: CodeProps) {
	const [isOpen, setIsOpen] = useState(false);
	const { exit } = useApp();

	useEffect(() => {
		if (!isOpen) {
			startServer({ args }).then(() => {
				setIsOpen(true);
			}).catch((err: any) => {
				app.render?.clear();
				exit(err);
			});
		}
	}, [isOpen]);

	useEffect(() => {
		if (isOpen) {
			app.render?.clear();
			exit();
		}
	}, [isOpen]);

	if (isOpen) {
		return null;
	}

	return (
		<Box>
			<Spinner {...dots} />
		</Box>
	);
}
`}}}},listen:{directory:{_app:{directory:{"useTracks.ts":{file:{contents:`import { json } from '@jsnix/scripts/scrape';
import type { ListResponse } from '@jsnix/scripts/soundcloud/scrape';

export type UseTracksProps = {
	tracks?: boolean;
	reposts?: boolean;
	likes?: boolean;
	playlists?: boolean;
};

export const useTracks = ({ tracks, reposts, likes, playlists }: UseTracksProps): ListResponse => {
	return {
		tracks: tracks ? json.tracks : [],
		reposts: reposts ? json.reposts : [],
		likes: likes ? json.likes : [],
		playlists: playlists ? json.playlists : [],
	};
};
`}},"jsnix.tsx":{file:{contents:`import React from 'react';
import { createRoot } from 'react-dom/client';
import { OscData } from '@jsnix/utils/types';
import SoundcloudPlayer from './SoundcloudPlayer';

export const bin = ['listen', 'vibe'];
export const osc: OscData = {
	id: 80086,
	handler: async ({ terminal, data }) => {
		const marker = terminal.registerMarker();

		if (marker) {
			const { ids } = data as { ids: string[] };
			const node = document.createElement('div');
			createRoot(node).render(<SoundcloudPlayer ids={ids} />);
			await terminal.attachElementToMarker(node, marker);
		}
		return true;
	},
};
`}},"SoundcloudPlayer.tsx":{file:{contents:`import React from 'react';
import { json } from '@jsnix/scripts/scrape';
import type { SoundcloudItem } from '@jsnix/scripts/scrape';

export type SoundcloudEmbedProps = {
	item: SoundcloudItem;
	height?: string;
	width?: string;
	autoPlay?: boolean;
};

function SoundcloudEmbed({ item, width = '100%', height = '300px', autoPlay = true }: SoundcloudEmbedProps) {
	let path = '';

	if ('embeddable_by' in item) {
		path = \`tracks/\${item.id}\`;
	}
	else {
		path = \`playlists/\${item.id}\`;
	}

	return (
		// @ts-ignore
		<iframe credentialless="true" allow={autoPlay && 'autoplay'} width={width} height={height} src={\`https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/\${path}&color=%23ff5500&auto_play=true&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=false&visual=true\`}></iframe>
	);
}

interface SoundcloudPlayerProps {
	ids: string[];
}

export default function SoundcloudPlayer({ ids }: SoundcloudPlayerProps) {
	const idSet = new Set(ids.map((id) => parseInt(id)));
	const collection: SoundcloudItem[] = Object.entries(json)
		.reduce(
			(acc, [, items]) => {
				items.forEach((item) => {
					if (idSet.has(item.id)) {
						acc.push(item);
					}
				});
				return acc;
			},
			[] as SoundcloudItem[]);

	return (
		<div style={{ height: 'fit-content' }}>
			{collection.map((item) => (
				<SoundcloudEmbed key={item.id} item={item} />
			))}
		</div>
	);
};
`}}}},"index.tsx":{file:{contents:`import React, { useEffect, useState } from 'react';
import { writeOsc } from '@jsnix/utils/helpers';
import { Box, Text, useApp } from 'ink';
import zod from 'zod';
import { useTracks } from './_app/useTracks.js';
import type { ListResponse, SoundcloudItem } from '@jsnix/scripts/soundcloud/scrape';
import { link } from '@jsnix/utils/escapes';
import { chooseRandom } from '@jsnix/utils/collection';
import chalk from 'chalk';

export const example = ['listen'];
export const description = 'üéµ catch a vibe';
export const options = zod.object({
	tracks: zod.boolean().optional().default(true).describe('don\\'t include my soundcloud tracks'),
	reposts: zod.boolean().optional().default(false).describe('include my soundcloud reposts'),
	likes: zod.boolean().optional().default(false).describe('include my soundcloud likes'),
	playlists: zod.boolean().optional().default(false).describe('include my soundcloud playlists'),
	list: zod.boolean().optional().default(false).describe('list rather than play'),
	urls: zod.boolean().optional().default(false).describe('include urls (for terminals which dont support links)'),
});
type ListenProps = {
	options: zod.infer<typeof options>;
};

export type SongProps = SoundcloudItem & {
	urls?: boolean;
};

const Song = ({ title, permalink_url, urls }: SongProps) => {
	return (
		<Text>
			Track:
			{' '}
			{link(title, permalink_url)}
			{urls && \` (\${permalink_url})\`}
		</Text>
	);
};

export type SongListProps = ListResponse & {
	urls?: boolean;
};

const SongList = ({ tracks, playlists, reposts, likes, urls }: SongListProps) => {
	const items = [
		...(tracks || []),
		...(playlists || []),
		...(reposts || []),
		...(likes || []),
	];

	return (
		<Box flexDirection="column">
			{items.map((item) => <Song key={item.id} urls={urls} {...item} />)}
		</Box>
	);
};

export default function Listen({ options: { reposts, likes, tracks, playlists, list, urls } }: ListenProps) {
	const { exit } = useApp();
	const results = useTracks({ reposts, likes, tracks, playlists });
	const [track, setTrack] = useState<SoundcloudItem | null>(null);

	const isWebContainer = process.env['WEBCONTAINER'];
	const userAgent = process.env['USER_AGENT'] || '';
	const isSafariOrFirefox = userAgent.includes('mobile') || userAgent.includes('gecko/20100101');
	// const compatUrl = 'https://developer.mozilla.org/en-US/docs/Web/Security/IFrame_credentialless#browser_compatibility';
	const warningText = \`Your browser likely does not support the necessary features for SoundCloud embeds in this terminal\`;
	const warning = \`\${chalk.yellow('Warning: ' + warningText)}.\`;

	useEffect(() => {
		if (!list) {
			const rand = chooseRandom([...(results.tracks || []), ...(results.reposts || []), ...(results.likes || []), ...(results.playlists || [])]);
			rand && setTrack(rand);
		}
	}, [list]);

	useEffect(() => {
		if (isWebContainer && track) {
			const data = {
				ids: [track?.id.toString()],
			};
			writeOsc(80086, data).then(() => exit());
		}
	}, [track, isWebContainer]);

	return (
		<Box flexDirection="column">
			{!list && track && isSafariOrFirefox && <Text>{warning}</Text>}
			{!list && track && <SongList urls={urls} tracks={[track]} />}
			{list && <SongList urls={urls} {...results} />}
		</Box>
	);
}
`}}}},recruit:{directory:{_app:{directory:{"jsnix.ts":{file:{contents:`import { OscData } from '@jsnix/utils/types';

export const bin = ['recruit'];
export const osc: OscData = {
	id: 80088,
	handler: async () => {
		window.location.href = 'https://app.reclaim.ai/m/iamtheo/flexible-quick-meeting';
		return true;
	},
};
`}}}},"index.tsx":{file:{contents:`import { useEffect } from 'react';
import { writeOsc } from '@jsnix/utils/helpers';

export const description = 'ü§ù work together';
export const example = ['recruit'];

export default function Recruit() {
	useEffect(() => {
		writeOsc(80088, {});
	}, []);

	return null;
}
`}}}},about:{directory:{_app:{directory:{"index.ts":{file:{contents:"export const bin = ['about']"}}}},"index.tsx":{file:{contents:`import React from 'react';
import { Box, useApp } from 'ink';
import BigText from 'ink-big-text';
import Scroller from '@jsnix/cli/components/Scroller';
import { Text } from '@jsnix/cli/components/Text';

export const example = ['about'];
export const description = 'üìñ learn more';

export default function About() {
	const { exit } = useApp();

	const onExit = () => {
		exit();
	};

	return (
		<Scroller onExit={onExit}>
			<Box><BigText text="about" font="tiny" /></Box>
			<Box flexDirection="column" gap={1}>
				<Text color="greenBright" inverse>what is this?</Text>
				<Box paddingLeft={2} flexDirection="column">
					<Text>this is a virtual machine running node.js completely in your browser.</Text>
					<Text>in it, you can install üì¶ npm packages, üìÅ write files, and ‚ñ∂Ô∏è run commands.</Text>
					<Box paddingTop={1} columnGap={1}>
						<Text color="yellow">hint:</Text>
						<Text>
							try running "
							<Text color="blue" inverse>jsnix --help</Text>
							"
						</Text>
					</Box>
					<Box columnGap={1}>
						<Text color="red">caution:</Text>
						<Text>all data is (currently) lost on closing</Text>
					</Box>
				</Box>
			</Box>
			<Box flexDirection="column" gap={1} paddingTop={1}>
				<Text color="greenBright" inverse>why?</Text>
				<Box paddingLeft={2} flexDirection="column">
					<Text>rather than just share a web app, i thought it'd be cool to share a whole üíª computer.</Text>
				</Box>
			</Box>
			<Box flexDirection="column" gap={1} paddingTop={1}>
				<Text color="greenBright" inverse>how?</Text>
				<Box paddingLeft={2} flexDirection="column">
					<Text>
						currently, its powered by a stackblitz webcontainer, and uses xterm.js + monaco-editor
						for the ‚å®Ô∏è terminal and üìù editor.
					</Text>
				</Box>
			</Box>
			<Box flexDirection="column" gap={1} paddingTop={1}>
				<Text color="yellowBright" inverse>limitations</Text>
				<Box paddingLeft={2} flexDirection="column">
					<Text>üîå no raw tcp/udp sockets</Text>
					<Text>üîí cors requests only</Text>
					<Text>üë¥ vm is stuck on node@18</Text>
					<Text>ü™¶ webcontainers randomly die without any error logs</Text>
					<Text>üêå bit less than native performance</Text>
					<Text>üí© consumes a poopload of ram</Text>
					<Text>ü§î \`jsh\`, an undocumented and not-very-bash-compatible shell</Text>
					<Text>üíæ container only exposes the mounted filesystem (ex. \`~/workspace\`) to the host</Text>
				</Box>
			</Box>
		</Scroller>
	);
}
`}}}},hi:{directory:{_app:{directory:{"jsnix.ts":{file:{contents:"export const bin = ['hi']"}}}},"index.tsx":{file:{contents:`import { useEffect } from 'react';
import { useApp, useStdout } from 'ink';
import zod from 'zod';

export const example = ['hi', 'friend'];
export const args = zod.tuple([
	zod.string().describe('who\\'s saying hi'),
]);
export const description = 'üëã say hi';

type Props = {
	args: zod.infer<typeof args>;
};

export default function Hi({ args }: Props) {
	const { stdout } = useStdout();
	const { exit } = useApp();

	useEffect(() => {
		stdout.write('üëã Hi, ' + args[0] + '!\\n');
		exit();
	}, []);

	return null;
}
`}}}},html:{directory:{_app:{directory:{"jsnix.ts":{file:{contents:`import { OscData } from '@jsnix/utils/types';

export const bin = ['html']
export const osc: OscData = {
	id: 80085,
	handler: async ({ data, terminal, document }) => {
		const marker = terminal.registerMarker();

		if (marker) {
			const { html } = data as { html: string };
			const node = document.createElement('template');
			node.innerHTML = html;
			const child = node.content.firstElementChild;

			if (child && child instanceof HTMLElement) {
				await terminal.attachElementToMarker(child, marker);
			}
		}
		return true;
	},
};
`}}}},"index.tsx":{file:{contents:`import { useEffect } from 'react';
import { writeOsc } from '@jsnix/utils/helpers';
import { osc } from './_app/jsnix.js';
import { useApp } from 'ink';
import { argument } from '@jsnix/pastel';
import zod from 'zod';

export const description = \`üåê render html\`;
export const args = zod.tuple([
	zod.string().describe(argument({
		name: 'html',
		description: 'html to render',
	})),
]);

const banner = \`<div style="width: 100%;
	display: flex;
	box-sizing: border-box;
	justify-content: center;
	padding: 1rem;">
	<div style="background-color: #383838;
				box-shadow: -1rem 1rem #171717;
				padding: 1rem;
				padding-bottom: 2rem;
				white-space: pre-wrap;
				font-size: clamp(6px, calc(100vw / 34), 16px);
				font-family: monospace;
				color: white;
				border: 4px solid #0a0a0a;
				width: 100%;
				display: flex;
				box-sizing: border-box;
				justify-content: center;
				align-items: flex-start;
				line-height: initial;">
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó
   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë
   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë
   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù


     dev üíª artist üé® goof ü§°
</div></div>\`;
export type DivProps = {
	args: zod.infer<typeof args>;
};
export const example = ['html', banner];
export default function Html({ args }: DivProps) {
	const { exit } = useApp();

	useEffect(() => {
		writeOsc(osc.id, { html: args[0] }).then(() => exit());
	}, []);

	return null;
}
`}}}},home:{directory:{_app:{directory:{"jsnix.ts":{file:{contents:"export const bin = ['home']"}}}},"index.tsx":{file:{contents:`import React, { useEffect, useState } from 'react';
import { Box, Text } from 'ink';
import Link from 'ink-link';
import BigText from 'ink-big-text';
import SelectInput from 'ink-select-input';
import useCommands from '@jsnix/cli/hooks/useCommands';
import type { Command as PastelCommand } from '@jsnix/pastel';
import Pastel from '@jsnix/pastel';

export type HomeProps = {
	app: Pastel;
};

export const description = 'üè† cli home';
export const isDefault = true;

export default function Home({ app }: HomeProps) {
	const [command, setCommand] = useState<PastelCommand | null>(null);

	useEffect(() => {
		if (command) {
			// @ts-expect-error
			const { example } = command;
			if (example) {
				app.run([...process.argv.slice(0, 2), ...example]);
			}
			else {
				app.run([...process.argv.slice(0, 2), command.name, '--help']);
			}
		}
	}, [command]);

	if (command) {
		return null;
	}

	return (
		<Box flexDirection="column" paddingLeft={2} paddingRight={2} borderStyle="single" borderColor="greenBright">
			<Header onCommandSelected={setCommand} />
		</Box>
	);
}

export type HeaderProps = {
	onCommandSelected: (command: any) => void;
};

const Header = ({ onCommandSelected }: HeaderProps) => {
	return (
		<Box flexWrap="wrap" gap={2} justifyContent="flex-start">
			<Box flexDirection="column" alignItems="center" justifyContent="center">
				<Box alignItems="center">
					<Box alignItems="center">
						{/* @ts-expect-error */}
						<BigText text="js" letterSpacing={1} lineHeight={1} colors={['yellow', '#f80']} spaceless={true}></BigText>
					</Box>
					<Box>
						{/* @ts-expect-error */}
						<BigText text="nix" letterSpacing={1} lineHeight={1} colors={['#93b9f5', '#4287f5']} spaceless={true}></BigText>
					</Box>
				</Box>
				<Box alignSelf="flex-end">
					<Box flexDirection="column">
						<Box alignSelf="flex-end">
							<Text>
								by
								{' '}
								<Link url="https://github.com/tbrockman" fallback={false}>@tbrockman</Link>
							</Text>
						</Box>
						<Text>
							built on
							{' '}
							<Link url="https://webcontainers.io/guides/introduction" fallback={false}>WebContainers</Link>
						</Text>
					</Box>
				</Box>
			</Box>
			<Box flexGrow={1} flexDirection="column" alignItems="flex-start" gap={1} flexWrap="wrap">
				{/* TODO: move */}
				<Commands onCommandSelected={onCommandSelected} />
			</Box>
		</Box>
	);
};

// TODO: command type instead of T
export type Item<T> = {
	label: string;
	value: T;
	raw?: any;
};

const Command = ({ label, raw, isHighlighted }: any) => {
	const hint = raw?.description?.split('\\n')[0] || '';

	return (
		<Box flexWrap="wrap" columnGap={1}>
			<Text color={isHighlighted ? 'blue' : ''} inverse={isHighlighted}>{label}</Text>
			<Text color={isHighlighted ? '#93b9f5' : ''} wrap="wrap">
				{/* Render hint as empty characters, so as to not wrap unexpectedly once highlighted */}
				{isHighlighted ? hint : ' '.repeat(hint.length)}
			</Text>
		</Box>
	);
};

export type CommandsProps = {
	onCommandSelected: (command: any) => void;
};

const Commands = ({ onCommandSelected }: CommandsProps) => {
	const { commands } = useCommands();
	const items = commands.map((command) => ({ label: command.name, value: command.name, raw: command })).filter((c) => c.label !== 'home');

	const handleSelect = (item: Item<any>) => {
		const command = items.find((c) => c.label === item.label);
		if (command) {
			onCommandSelected(command.raw);
		}
	};

	return (
		<Box flexDirection="column">
			<Text>Available commands:</Text>
			<SelectInput
				items={items}
				onSelect={handleSelect}
				// @ts-expect-error
				itemComponent={({ label, raw, isSelected }) => <Command label={label} raw={raw} isHighlighted={isSelected} />}
			/>
		</Box>
	);
};
`}}}}}}}},utils:{directory:{"promises.ts":{file:{contents:`/**
 * Type definition for the executor function used in Promises.
 *
 * @template T - The type of the value that the promise will resolve to.
 * @param resolve - Function to resolve the promise with a value or a Promise-like value.
 * @param reject - Function to reject the promise with an error or reason.
 */
export type Executor<T> = (resolve: (value: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void;

/**
 * Implementation of the \`Promise.timeout\` static method.
 * This method races the provided Promise against a timeout and rejects if the timeout period elapses first.
 *
 * @template T - The type of the value that the Promise resolves to.
 * @param executor - A function that is executed with \`resolve\` and \`reject\` functions to complete the Promise.
 * @param milliseconds - The maximum amount of time (in milliseconds) to wait before rejecting the Promise.
 *                       Defaults to 60,000 milliseconds (1 minute).
 * @returns A \`Promise\` that resolves or rejects based on the provided \`executor\` or times out after the specified duration.
 */
export const promiseWithTimeout = async <T>(executor: Executor<T>, milliseconds = 60000): Promise<T> => {
	const timeoutPromise = new Promise((_, reject) =>
		setTimeout(() => reject(\`timed out after \${milliseconds} milliseconds\`), milliseconds),
	);

	return Promise.race([new Promise(executor), timeoutPromise])
		.then((result) => result as T)
		.catch((e) => {
			throw Error(e);
		});
};

export const waitUntil = async (condition: () => boolean, timeout: number) => {
	return promiseWithTimeout<void>((resolve) => {
		const interval = setInterval(() => {
			const result = condition();
			if (result) {
				clearInterval(interval);
				resolve();
			};
		}, 10);
	}, timeout);
};
`}},"vite.config.js":{file:{contents:`import { defineConfig } from 'vite';
import path from 'path';

export default defineConfig({
	root: './e2e', // Set the e2e folder as the root
	server: {
		port: 3000,
		fs: {
			// Allow access to the root of the monorepo
			allow: ['../../'],
		},
	},
	resolve: {
		alias: {
			// Resolve \`node_modules\` correctly
			'@jsnix/xterm': path.resolve(__dirname, '../../node_modules/@jsnix/xterm'),
		},
	},
});
`}},"spinner.ts":{file:{contents:`export type SpinnerIconArgs = { success: string; error: string; warning: string };
export type ChildSpinnerOptions = Omit<SpinnerOptions, 'stream'>;
export type SpinnerOptions = {
	text?: string;
	frames: string[];
	interval: number;
	index?: number;
	stream: WritableStream;
	level?: number;
	sibling?: Spinner;
};

// A stack to track each running spinner (to facilitate multiple spinners)
const roots: Spinner[] = [];

export class Spinner {
	text?: string;
	stream: WritableStream;
	frames: string[];
	interval: number;
	index: number;
	timer: any | null;
	lastFrame: string | null;
	level: number;
	children: Spinner[] = [];
	sibling?: Spinner;
	icons: SpinnerIconArgs = {
		success: '‚úî',
		error: '‚úñ',
		warning: '‚ö†',
	};

	constructor({ text, frames, interval, index = 0, stream, level = 0, sibling }: SpinnerOptions) {
		this.text = text;
		this.frames = frames;
		this.interval = interval;
		this.index = index;
		this.timer = null;
		this.stream = stream;
		this.lastFrame = null;
		this.level = level;
		this.sibling = sibling;

		if (level === 0 && roots.length > 0) {
			// @ts-ignore
			roots[roots.length - 1].sibling = this;
		}
		roots.push(this);
	}

	addChild(options: ChildSpinnerOptions): Spinner {
		const spinner = new Spinner({
			stream: this.stream,
			level: this.level + 1,
			...options,
		});

		if (this.children.length > 0) {
			// @ts-ignore
			this.children[this.children.length - 1].sibling = spinner;
		}
		this.children.push(spinner);
		return spinner;
	}

	start() {
		this.timer = setInterval(async () => {
			await this.render();
		}, this.interval);
		this.children.forEach((child) => child.start());
	}

	clearFrame() {
		this.lastFrame = null;
		this.children.forEach((child) => child.clearFrame());
	}

	async clearTimer() {
		if (this.timer) {
			clearInterval(this.timer);
			this.timer = null;
		}
		this.children.forEach((child) => child.clearTimer());
	}

	async stop(text?: string) {
		if (!this.timer) return;
		this.clearTimer();

		const writer = this.stream.getWriter();

		try {
			await writer.ready;
			await this.clear(writer);
			this.clearFrame();
			await this.write(text || null, writer);
		}
		finally {
			writer.releaseLock();
		}
	}

	async render() {
		if (!this.timer) return;

		const writer = this.stream.getWriter();
		try {
			await writer.ready;
			await this.clear(writer);
			this.next();
			await this.write(this.frame(), writer);
		}
		finally {
			writer.releaseLock();
		}
	}

	next() {
		this.index = (this.index + 1) % this.frames.length;
	}

	async clearLine(writer: WritableStreamDefaultWriter) {
		await writer.write('\\x1b[F\\x1b[2K');
	}

	async clear(writer: WritableStreamDefaultWriter) {
		// clear siblings
		this.sibling && await this.sibling.clear(writer);

		// clear children (which will clear their children and siblings)
		// @ts-ignore
		this.children.length > 0 && await this.children[0].clear(writer);

		// clear self
		if (this.lastFrame) {
			await this.clearLine(writer);
		}
	}

	indent() {
		return ' '.repeat(this.level * 2);
	}

	frame() {
		return \`\${this.frames[this.index]} \${this.text || ''}\`;
	}

	async write(text: string | null, writer: WritableStreamDefaultWriter) {
		// write self
		if (text) {
			await writer.write(this.indent() + text + '\\n');
		}
		this.lastFrame = text;

		// write children (which will write their children and siblings)
		// @ts-ignore
		this.children.length > 0 && await this.children[0].write(this.children[0].lastFrame, writer);

		// write siblings
		this.sibling && await this.sibling.write(this.sibling.lastFrame, writer);
	}

	get isRunning() {
		return this.timer !== null;
	}
}

export const earth = {
	interval: 180,
	frames: [
		'üåç',
		'üåé',
		'üåè',
	],
};

export const dots = {
	interval: 80,
	frames: [
		'‚†ã',
		'‚†ô',
		'‚†π',
		'‚†∏',
		'‚†º',
		'‚†¥',
		'‚†¶',
		'‚†ß',
		'‚†á',
		'‚†è',
	],
};

export const clock = {
	interval: 100,
	frames: [
		'üïõ',
		'üïê',
		'üïë',
		'üïí',
		'üïì',
		'üïî',
		'üïï',
		'üïñ',
		'üïó',
		'üïò',
		'üïô',
		'üïö',
	],
};

export const squareCorners = {
	interval: 120,
	frames: [
		'‚ó∞ ',
		'‚ó≥ ',
		'‚ó≤ ',
		'‚ó± ',
	],
};

export const pipe = {
	interval: 100,
	frames: [
		'‚î§ ',
		'‚îò ',
		'‚î¥ ',
		'‚îî ',
		'‚îú ',
		'‚îå ',
		'‚î¨ ',
		'‚îê ',
	],
};
`}},"tsconfig.cjs.json":{file:{contents:`{
    "extends": "./tsconfig.json",
    "compilerOptions": {
        "outDir": "./dist/cjs",
        "target": "ES2020",
        "module": "CommonJS",
        "moduleResolution": "Node",
        "declaration": true,
        "declarationDir": "./dist/cjs",
        "emitDeclarationOnly": false
    },
}`}},"sync.ts":{file:{contents:`import type { WebContainer } from '@webcontainer/api';
import { promiseWithTimeout } from '@jsnix/utils/promises';

/**
 * A utility function for writing content to a file in a manner which blocks until the content has been read by the guest container.
 * @param content
 * @param path
 * @param timeout
 * @returns
 */
export const writeUntilRead = async (container: WebContainer, path: string, content: string, timeout = 5000) => {
	return promiseWithTimeout<void>(async (resolve, reject) => {
		try {
			// container.fs only seems to be aware of our mounted filesystem
			// so instead we write from within the container
			const process = await container?.spawn('node', ['-e', \`
                const fs = require('fs');
                const path = '\${path}';
            
                // Write data to the file
                fs.writeFileSync(path, \\\`\${content}\\\`);
                
                // Watch for changes to the file
                fs.watch(path, (eventType) => {
                    process.exit(0); // Exit when file changes
                });
              \`]);
			await process?.exit;
		}
		catch (err) {
			reject(err);
		}
		finally {
			resolve();
		}
	}, timeout);
};
`}},"spinner.test.ts":{file:{contents:`import { describe, it } from 'node:test';
import { clock, dots, earth, Spinner } from '@jsnix/utils/spinner';
import chalk from 'chalk';

function nodeStreamToWritableStream(nodeStream: NodeJS.WritableStream): WritableStream {
	return new WritableStream({
		write(chunk) {
			// Convert the chunk to a string (if it's a Buffer, etc.)
			const data = chunk instanceof Uint8Array ? new TextDecoder().decode(chunk) : chunk;

			// Write the data to the Node.js stream (e.g., process.stdout)
			nodeStream.write(data);
		},
		close() {
			// Close the Node.js stream when the WritableStream is closed
			nodeStream.end();
		},
		abort(err) {
			console.error(err);
		},
	});
}

describe('spinner', async () => {
	// TODO: actual test here
	it('should work', async () => {
		const root = new Spinner({
			text: 'root',
			stream: nodeStreamToWritableStream(process.stdout),
			...clock,
		});
		root.start();
		const child = root.addChild({
			text: 'child',
			...earth,
		});

		const grandchild = child.addChild({
			text: 'grandchild',
			...dots,
		});

		const ggrandchild = grandchild.addChild({
			text: 'grand-grandchild',
			...dots,
		});
		child.start();

		const child2 = root.addChild({
			text: 'other child',
			...dots,
		});
		child2.start();

		const anotherRoot = new Spinner({
			text: 'another',
			stream: nodeStreamToWritableStream(process.stdout),
			...clock,
		});
		anotherRoot.start();

		await new Promise((resolve) => setTimeout(resolve, 4000));
		await ggrandchild.stop(chalk.green('‚úî great-grandchild done'));
		await new Promise((resolve) => setTimeout(resolve, 2000));
		await root.stop(chalk.green('‚úî root done'));
		await new Promise((resolve) => setTimeout(resolve, 2000));
		await anotherRoot.stop(chalk.green('‚úî another done'));
	});
});
`}},"tsconfig.json":{file:{contents:`{
    "extends": "../../tsconfig.base.json",
    "compilerOptions": {
        "outDir": "dist",
        "declaration": true,
        "target": "ESNext",
        "moduleResolution": "node",
        "allowSyntheticDefaultImports": true,
        "esModuleInterop": true,
        "types": [
            "node"
        ]
    },
    "include": [
        "**/*.ts",
    ],
    "exclude": [
        "dist",
        "node_modules",
        "e2e"
    ]
}`}},"tsconfig.esm.json":{file:{contents:`{
    "extends": "./tsconfig.json",
    "compilerOptions": {
        "outDir": "./dist/esm",
        "target": "ES2020",
        "module": "ESNext",
        "moduleResolution": "Node",
        "declaration": true,
        "declarationDir": "./dist/esm",
        "emitDeclarationOnly": false
    },
}`}},"esbuild.ts":{file:{contents:`import fs from 'node:fs/promises';
import path from 'node:path';
import { buildIgnore, takeSnapshot, buildTree, SnapshotProps, snapshotDefaults } from '@jsnix/utils/snapshot';
import { FileSystemTree } from '@webcontainer/api';

export type Esbuild = {
	cacheDir?: string;
};

export type SnapshotCache = {
	timestamp: number;
	files: string[];
	totalSize: number;
	snapshot: FileSystemTree;
};

const cacheFolder = '.cache';
const cacheFile = '@jsnix-snapshot.json';
const esbuildDefaults: Required<SnapshotProps<Esbuild>> = {
	...snapshotDefaults,
	cacheDir: path.resolve(process.cwd(), cacheFolder),
};
export const snapshot = (props: SnapshotProps<Esbuild> = {}) => {
	const { root, cacheDir, include, exclude, gitignore, transform } = { ...esbuildDefaults, ...props };

	return {
		name: '@jsnix/snapshot',
		async setup(build: any) {
			const cacheFilePath = path.resolve(cacheDir, cacheFile);
			const excluded = await buildIgnore(root, include, exclude, gitignore);
			const resolved = path.resolve(root);

			// Check if the snapshot needs to be rebuilt
			async function needsRebuild(resolved: string, cache: SnapshotCache): Promise<boolean> {
				const seenFiles = new Set<string>(cache.files);
				let seenSize = 0;

				for await (const filePath of buildTree(resolved, undefined, excluded)) {
					const stats = await fs.stat(filePath);

					// Check for newer modifications
					if (stats.mtimeMs > cache.timestamp) return true;

					// Check whether we've seen this file
					if (!seenFiles.has(filePath)) return true;

					// Update seen files and size
					seenFiles.delete(filePath);
					seenSize += stats.size;
				}

				// Check for added or missing files and size mismatch
				if (seenFiles.size > 0 || seenSize !== cache.totalSize) {
					return true;
				}

				return false;
			}

			// Load or create the cache
			async function loadOrCreateCache(): Promise<SnapshotCache> {
				try {
					const cacheContent = await fs.readFile(cacheFilePath, 'utf-8');
					const cache = JSON.parse(cacheContent);
					return {
						...cache,
						files: new Set(cache.files),
					};
				}
				catch {
					return { timestamp: 0, files: [], totalSize: 0, snapshot: {} };
				}
			}

			// Save the cache
			async function saveCache(cache: SnapshotCache) {
				await fs.mkdir(path.dirname(cacheFilePath), { recursive: true });
				const serializedCache = {
					...cache,
					files: Array.from(cache.files), // Convert Set to array for JSON serialization
				};
				await fs.writeFile(cacheFilePath, JSON.stringify(serializedCache, null, 2));
			}

			build.onResolve({ filter: /^virtual:@jsnix\\/snapshot/ }, (args: any) => {
				return {
					path: args.path,
					namespace: 'jsnix-snapshot',
				};
			});

			build.onLoad({ filter: /.*/, namespace: 'jsnix-snapshot' }, async () => {
				const cache = await loadOrCreateCache();
				const shouldRebuild = await needsRebuild(resolved, cache);

				let snapshot: FileSystemTree;
				if (shouldRebuild) {
					snapshot = await transform(await takeSnapshot({ root: resolved, include, exclude, gitignore }));

					const files: string[] = [];
					let totalSize = 0;

					for await (const filePath of buildTree(resolved, undefined, excluded)) {
						const stats = await fs.stat(filePath);

						files.push(filePath);
						totalSize += stats.size;

						// Update latest timestamp
						if (stats.mtimeMs > cache.timestamp) {
							cache.timestamp = stats.mtimeMs;
						}
					}

					cache.files = files;
					cache.totalSize = totalSize;
					cache.snapshot = snapshot;
					await saveCache(cache);
				}
				else {
					snapshot = cache.snapshot;
				}

				return {
					contents: \`export default \${JSON.stringify(snapshot)}\`,
					loader: 'js',
				};
			});
		},
	};
};
`}},"package.json":{file:{contents:`{
  "name": "@jsnix/utils",
  "version": "0.0.60",
  "description": "jsnix shared utils",
  "type": "module",
  "scripts": {
    "dev": "tsc -p tsconfig.esm.json",
    "check-types": "tsc --noEmit -p tsconfig.esm.json && tsc --noEmit -p tsconfig.cjs.json",
    "build": "tsc -p tsconfig.esm.json && tsc -p tsconfig.cjs.json",
    "test": "test:unit && test:e2e",
    "test:unit": "mocha **/*.test.ts",
    "test:e2e": "playwright test",
    "clean": "rm -rf .turbo dist node_modules",
    "lint": "eslint --fix -c ../../eslint.config.js .",
    "vite": "vite",
    "playwright": "playwright test"
  },
  "author": "theodore brockman",
  "license": "MIT",
  "dependencies": {
    "@jsnix/addon-fit": "^0.10.1",
    "@jsnix/xterm": "^5.5.13",
    "@webcontainer/api": "^1.5.1",
    "big-json": "^3.2.0",
    "chalk": "^5.3.0",
    "ignore": "^7.0.0",
    "lru-cache": "^11.0.2",
    "parse-gitignore": "^2.0.0",
    "path-browserify": "^1.0.1"
  },
  "devDependencies": {
    "@playwright/test": "^1.49.1",
    "@sindresorhus/tsconfig": "^7.0.0",
    "@types/big-json": "^3.2.5",
    "@types/chai": "^5.0.1",
    "@types/jsdom": "^21.1.7",
    "@types/jsonpath": "^0.2.4",
    "@types/mocha": "^10.0.10",
    "@types/node": "^22.10.5",
    "@types/parse-gitignore": "^1.0.2",
    "@types/path-browserify": "^1.0.3",
    "chai": "^5.1.2",
    "mocha": "^11.0.1",
    "tsx": "^4.19.2",
    "vite": "^6.0.7"
  },
  "exports": {
    "./collection": {
      "import": "./dist/esm/collection.js",
      "require": "./dist/cjs/collection.js"
    },
    "./container": {
      "import": "./dist/esm/container.js",
      "require": "./dist/cjs/container.js"
    },
    "./editor": {
      "import": "./dist/esm/editor.js",
      "require": "./dist/cjs/editor.js"
    },
    "./esbuild": {
      "import": "./dist/esm/esbuild.js",
      "require": "./dist/cjs/esbuild.js"
    },
    "./escapes": {
      "import": "./dist/esm/escapes.js",
      "require": "./dist/cjs/escapes.js"
    },
    "./promises": {
      "import": "./dist/esm/promises.js",
      "require": "./dist/cjs/promises.js"
    },
    "./helpers": {
      "import": "./dist/esm/helpers.js",
      "require": "./dist/cjs/helpers.js"
    },
    "./ipc": {
      "import": "./dist/esm/ipc.js",
      "require": "./dist/cjs/ipc.js"
    },
    "./osc": {
      "import": "./dist/esm/osc.js",
      "require": "./dist/cjs/osc.js"
    },
    "./snapshot": {
      "import": "./dist/esm/snapshot.js",
      "require": "./dist/cjs/snapshot.js"
    },
    "./spinner": {
      "import": "./dist/esm/spinner.js",
      "require": "./dist/cjs/spinner.js"
    },
    "./sync": {
      "import": "./dist/esm/sync.js",
      "require": "./dist/cjs/sync.js"
    },
    "./terminal": {
      "import": "./dist/esm/terminal.js",
      "require": "./dist/cjs/terminal.js"
    },
    "./types": {
      "import": "./dist/esm/types.js",
      "require": "./dist/cjs/types.js"
    },
    "./vite": {
      "import": "./dist/esm/vite.js",
      "require": "./dist/cjs/vite.js"
    },
    "./opfs": {
      "import": "./dist/esm/opfs.js",
      "require": "./dist/cjs/opfs.js"
    },
    "./filesystemtree": {
      "import": "./dist/esm/filesystemtree.js",
      "require": "./dist/cjs/filesystemtree.js"
    }
  },
  "files": [
    "dist"
  ]
}
`}},"playwright.config.ts":{file:{contents:`import { defineConfig, devices } from '@playwright/test';

/**
 * Read environment variables from file.
 * https://github.com/motdotla/dotenv
 */
// import dotenv from 'dotenv';
// import path from 'path';
// dotenv.config({ path: path.resolve(__dirname, '.env') });

/**
 * See https://playwright.dev/docs/test-configuration.
 */
export default defineConfig({
	testDir: './e2e',
	/* Run tests in files in parallel */
	fullyParallel: true,
	/* Fail the build on CI if you accidentally left test.only in the source code. */
	forbidOnly: !!process.env.CI,
	/* Retry on CI only */
	retries: process.env.CI ? 2 : 0,
	/* Opt out of parallel tests on CI. */
	workers: process.env.CI ? 1 : undefined,
	/* Reporter to use. See https://playwright.dev/docs/test-reporters */
	reporter: 'html',
	/* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */
	use: {
		/* Base URL to use in actions like \`await page.goto('/')\`. */
		baseURL: 'http://127.0.0.1:3000',

		/* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */
		trace: 'on-first-retry',
	},

	/* Configure projects for major browsers */
	projects: [
		{
			name: 'chromium',
			use: { ...devices['Desktop Chrome'] },
		},

		// {
		//   name: 'firefox',
		//   use: { ...devices['Desktop Firefox'] },
		// },

		// {
		//   name: 'webkit',
		//   use: { ...devices['Desktop Safari'] },
		// },
	],

	/* Run your local dev server before starting the tests */
	webServer: {
		command: 'npm run vite', // Start Vite and wait until it's ready
		url: 'http://localhost:3000/',
		reuseExistingServer: true,
		timeout: 5000,
	},
});
`}},"snapshot.ts":{file:{contents:`import * as fs from 'node:fs/promises';
import path from 'node:path';
import parse from 'parse-gitignore';
import type { FileSystemTree } from '@webcontainer/api';
import ignore, { Ignore } from 'ignore';
import { constants, PathLike } from 'node:fs';

export const pathExists = async (filePath: PathLike) => {
	try {
		await fs.access(filePath, constants.F_OK);
		return true; // The path exists
	}
	catch {
		return false; // The path does not exist
	}
};

export const buildTree = async function* (dir: string, tree?: FileSystemTree, exclude?: Ignore, rootDir = dir): AsyncGenerator<string> {
	for await (const d of await fs.opendir(dir)) {
		const entry = path.join(dir, d.name);
		const relativeEntry = path.relative(rootDir, entry);

		if (exclude && exclude.ignores(relativeEntry)) {
			continue;
		}

		if (d.isDirectory()) {
			const node: FileSystemTree = {};

			if (tree) {
				tree[d.name] = { directory: node };
			}
			yield* buildTree(entry, node, exclude, rootDir);
		}
		else if (d.isFile()) {
			const contents = await fs.readFile(entry, 'utf8');
			if (tree) {
				tree[d.name] = { file: { contents } };
			}
			yield entry;
		}
		else if (d.isSymbolicLink()) {
			const symlink = await fs.readlink(entry);
			if (tree) {
				tree[d.name] = { file: { symlink } };
			}
			yield entry;
		}
	}
};

export const buildIgnore = async (root: string, include: string[], exclude: string[], gitignore: string | null) => {
	const excluded = ignore().add(exclude);

	if (gitignore !== null) {
		const resolved = path.resolve(root, gitignore);

		if (await pathExists(resolved)) {
			const ignoreFiles = await fs.readFile(resolved);
			// @ts-ignore
			const { patterns } = parse(ignoreFiles);
			excluded.add(patterns);
		}
	}
	// include patterns are negated and should supercede exclude
	include = include.map((pattern) => pattern.startsWith('!') ? pattern.slice(1) : \`!\${pattern}\`);
	excluded.add(include);

	return excluded;
};

export const snapshotDefaults: Required<SnapshotProps<unknown>> = {
	root: process.cwd(),
	include: [],
	exclude: ['.git'],
	gitignore: '.gitignore',
	transform: async (fs: FileSystemTree) => fs,
};
export type SnapshotProps<T> = {
	transform?: (tree: FileSystemTree) => Promise<FileSystemTree>;
} & Partial<TakeSnapshotProps> & T;
export type TakeSnapshotProps = {
	root: string;
	include: string[];
	exclude: string[];
	gitignore: string | null;
};
/**
 * Takes a snapshot of the file system based on the provided properties.
 *
 * @param props - The properties to configure the snapshot.
 */
export const takeSnapshot = async (props: Partial<TakeSnapshotProps> = {}) => {
	const { root, include, exclude, gitignore } = { ...snapshotDefaults, ...props };
	const filetree: FileSystemTree = {};

	const excluded = await buildIgnore(root, include, exclude, gitignore);

	// eslint-disable-next-line
	for await (const _ of buildTree(root, filetree, excluded)) { }

	return filetree;
};
`}},"helpers.ts":{file:{contents:`import fs from 'fs/promises';
import { KeyValue } from '@jsnix/utils/types';
import { promiseWithTimeout } from '@jsnix/utils/promises';

export const waitForFileChange = async (path: string, timeout: number = 5000) => {
	return await promiseWithTimeout(async (resolve, reject) => {
		try {
			// eslint-disable-next-line
			for await (const _ of fs.watch(path)) {
				resolve(true);
				break;
			}
		}
		catch (e) {
			reject(e);
		}
	}, timeout);
};

export const writeOsc = async (
	id: number,
	data: KeyValue,
	encoding: BufferEncoding = 'base64',
	timeoutMs: number = 5000,
): Promise<string | null> => {
	const b64 = Buffer.from(JSON.stringify(data)).toString(encoding);
	const uid = crypto.randomUUID();
	const sequence = \`\\x1b]\${id};data;\${uid};\${b64}\\x07\`;
	const path = \`/tmp/\${uid}\`;

	// Create a file for synchronization
	await fs.writeFile(path, '');
	// Send the OSC command
	console.log(sequence);
	// Wait for the handler to process the file
	await waitForFileChange(path, timeoutMs);
	// Read contents of output from handler (if any)
	const contents = await fs.readFile(path, 'utf8');
	// Remove the file
	await fs.rm(path);
	// Return any file contents to the caller
	return contents.length > 0 ? contents : null;
};
`}},"escapes.ts":{file:{contents:`// const ESC = '\\u001B[';
const OSC = '\\u001B]';
const BEL = '\\u0007';
const SEP = ';';

export const link = (text: string, url: string) => [
	OSC,
	'8',
	SEP,
	SEP,
	url,
	BEL,
	text,
	OSC,
	'8',
	SEP,
	SEP,
	BEL,
].join('');
`}},"types.ts":{file:{contents:`import type { JsnixTerminal } from '@jsnix/utils/terminal';
import type { WebContainer, WebContainerProcess } from '@webcontainer/api';
import type { Editor } from '@jsnix/utils/editor';
import type * as monaco from 'monaco-editor';

export type Primitive = string | number | boolean | null | undefined | object;
export type Values = Primitive | Primitive[] | KeyValue;
export type KeyValue = {
	[key in string]: Values;
};

export type OscHandlerProps = {
	data: KeyValue;
	terminal: JsnixTerminal;
	document: Document;
	container: WebContainer | null;
	editor: Editor | null;
	initEditor: () => Promise<{ editor: Editor; monaco: monaco.editor.IStandaloneCodeEditor }>;
	process: WebContainerProcess | null;
	// ...
};

export type OscHandlerResponse = boolean | string;
export type OscHandler = (props: OscHandlerProps) => Promise<OscHandlerResponse>;
export type OscData = {
	id: number;
	handler: OscHandler;
};
export type OnServerReadyHandler = (props: OnServerReadyProps) => Promise<void>;
export type OnServerReadyProps = {
	port: number;
	url: string;
	fetch: (req: RelayRequestInit) => Promise<Response | null>;
	container: WebContainer | null;
	editor: Editor | null;
	terminal: JsnixTerminal | null;
	initEditor: () => Promise<{ editor: Editor; monaco: monaco.editor.IStandaloneCodeEditor }>;
};
export type OnPortHandlerProps = OnServerReadyProps & {
	type: 'close' | 'open';
};
export type OnPortHandler = (props: OnPortHandlerProps) => Promise<void>;
export type JsnixExports = {
	bin?: string[];
	osc?: OscData;
	onServerReady?: OnServerReadyHandler;
	onPort?: OnPortHandler;
};
export type RelayRequestInit = Omit<RequestInit, 'body'> & {
	body?: string | null | undefined;
	path?: string;
};
export type RelayRequest = RelayRequestInit & {
	url: string;
};
`}},e2e:{directory:{"index.html":{file:{contents:`<html lang="en">
  <head>
  </head>
  <body style="width: 100vw; height: 100vh; margin: 0; padding: 0; overflow: hidden;">
    <div id="root" style="height: 100%; width: 100%"></div>
    <script type="module" src="./index.ts"><\/script>
  </body>
</html>`}},"opfs.test.ts":{file:{contents:`import { test, expect } from '@playwright/test';

test.describe('opfs', () => {
    test.beforeEach(async ({ page }) => {
        // Navigate to a blank page to ensure a clean environment
        await page.goto('http://localhost:3000/');

        // Clear OPFS storage before each test
        await page.evaluate(async () => {
            const rootHandle = await navigator.storage.getDirectory();
            for await (const [name, handle] of rootHandle.entries()) {
                await rootHandle.removeEntry(name, { recursive: true });
            }
        });
    });

    test.describe('toFileSystemTree', () => {
        test('should correctly generate a FileSystemTree', async ({ page }) => {
            // Create a test directory structure in the Origin Private File System
            await page.evaluate(async () => {
                const rootHandle = await navigator.storage.getDirectory();
                const testDirHandle = await rootHandle.getDirectoryHandle('testDir', { create: true });
                const fileHandle = await testDirHandle.getFileHandle('testFile.txt', { create: true });
                const writable = await fileHandle.createWritable();
                await writable.write('Hello, World!');
                await writable.close();
            });

            // Call the method under test in the browser context
            const fileSystemTree = await page.evaluate(async () => {
                const a = window.opfs();
                await a.init();
                return await a.toFileSystemTree();
            });

            // Define the expected tree structure
            const expectedTree = {
                testDir: {
                    directory: {
                        'testFile.txt': {
                            file: {
                                contents: 'Hello, World!',
                            },
                        },
                    },
                },
            };

            // Assert that the generated tree matches the expected tree
            expect(fileSystemTree).toEqual(expectedTree);
        });

        test('should handle nested directories and empty files', async ({ page }) => {
            // Create a nested directory structure in the OPFS
            await page.evaluate(async () => {
                const rootHandle = await navigator.storage.getDirectory();
                const nestedDirHandle = await rootHandle.getDirectoryHandle('nestedDir', { create: true });
                const subDirHandle = await nestedDirHandle.getDirectoryHandle('subDir', { create: true });
                const fileHandle = await subDirHandle.getFileHandle('nestedFile.txt', { create: true });
                const writable = await fileHandle.createWritable();
                await writable.write('Nested File Content');

                const otherFileHandle = await subDirHandle.getFileHandle('nestedFileTwo.txt', { create: true });
                await writable.close();
            });

            // Call the method under test in the browser context
            const fileSystemTree = await page.evaluate(async () => {
                const a = window.opfs();
                await a.init();
                return await a.toFileSystemTree();
            });

            // Define the expected tree structure
            const expectedTree = {
                nestedDir: {
                    directory: {
                        subDir: {
                            directory: {
                                'nestedFile.txt': {
                                    file: {
                                        contents: 'Nested File Content',
                                    },
                                },
                                'nestedFileTwo.txt': {
                                    file: {
                                        contents: '',
                                    },
                                },
                            },
                        },
                    },
                },
            };

            // Assert that the generated tree matches the expected tree
            expect(fileSystemTree).toEqual(expectedTree);
        });
    })

    test.describe('write', () => {
        test('should write content to a file', async ({ page }) => {
            // Create a new file in the root directory
            const tree = await page.evaluate(async () => {
                const a = window.opfs();
                await a.init();
                await a.write('test.txt', 'Hello, World!');
                return await a.toFileSystemTree();
            });

            expect(tree).toEqual({
                'test.txt': {
                    file: {
                        contents: 'Hello, World!',
                    },
                },
            });
        })

        test('should write content to a file (creating necessary intermediate folders)', async ({ page }) => {
            const tree = await page.evaluate(async () => {
                const a = window.opfs();
                await a.init();
                await a.write('/nested/dir/test.txt', 'Hello, World!');
                return await a.toFileSystemTree();
            });

            expect(tree).toEqual({
                nested: {
                    directory: {
                        dir: {
                            directory: {
                                'test.txt': {
                                    file: {
                                        contents: 'Hello, World!',
                                    }
                                }
                            }
                        }
                    }
                }
            })
        })
    });
})`}},"index.ts":{file:{contents:`// @ts-nocheck
import { JsnixTerminal } from '@jsnix/utils/terminal';
import { waitUntil } from '@jsnix/utils/promises';
import { FitAddon } from '@jsnix/addon-fit';
import '@jsnix/xterm/css/xterm.css';
import { OriginPrivateFileSystem } from '@jsnix/utils/opfs'; // Adjust the import path as needed

const term = new JsnixTerminal({
	allowProposedApi: true,
	reflowCursorLine: true,
});

window.opfs = () => new OriginPrivateFileSystem();
window.terminal = term;
window.waitUntil = waitUntil;
window.fit = new FitAddon();
term.open(document.getElementById('root')!);
term.loadAddon(window.fit);
window.fit.fit();
`}}}},".mocharc.json":{file:{contents:`{
    "$schema": "https://json.schemastore.org/mocharc.json",
    "require": "tsx"
}`}},".github":{directory:{workflows:{directory:{"playwright.yml":{file:{contents:`name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - name: Install dependencies
      run: npm ci
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    - name: Run Playwright tests
      run: npx playwright test
    - uses: actions/upload-artifact@v4
      if: \${{ !cancelled() }}
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
`}}}}}},"terminal.ts":{file:{contents:`import { IDecoration, IDecorationOptions, Terminal as XTerminal } from '@jsnix/xterm';

export interface JsnixDecoration extends IDecoration {
	hasRendered: Promise<void>;
}

export class JsnixTerminal extends XTerminal {
	process?: {
		input: WritableStreamDefaultWriter<string>;
	};
	debug: boolean = false;

	getActiveBuffer(ugly: boolean = false, clip: boolean = true): string {
		const buffer = this.buffer.active;
		let print = '';

		for (let i = 0; i < buffer.length; i++) {
			if (clip && i < buffer.viewportY) continue;

			const line = buffer.getLine(i);
			const string = line?.translateToString(false);

			if (ugly) {
				const padding = ' '.repeat((Math.log(buffer.length) * Math.LOG10E + 1 | 0) - (Math.log(i) * Math.LOG10E + 1 | 0 || 1));
				const hasCursor = (buffer.cursorY + buffer.viewportY) === i;
				const markers = this.markers.filter((marker) => marker.line === i);
				print += \`[\${padding}\${i}] \` + string;
				print += line?.isWrapped ? '[wraps]' : '';
				print += hasCursor ? '<-- cursor' : '';

				markers.forEach((marker) => {
					print += \`<-- marker [\${marker.id}]\`;
				});
				print += '\\n';
			}
			else {
				print += string + '\\n';
			}
		}
		return print;
	}

	printBuffer() {
		if (!this.debug) return;

		const printable = this.getActiveBuffer(this.debug);
		const buffer = this.buffer.active;

		console.debug({ bufferLength: buffer.length, cursorY: buffer.cursorY, cursorX: buffer.cursorX, viewportY: buffer.viewportY, baseY: buffer.baseY, rows: this.rows, cols: this.cols, markers: this.markers });
		console.debug(printable);
	}

	async writeAsync(data: string | Uint8Array): Promise<void> {
		return new Promise((resolve) => super.write(data, resolve));
	}

	override async write(data: string | Uint8Array, callback?: () => void) {
		return this.writeAsync(data).then(() => callback?.());
	}

	async writelnAsync(data: string | Uint8Array): Promise<void> {
		return new Promise((resolve) => super.writeln(data, resolve));
	}

	override async writeln(data: string | Uint8Array, callback?: () => void) {
		return this.writelnAsync(data).then(() => callback?.());
	}

	getWritableStream<T extends (string | Uint8Array)>(): WritableStream<T> {
		return new WritableStream<T>({
			write: async (chunk: T) => {
				this.write(chunk);
			},
		});
	}

	override registerDecoration(decorationOptions: IDecorationOptions): JsnixDecoration | undefined {
		const decoration = super.registerDecoration(decorationOptions);

		if (decoration) {
			return {
				...decoration,
				hasRendered: new Promise((resolve) => {
					const disposable = decoration?.onRender(() => {
						resolve();
						this.printBuffer();
						disposable.dispose();
					});
				}),
			} as JsnixDecoration;
		}
		return undefined;
	}
}
`}},"filesystemtree.ts":{file:{contents:`import type { DirectoryNode, FileNode, FileSystemTree, SymlinkNode } from '@webcontainer/api';

export type TraversalResult = {
    name: string;
    node: DirectoryNode | FileNode | SymlinkNode;
    parent: FileSystemTree;
    path: string;
};

export const traverse = function* (tree: FileSystemTree, path = ''): Generator<TraversalResult> {
    for (const [name, node] of Object.entries(tree)) {
        const nodePath = path + ((path ? '/' : '') + name);
        yield { name, node, parent: tree, path: nodePath };

        if ('directory' in node) {
            yield* traverse(node.directory, nodePath);
        }
    }
};`}},"container.ts":{file:{contents:`import { WebContainer, FileSystemAPI, BootOptions, FSWatchOptions, FSWatchCallback, IFSWatcher, BufferEncoding, DirEnt, FileSystemTree } from '@webcontainer/api';
import path from 'path-browserify';

export type JsnixMountOptions = {
	mountPoint?: string,
	autoSave?: boolean
}
export type FsOrFsFunction = Fs | (() => Promise<Fs>);
export type Fs = ArrayBuffer | Uint8Array | FileSystemTree;

export class JsnixWebContainer extends WebContainer {
	declare fs: JsnixFileSystemAPI;

	static override async boot(bootOptions: BootOptions): Promise<JsnixWebContainer> {
		const container = await super.boot(bootOptions) as JsnixWebContainer;

		// Change the prototype of the instance to JsnixWebContainer
		Object.setPrototypeOf(container, JsnixWebContainer.prototype);

		// Replace the \`fs\` instance with the extended one
		container.fs = new JsnixFileSystem(container.fs, { cwd: container.workdir });
		// container.opfs = new OriginPrivateFileSystem()
		// await container.opfs.init()

		return container;
	}

	async loadSnapshot(): Promise<Fs | null> {
		return null;
		// TODO:
		// const snapshot = await this.opfs.toFileSystemTree()
		// console.log(this, this.opfs, snapshot, this.fs)
		// return Object.keys(snapshot).length === 0 ? null : snapshot
	}

	// TODO:
	// async watchAndSave(path: string) {
	// 	const watcher = this.fs.watch(path, { recursive: true }, async (_, filename) => {
	// 		try {
	// 			// readdir fails for non-files, so determining what filetype it should be can be done by catching that error
	// 			let contents: string | string[];
	// 			filename = filename as string

	// 			// TODO: handle directory and file renaming/removing
	// 			try {
	// 				contents = await this.fs.readdir(filename)
	// 				await this.opfs.mkdir(filename)
	// 			} catch (err) {
	// 				if ((err as Error).toString().indexOf('ENOTDIR') > -1) {
	// 					// not a directory, so it's a file
	// 					contents = await this.fs.readFile(filename, 'utf8')

	// 					// const test = await watcher._apiClient._fs['stats'](filename)
	// 					// console.log('lstat test', this._instance, this.fs, this.fs?._instance)

	// 					// this allows us to be aware of symlinks
	// 					// const tree = await this.export(filename, { format: 'json' })
	// 					// console.debug('have tree', { tree })
	// 					await this.opfs.write(filename, contents)
	// 				}
	// 			}
	// 		} catch (err) {
	// 			console.error('error reading/writing changed file', err);
	// 			watcher.close()
	// 		}
	// 	});
	// }

	override async mount(snapshot: Fs, { autoSave = true, ...options }: JsnixMountOptions) {
		// let mountPoint = options.mountPoint || '/';
		// let snapshot: Fs | null = autoSave ? await this.loadSnapshot() : null;
		// let wasNull = snapshot === null;

		// if (!snapshot) {
		// 	snapshot = ((typeof snapshotOrTree === 'function') ? await snapshotOrTree() : snapshotOrTree) as Fs;
		// }

		// TODO:
		// if (autoSave) {
		// 	wasNull && await this.opfs.writeTree(snapshot as FileSystemTree)
		// 	this.watchAndSave(mountPoint);
		// }
		return super.mount(snapshot, options);
	}
}


export type JsnixFileSystemOptions = {
	cwd: string;
}

/**
 * Extends the FileSystemAPI to allow specifying \`cwd\` in each method.
 */
class JsnixFileSystem implements JsnixFileSystemAPI {
	#baseFs: FileSystemAPI;
	#cwd: string;

	constructor(baseFs: FileSystemAPI, { cwd }: JsnixFileSystemOptions) {
		this.#baseFs = baseFs;
		this.#cwd = cwd;
	}

	resolve(inputPath: string, cwd?: string): string {
		const resolved = cwd ? path.relative(this.#cwd, path.isAbsolute(inputPath) ? inputPath : path.join(cwd, inputPath)) : inputPath;
		return resolved;
	}

	async readdir(path: string, options?: any): Promise<any> {
		const resolvedPath = this.resolve(path, options?.cwd);
		if (options?.encoding === 'buffer' && options?.withFileTypes) {
			return this.#baseFs.readdir(resolvedPath, { encoding: 'buffer', withFileTypes: true });
		}
		if (options?.encoding === 'buffer') {
			return this.#baseFs.readdir(resolvedPath, { encoding: 'buffer' });
		}
		return this.#baseFs.readdir(resolvedPath, options);
	}

	async readFile(path: string, encoding?: null | BufferEncoding, options?: { cwd?: string }): Promise<any> {
		const resolvedPath = this.resolve(path, options?.cwd);
		if (encoding) {
			return this.#baseFs.readFile(resolvedPath, encoding);
		}
		return this.#baseFs.readFile(resolvedPath, encoding);
	}

	async writeFile(
		path: string,
		data: string | Uint8Array,
		options?: string | { encoding?: string | null; cwd?: string } | null,
	): Promise<void> {
		const resolvedPath = this.resolve(path, (options as any)?.cwd);
		if (typeof options === 'string' || options?.encoding) {
			return this.#baseFs.writeFile(resolvedPath, data, options);
		}
		return this.#baseFs.writeFile(resolvedPath, data, options);
	}

	async mkdir(path: string, options?: { recursive?: boolean; cwd?: string }): Promise<any> {
		const resolvedPath = this.resolve(path, options?.cwd);

		if (options?.recursive) {
			return this.#baseFs.mkdir(resolvedPath, { recursive: true });
		}
		else {
			return this.#baseFs.mkdir(resolvedPath, { recursive: false });
		}
	}

	async rm(path: string, options?: { force?: boolean; recursive?: boolean; cwd?: string }): Promise<void> {
		const resolvedPath = this.resolve(path, options?.cwd);
		return this.#baseFs.rm(resolvedPath, options);
	}

	async rename(oldPath: string, newPath: string, options?: { cwd?: string }): Promise<void> {
		const resolvedOldPath = this.resolve(oldPath, options?.cwd);
		const resolvedNewPath = this.resolve(newPath, options?.cwd);
		return this.#baseFs.rename(resolvedOldPath, resolvedNewPath);
	}

	watch(
		filename: string,
		optionsOrListener?: string | null | {
			encoding?: BufferEncoding | null;
			persistent?: boolean;
			recursive?: boolean;
			cwd?: string;
		} | FSWatchCallback,
		listener?: FSWatchCallback,
	): IFSWatcher {
		if (typeof optionsOrListener === 'function') {
			const resolvedPath = this.resolve(filename);
			return this.#baseFs.watch(resolvedPath, undefined, optionsOrListener);
		}
		else {
			if (typeof optionsOrListener === 'string' || optionsOrListener === null) {
				const resolvedPath = this.resolve(filename);
				return this.#baseFs.watch(resolvedPath, optionsOrListener, listener);
			}
			const resolvedPath = this.resolve(filename, optionsOrListener?.cwd);
			return this.#baseFs.watch(resolvedPath, optionsOrListener, listener);
		}
	}

	_teardown(): void {
		// @ts-expect-error
		this.#baseFs._teardown();
	}
}

/**
 * Extends the original FileSystemAPI with optional \`cwd\` support for relevant methods.
 */
interface JsnixFileSystemAPI extends FileSystemAPI {
	resolve(inputPath: string, cwd?: string): string;

	readdir(path: string, options: 'buffer' | {
		encoding: 'buffer';
		withFileTypes?: false;
		cwd?: string;
	}): Promise<Uint8Array[]>;
	readdir(path: string, options?: {
		encoding?: BufferEncoding | null;
		withFileTypes?: false;
		cwd?: string;
	} | BufferEncoding | null): Promise<string[]>;
	readdir(path: string, options: {
		encoding: 'buffer';
		withFileTypes: true;
		cwd?: string;
	}): Promise<DirEnt<Uint8Array>[]>;
	readdir(path: string, options: {
		encoding?: BufferEncoding | null;
		withFileTypes: true;
		cwd?: string;
	}): Promise<DirEnt<string>[]>;

	readFile(path: string, encoding?: null, options?: { cwd?: string }): Promise<Uint8Array>;
	readFile(path: string, encoding: BufferEncoding, options?: { cwd?: string }): Promise<string>;

	writeFile(
		path: string,
		data: string | Uint8Array,
		options?: string | { encoding?: string | null; cwd?: string } | null
	): Promise<void>;

	mkdir(path: string, options?: {
		recursive?: false;
		cwd?: string;
	}): Promise<void>;
	mkdir(path: string, options: {
		recursive: true;
		cwd?: string;
	}): Promise<string>;

	rm(path: string, options?: {
		force?: boolean;
		recursive?: boolean;
		cwd?: string;
	}): Promise<void>;

	rename(oldPath: string, newPath: string, options?: { cwd?: string }): Promise<void>;

	watch(filename: string, options?: FSWatchOptions & { cwd?: string }, listener?: FSWatchCallback): IFSWatcher;
	watch(filename: string, listener?: FSWatchCallback): IFSWatcher;
}
`}},"editor.ts":{file:{contents:`import type * as monacoTypes from 'monaco-editor';
import { JsnixWebContainer } from './container';
import { Disposable, Emitter } from '@jsnix/xterm';

// TODO: make this extend regular monaco-editor
export class Editor extends Disposable {
	#monaco: monacoTypes.editor.IStandaloneCodeEditor;
	#container: JsnixWebContainer;
	#monacoLib: typeof monacoTypes;
	#isOpen: boolean;

	private readonly _onClose = this._register(new Emitter<{ uri?: string }>());
	public readonly onClose = this._onClose.event;

	private readonly _onSave = this._register(new Emitter<{ uri: string }>());
	public readonly onSave = this._onSave.event;

	private readonly _onOpen = this._register(new Emitter<{ uri: string }>());
	public readonly onOpen = this._onOpen.event;

	get instance() {
		return this.#monaco;
	}

	constructor(
		monaco: monacoTypes.editor.IStandaloneCodeEditor,
		monacoLib: typeof monacoTypes,
		container: JsnixWebContainer,
		open: boolean = false,
	) {
		super();
		this.#monaco = monaco;
		this.#monacoLib = monacoLib;
		this.#container = container;
		this.#isOpen = open;

		// onOpen and onClose logic
		this._register(this.#monaco.onDidChangeModel((e) => {
			console.debug({ msg: 'monaco.onDidChangeModel', ...e })
			if (e.newModelUrl && e.newModelUrl.path !== e.oldModelUrl?.path) {
				this.#isOpen = true;
				this._onOpen.fire({ uri: e.newModelUrl.path });
			}
			else if (!e.newModelUrl && e.oldModelUrl) {
				this.#isOpen = false;
				this._onClose.fire({ uri: e.oldModelUrl?.path });
			}
		}));
	}

	async open(path: string, cwd?: string) {
		path = this.#container.fs.resolve(path, cwd);
		const uri = this.#monacoLib.Uri.file(path);
		const existing = this.#monacoLib.editor.getModel(uri);
		if (existing) {
			return this.#monaco.setModel(existing);
		}
		// Check if the file exists in the container's file system
		try {
			const file = await this.#container.fs.readFile(path, 'utf8');
			const model = this.#monacoLib.editor.createModel(
				file,
				undefined,
				uri,
			);
			return this.#monaco.setModel(model);
		}
		catch (error) {
			// @ts-ignore
			if (error.toString().indexOf('ENOENT') > -1) {
				// File does not exist, create a new model
				const model = this.#monacoLib.editor.createModel('', undefined, uri);
				return this.#monaco.setModel(model);
			}
			throw error;
		}
	}

	async close() {
		this.#monaco.setModel(null);
	}

	async save() {
		const model = this.#monaco.getModel();
		if (model) {
			const value = this.#monaco.getValue();
			await this.#container.fs.writeFile(model.uri.path, new TextEncoder().encode(value));
			this._onSave.fire({ uri: model.uri.path });
		}
	}

	addDefaultCommands() {
		this.#monaco.addCommand(this.#monacoLib.KeyMod.CtrlCmd | this.#monacoLib.KeyCode.KeyS, async () => await this.save());
		this.#monaco.addCommand(this.#monacoLib.KeyMod.CtrlCmd | this.#monacoLib.KeyCode.KeyQ, async () => await this.close());
	}

	get isOpen(): boolean {
		return this.#isOpen;
	}

	focus(options: FocusOptions = { preventScroll: true }) {
		this.#monaco.getDomNode()?.querySelector<HTMLTextAreaElement>('.inputarea.monaco-mouse-cursor-text')?.focus(options);
	}
}
`}},"ipc.ts":{file:{contents:`import { RelayRequest } from './types.js';

export const END_OF_MESSAGE = '\\0';
export const READY = \`READY\`;

export const serializeRequest = async (request: RelayRequest): Promise<string> => {
	return JSON.stringify({ ...request, type: 'request' });
};

export const deserializeRequest = async (data: string | Record<string, any>): Promise<Request> => {
	const parsed = typeof data === 'string' ? JSON.parse(data) : data;

	let { url } = parsed;
	const { path, method, headers, body } = parsed;

	if (path) {
		url = new URL(path, url);
	}

	return new Request(url, {
		method,
		headers,
		body: body ? JSON.stringify(body) : undefined,
	});
};

export const serializeResponse = async (response: Response): Promise<string> => {
	const body = await response.text();

	const headers: Record<string, string> = {};
	for (const [key, value] of response.headers.entries()) {
		headers[key] = value;
	}

	return JSON.stringify({
		type: 'response',
		url: response.url,
		status: response.status,
		statusText: response.statusText,
		headers,
		body,
	});
};

export const deserializeResponse = async (data: string | any): Promise<Response> => {
	try {
		const parsed = typeof data === 'string' ? JSON.parse(data) : data;
		const { status, statusText, headers, body } = parsed;
		return new Response(body, {
			status,
			statusText,
			headers,
		});
	}
	catch (error) {
		console.error('Error deserializing response:', error);
		return new Response(JSON.stringify({ error }), { status: 500 });
	}
};

export const readJSONChunks = async function* (reader: ReadableStreamDefaultReader<Uint8Array<ArrayBufferLike>>, debug?: boolean, id?: string): AsyncGenerator<Record<string, any>> {
	const decoder = new TextDecoder('utf8');

	let buffer = '';

	try {
		while (true) {
			const { done, value } = await reader.read();
			if (done) break;

			debug && console.debug(JSON.stringify({ type: 'debug', value, id }));

			// Decode the chunk and append it to the buffer
			buffer += typeof value === 'string' ? value : (decoder.decode(value, { stream: true }) + '\\r\\n');

			debug && console.debug(JSON.stringify({ type: 'debug', buffer, id }));

			// Split the buffer into lines
			const parts = buffer.split('\\r\\n');

			// Keep the last part in the buffer (incomplete JSON string)
			buffer = parts.pop()!;

			debug && console.debug(JSON.stringify({ type: 'debug', parts_length: parts.length, id }));

			// Yield all complete JSON strings
			for (const part of parts) {
				debug && console.debug(JSON.stringify({ type: 'debug', part, id }));

				if (part.trim()) {
					yield JSON.parse(part);
				}
			}
		}
		// Handle any remaining data in the buffer
		if (buffer.trim()) {
			yield JSON.parse(buffer);
		}
	}
	catch (err) {
		debug && console.debug(JSON.stringify({ err }));
	}
};
`}},"CHANGELOG.md":{file:{contents:`# @jsnix/utils

## 0.0.60

### Patch Changes

- Updating Pastel dep

## 0.0.59

### Patch Changes

- Fixes

## 0.0.58

### Patch Changes

- Fix @jsnix/xterm dep

## 0.0.57

### Patch Changes

- Remove some logs

## 0.0.56

### Patch Changes

- Adding waitForScroll

## 0.0.55

### Patch Changes

- Publishing

## 0.0.54

### Patch Changes

- Bump

## 0.0.53

### Patch Changes

- Don't remember

## 0.0.52

### Patch Changes

- Updates

## 0.0.51

### Patch Changes

- Bumping

## 0.0.50

### Patch Changes

- Bump

## 0.0.49

### Patch Changes

- Exit early, try writing newline after command.

## 0.0.48

### Patch Changes

- Bug fixes

## 0.0.47

### Patch Changes

- Forting nites

## 0.0.46

### Patch Changes

- Up

## 0.0.45

### Patch Changes

- Rebuild

## 0.0.44

### Patch Changes

- Removing source maps

## 0.0.43

### Patch Changes

- Rendering changes and CLI update

## 0.0.42

### Patch Changes

- Fix loadJsnixEports

## 0.0.41

### Patch Changes

- Fixing

## 0.0.40

### Patch Changes

- Changes

## 0.0.39

### Patch Changes

- Removing deps

## 0.0.38

### Patch Changes

- Fixing HTML command rendering

## 0.0.37

### Patch Changes

- Fix 'html' command and add 'Scroller' component to CLI

## 0.0.36

### Patch Changes

- Debug build

## 0.0.35

### Patch Changes

- Debug build

## 0.0.34

### Patch Changes

- Trying to fix size

## 0.0.33

### Patch Changes

- Fixes and such

## 0.0.32

### Patch Changes

- Bump

## 0.0.31

### Patch Changes

- Bump

## 0.0.30

### Patch Changes

- Bump

## 0.0.29

### Patch Changes

- Bump

## 0.0.28

### Patch Changes

- Bump

## 0.0.27

### Patch Changes

- Fixing html command

## 0.0.26

### Patch Changes

- Woopsie

## 0.0.25

### Patch Changes

- Fixing container path resolution

## 0.0.24

### Patch Changes

- Bumping

## 0.0.23

### Patch Changes

- Bumping all for changes

## 0.0.22

### Patch Changes

- New build

## 0.0.21

### Patch Changes

- Updating utils, scripts, react, and cli.

## 0.0.20

### Patch Changes

- Bumping patch

## 0.0.19

### Patch Changes

- 8899e2e: Releasing version for integration testing
`}},"osc.ts":{file:{contents:`import { writeUntilRead } from '@jsnix/utils/sync';
import { JsnixExports, OscData, OscHandler, OscHandlerProps } from '@jsnix/utils/types';

export type WrapperProps = Omit<OscHandlerProps, 'data'> & {
	data: string;
};
export type WrappedOscHandler = (props: WrapperProps) => Promise<boolean>;
export type WrappedOscData = Omit<OscData, 'handler'> & {
	handler: WrappedOscHandler;
};
export type WrappedJsnixExports = Omit<JsnixExports, 'osc'> & {
	name?: string;
	osc?: WrappedOscData;
};

export const wrapOscHandler = (handler: OscHandler) => {
	return async ({ data, container, terminal, ...rest }: WrapperProps): Promise<boolean> => {
		const [type, uid, encoded] = data.split(';');

		if (type !== 'data' || !uid || !encoded) {
			return false;
		}
		const json = JSON.parse(new TextDecoder()
			.decode(Uint8Array.from(atob(encoded), (c) => c.charCodeAt(0))));
		const result = await handler({ data: json, container, terminal, ...rest });
		if (!container) {
			typeof result === 'string' && console.warn('WebContainer unavailable, will be unable to use OSC handler output.', result);
			return true;
		}
		const tempfile = \`/tmp/\${uid}\`;
		const content = (typeof result === 'string') ? result : '';
		await writeUntilRead(container, tempfile, content);
		return (typeof result === 'string') ? true : result;
	};
};

export const loadJsnixExports = async (modules: Record<string, () => Promise<unknown>>) => {
	return await Promise.all(
		Object.values(modules).map(async (command) => {
			try {
				const split = command?.name?.split('/');
				let name: string | undefined = undefined;

				if (split) {
					if (split.length == 1) {
						name = split[0];
					}
					else if (split.length > 2) {
						name = split[split.length - 3];
					}
				}
				const { osc, bin, onServerReady, onPort }: any = await command();
				let result: WrappedJsnixExports = {
					bin,
					name,
					onServerReady,
					onPort,
				};
				if (osc) {
					if (!osc.handler) {
						throw new Error('Exported \`osc\` missing a handler');
					}
					if (!osc.id) {
						throw new Error('Exported \`osc\` missing an id');
					}
					result = {
						...result,
						osc: {
							id: osc.id,
							handler: wrapOscHandler(osc.handler),
						},
					};
				}
				return result;
			}
			catch (error) {
				console.error('Error loading command:', error);
				return null;
			}
		}),
	);
};
`}},"collection.ts":{file:{contents:`export const chooseRandom = <T>(collection: T[]): T | undefined => {
	if (collection.length === 0) {
		return undefined;
	}
	const randomIndex = Math.floor(Math.random() * collection.length);
	return collection[randomIndex];
};
`}},"vite.ts":{file:{contents:`/**
 * A Vite plugin that generates a WebContainer-compatible filesystem snapshot of a local directory.
 * Creates a virtual module that exports the JSON representation of the filesystem tree.
 *
 * @module @jsnix/snapshot
 */

import { snapshotDefaults, SnapshotProps, takeSnapshot } from '@jsnix/utils/snapshot';

export type Vite = unknown;
export const viteDefaults: Required<SnapshotProps<Vite>> = {
	...snapshotDefaults,
};

const createVirtualModule = async (_: string, tree: any): Promise<string> => {
	const snapshot = JSON.stringify(tree, null, 2);
	return \`export default \${snapshot}\`;
};

/**
 * @param {SnapshotProps<Vite>} props - Snapshot configuration options.
 *
 * @returns A Vite plugin that creates the snapshot virtual module.
 *
 * @example
 * // vite.config.ts
 * import { snapshot } from '@jsnix/snapshot'
 *
 * export default {
 *   plugins: [
 *     snapshot()
 *   ]
 * }
 */
export const snapshot = async (props: SnapshotProps<Vite> = {}) => {
	const { root, include, exclude, gitignore, transform } = { ...viteDefaults, ...props };
	const virtualModuleId = 'virtual:@jsnix/snapshot';
	const resolvedVirtualModuleId = '\\0' + virtualModuleId;

	return {
		name: '@jsnix/snapshot',
		async resolveId(id: string) {
			if (id === virtualModuleId) {
				return resolvedVirtualModuleId;
			}
			return undefined;
		},
		async load(id: string) {
			if (id === resolvedVirtualModuleId) {
				const tree = await transform(await takeSnapshot({ root, include, exclude, gitignore }));
				return createVirtualModule(id, tree);
			}
			return undefined;
		},
	};
};
`}},"opfs.ts":{file:{contents:`import { DirectoryNode, FileNode, FileSystemTree } from "@webcontainer/api";
import { LRUCache } from "lru-cache";
import { traverse } from "./filesystemtree";

export type FileOrFolder = FileSystemDirectoryHandle | FileSystemFileHandle;
export type OPFSItem<T extends FileOrFolder = FileOrFolder> = {
    path: string;
    handle: T;
};

export class OriginPrivateFileSystem {
    /**
     * Root directory handle.
     */
    #root: OPFSItem<FileSystemDirectoryHandle> | null = null;

    /**
     * Map of handles to absolute directories, to avoid re-fetching them.
     */
    #directoryHandles: LRUCache<string, OPFSItem<FileSystemDirectoryHandle>> = new LRUCache({ max: 1024 * 512 });

    async init() {
        this.#root = {
            path: '/',
            handle: await navigator.storage.getDirectory(),
        };
    }

    get root(): OPFSItem<FileSystemDirectoryHandle> {
        if (!this.#root) throw new Error('OriginPrivateFileSystem not initialized');
        return this.#root;
    }

    // Helper function to recursively build the tree
    async #buildTree(handle: FileSystemDirectoryHandle, currentTree: FileSystemTree) {
        for await (const [name, entry] of handle.entries()) {
            if (entry.kind === 'directory') {
                const directoryNode: DirectoryNode = { directory: {} };
                currentTree[name] = directoryNode;
                await this.#buildTree(entry as FileSystemDirectoryHandle, directoryNode.directory);
            } else if (entry.kind === 'file') {
                const file = await (entry as FileSystemFileHandle).getFile();
                const contents = await file.text();
                const fileNode: FileNode = { file: { contents } };
                currentTree[name] = fileNode;
            }
        }
    }

    async writeTree(tree: FileSystemTree) {
        for await (const { node, path } of traverse(tree)) {
            if ('file' in node && 'contents' in node.file) {
                const content = node.file.contents as string;
                await this.write(path, content)
            } else if ('directory' in node) {
                await this.mkdir(path);
            }
        }
    }

    async toFileSystemTree(): Promise<FileSystemTree> {
        const tree: FileSystemTree = {};

        await this.#buildTree(this.root.handle, tree);
        return tree;
    }

    async *traverse(filter: (name: string, path: string, entry: FileOrFolder) => boolean = () => true): AsyncGenerator<OPFSItem> {
        let stack: OPFSItem[] = [this.root];

        while (stack.length > 0) {
            const { path, handle } = stack.pop()!;

            // @ts-ignore
            for await (const [entryName, entryHandle] of handle.entries()) {
                const entryPath = path + '/' + entryName;
                const node = { name: entryName, path: entryPath, handle: entryHandle };

                if (filter && !filter(entryName, entryPath, entryHandle)) continue;

                if (entryHandle.kind === 'directory') {
                    stack.push(node);
                    this.#directoryHandles.set(entryPath, node);
                }
                yield node;
            }
        }
    }

    /**
     * Remove a file or directory from the file system.
     * @param path Path to file to remove
     */
    async rm(path: string): Promise<void> {
        const segments = path.split('/').filter(Boolean); // Remove empty segments
        if (segments.length === 0) throw new Error('Cannot remove the root directory');

        // Traverse to the parent directory of the target
        const parentPath = segments.slice(0, -1).join('/') || '/';
        const parentDir = await this.#getDirectory(parentPath);

        if (!parentDir) throw new Error(\`Parent directory not found: \${parentPath}\`);

        const targetName = segments[segments.length - 1]!;

        // Check if the target is a directory or file
        try {
            await parentDir.handle.removeEntry(targetName, { recursive: true });
            // Remove the target from the cache if it exists
            this.#directoryHandles.delete(path);
        } catch (error) {
            throw new Error(\`Failed to remove file or directory at path: \${path}\`);
        }
    }

    async write(path: string, content: string): Promise<void> {
        // Get or create the file handle
        const fileItem = await this.#getPathFileHandle(path);
        if (!fileItem) throw new Error(\`Failed to open or create file at path: \${path}\`);

        // Write the content to the file
        const writable = await fileItem.handle.createWritable();
        await writable.write(content);
        await writable.close();
    }

    async mkdir(path: string): Promise<void> {
        await this.#getDirectory(path);
    }

    /**
     * Helper function to get a directory handle by path.
     * @param path Path to the directory
     */
    async #getDirectory(path: string): Promise<OPFSItem<FileSystemDirectoryHandle>> {
        if (path === '/') return this.root;

        const segments = path.split('/').filter(Boolean);
        let currentDir = this.root;

        for (const dirName of segments) {
            const dirPath = currentDir.path + (currentDir.path === '/' ? '' : '/') + dirName;

            if (this.#directoryHandles.has(dirPath)) {
                currentDir = this.#directoryHandles.get(dirPath)!;
            } else {
                const newDirHandle = await currentDir.handle.getDirectoryHandle(dirName, { create: true });
                const newDirItem: OPFSItem<FileSystemDirectoryHandle> = {
                    path: dirPath,
                    handle: newDirHandle,
                };
                this.#directoryHandles.set(dirPath, newDirItem);
                currentDir = newDirItem;
            }
        }
        return currentDir;
    }

    async #getPathFileHandle(path: string): Promise<OPFSItem<FileSystemFileHandle> | null> {
        const segments = path.split('/').filter(Boolean); // Remove empty segments
        const parentPath = segments.slice(0, -1).join('/') || '/';
        let parentDir = await this.#getDirectory(parentPath);

        // Get or create the file handle
        const fileName = segments[segments.length - 1]!;
        const filePath = parentPath + (parentPath === '/' ? '' : '/') + fileName;
        const fileHandle = await parentDir.handle.getFileHandle(fileName, { create: true });
        return {
            path: filePath,
            handle: fileHandle,
        };
    }
}`}}}},testing:{directory:{"vite.config.js":{file:{contents:`import { defineConfig } from 'vite';
import path from 'path';

export default defineConfig({
    root: '.', // Set the e2e folder as the root
    server: {
        port: 3001,
        fs: {
            // Allow access to the root of the monorepo
            allow: ['../../'],
        },
    },
    resolve: {
        alias: {
            // Resolve \`node_modules\` correctly
            '@jsnix/xterm': path.resolve(__dirname, '../../node_modules/@jsnix/xterm'),
        },
    },
});
`}},"typings.d.ts":{file:{contents:"declare module '@jsnix/xterm/css/xterm.css';"}},"tsconfig.json":{file:{contents:`{
    "extends": "../../tsconfig.base.json",
    "compilerOptions": {
        "outDir": "dist",
        "sourceMap": true,
        "declaration": true,
        "declarationMap": true,
        "moduleResolution": "node",
        "allowSyntheticDefaultImports": true,
        "esModuleInterop": true,
        "types": [
            "node"
        ]
    },
    "include": [
        "**/*.ts",
        "typings.d.ts"
    ],
    "exclude": [
        "dist",
        "node_modules"
    ]
}`}},"index.html":{file:{contents:`<html lang="en">
  <head>
  </head>
  <body style="width: 100vw; height: 100vh; margin: 0; padding: 0; overflow: hidden;">
    <div id="root" style="height: 100%; width: 100%"></div>
    <script type="module" src="./index.ts"><\/script>
  </body>
</html>`}},"package.json":{file:{contents:`{
  "name": "@jsnix/testing",
  "version": "0.0.0",
  "description": "scratch area for testing and debugging",
  "main": "index.js",
  "private": true,
  "scripts": {
    "dev": "vite",
    "test": "echo \\"Error: no test specified\\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@jsnix/addon-fit": "*",
    "@jsnix/utils": "file:../utils",
    "@jsnix/xterm": "*"
  },
  "devDependencies": {
    "vite": "^6.0.7"
  }
}
`}},"index.ts":{file:{contents:`import { JsnixTerminal } from "@jsnix/utils/terminal";
import { FitAddon } from '@jsnix/addon-fit';
import '@jsnix/xterm/css/xterm.css';

let term = new JsnixTerminal({
    allowProposedApi: true,
    reflowCursorLine: false,
});
term.debug = true
const fit = new FitAddon()
term.open(document.getElementById('root')!);
term.loadAddon(fit)
fit.fit()
for (let i = 0; i < 30; i++) {
    term.writeln(\`line \${i}\`)
}

window.requestAnimationFrame(async () => {
    await term.writeln(\`last line\`)

    const test = document.createElement('div')
    test.style.height = '500px'
    test.style.backgroundColor = 'red'
    const marker = term.registerMarker(-1)
    term.attachElementToMarker(test, marker)

    await new Promise((resolve) => {
        window.requestAnimationFrame(resolve)
    })

    await term.writeln(\`after element line\`)
    await term.writeln(\`next marker\`)

    const next = document.createElement('div')
    next.style.height = '500px'
    next.style.backgroundColor = 'red'
    const nextMarker = term.registerMarker(-1)
    term.attachElementToMarker(next, nextMarker)
    await new Promise((resolve) => {
        window.requestAnimationFrame(resolve)
    })

    console.log(term.getActiveBuffer())
    const onResize = async () => {
        term.debug = true
        try {
            console.debug('fitaddon resizing terminal', term.cols, term.rows)
            console.debug('terminal resized', term.cols, term.rows)
            window.requestAnimationFrame(() => {
                fit.fit()
            })
        } catch (e) {
            console.error(e);
        }
        term.debug = false
    };

    const resizeObserver = new ResizeObserver((entries) => {
        for (const entry of entries) {
            if (entry.target === term.element) {
                onResize();
            }
        }
    });
    resizeObserver.observe(term.element!);
})

`}}}},react:{directory:{lib:{directory:{components:{directory:{"Jsnix.tsx":{file:{contents:`import type { IDisposable, ITerminalInitOnlyOptions, ITerminalOptions } from '@jsnix/xterm';
import { useEffect, useRef, useState } from 'react';
import { SpawnOptions, Unsubscribe, WebContainer, WebContainerProcess } from '@webcontainer/api';
import chalk from 'chalk';
chalk.level = 3;
import useTerminal from '../hooks/useTerminal.js';
import { JsnixTerminal } from '@jsnix/utils/terminal';
import useEditor from '../hooks/useEditor.js';
import useWebContainer from '../hooks/useWebContainer';
import { WrappedJsnixExports, WrappedOscData } from '@jsnix/utils/osc';
import { dots, Spinner } from '@jsnix/utils/spinner';
import { link } from '@jsnix/utils/escapes';
import { serializeRequest, deserializeResponse } from '@jsnix/utils/ipc';
import { RelayRequestInit } from '@jsnix/utils/types';
import { readJSONChunks } from '@jsnix/utils/ipc';
import { Mutex } from 'async-mutex';
import type * as monaco from 'monaco-editor';

// import 'dockview-core/dist/styles/dockview.css';
import '@jsnix/xterm/css/xterm.css';
import './Jsnix.css';
import { FsOrFsFunction } from '@jsnix/utils/container';
import { promiseWithTimeout } from '@jsnix/utils/promises';

export type JsnixOptions = {
	/**
	 * The entrypoint command to use when booting the webcontainer
	 */
	entrypoint?: string[];
	/**
	 * Additional environment variables to set in the webcontainer
	 */
	env?: Record<string, string>;
	/**
	 * The prompt to display in the terminal before loading any necessary resources
	 */
	prompt?: string | string[] | false;
	/**
	 * The welcome message to display at the top of the terminal when it boots
	 */
	banner?: string;
	/**
	 * An array of commands to bootstrap the webcontainer with
	 */
	bootstrap?: BootstrapCommand[];
	/**
	 * An array of additional information (\`JsnixExports\`) for automatically registering OSC handlers and binary aliases
	 */
	jsnixExports?: WrappedJsnixExports[];
	/**
	 * The mount point to use when attaching the received filesystem
	 */
	mountPoint?: string;
	/**
	 * The name of the workdir to use when booting the webcontainer
	 */
	workdirName?: string;
	/**
	 * Path (relative to the specified filesystem) where global NPM binaries should be installed
	 *
	 * default: \`{mountPoint}/bin\`
	 */
	globalInstallDir?: string;
	/**
	 * Options to forward to the attached Xterm.js terminal
	 */
	terminalOptions?: (ITerminalOptions & ITerminalInitOnlyOptions);
	/**
	 * Options to forward to the attached monaco-editor editor
	 */
	editorOptions?: monaco.editor.IStandaloneEditorConstructionOptions;
	/**
	 * Called when the component is ready
	 *
	 * @param container the ready webcontainer
	 * @param terminal the connected xterm.js terminal
	 * @returns
	 */
	onSetup?: (container: WebContainer, terminal: JsnixTerminal) => void;
	/**
	 * Called when the component resources are being cleaned up
	 */
	onTeardown?: () => void;
	/**
	 * Called whenever a process in the WebContainer opens a port
	 */
	onPort?: (port: number) => Promise<void> | void;
};

export type JsnixProps = {
	fs: FsOrFsFunction;
	options?: JsnixOptions;
};

export type DevServer = {
	port: number;
	url: string;
};

export type BoostrapOptions = SpawnOptions & {
	detached?: boolean;
};

export type BootstrapCommand = {
	cmd: string[];
	options?: BoostrapOptions;
};

// TODO: animation on "start" here
const prompt = \`press any key to \${chalk.greenBright('start')}\`;
const banner = \`\${chalk.magenta(link('jsnix', 'https://github.com/tbrockman/jsnix'))} \${chalk.dim(\`(v\${APP_VERSION})\`)}\`;
const necessaryEnv = {
	// important, as OSC 8 hyperlink support detection in ink-link doesn't work for webcontainers
	// see: https://github.com/jamestalmage/supports-hyperlinks/blob/master/index.js#L32
	FORCE_HYPERLINK: 1,
	WEBCONTAINER: true,
	USER_AGENT: navigator?.userAgent.toLowerCase(),
};
const defaultOptions: JsnixOptions = {
	entrypoint: ['jsh'],
	prompt,
	banner,
	jsnixExports: [],
	mountPoint: '/',
	globalInstallDir: '/bin',
	workdirName: 'workspace',
	env: {},
	terminalOptions: { logLevel: 'warn' },
	onSetup: () => { },
	onPort: async () => { },
	onTeardown: () => { },
};
const note = \`
\${chalk.yellow('note:')}
\${chalk.white('a bug in one of my dependencies (which can be fixed by reloading the page) may cause random freezes. sorry ‚òπÔ∏è')}
\`;

let relayProcess: WebContainerProcess | null = null;
let sharedWriter: WritableStreamDefaultWriter;
let sharedReader: ReadableStreamDefaultReader;
const mutex = new Mutex();

// TODO: probably replace most initialization with fs mounts?
export default function Jsnix({ fs, options }: JsnixProps) {
	const { entrypoint, prompt, banner, bootstrap, jsnixExports, globalInstallDir, mountPoint, workdirName, env, terminalOptions, editorOptions, onSetup, onTeardown } = { ...defaultOptions, ...options };
	const { init: initContainer, container } = useWebContainer({ fs, mountPoint, bootOptions: { workdirName }, onTeardown });
	const termRef = useRef(null);
	const editorRef = useRef(null);
	const jsnixRef = useRef<HTMLDivElement>(null);
	const [devServer, setDevServer] = useState<DevServer | null>(null);
	const [currentProcess, setCurrentProcess] = useState<WebContainerProcess | null>(null);
	const { editor, init: initEditor } = useEditor({ ref: editorRef, parentRef: jsnixRef, container: container, options: editorOptions });
	const { terminal } = useTerminal({ process: currentProcess, ref: termRef, container: container, editor, options: terminalOptions });
	const [termReady, setTermReady] = useState(false);

	const getRelay = async (): Promise<WebContainerProcess | null> => {
		try {
			if (relayProcess) {
				return relayProcess;
			}

			if (!container) {
				console.warn('Can\\'t start relay, container is null');
				return null;
			}

			const process = await container.spawn('npm', ['install', '@jsnix/relay'], {
				cwd: globalInstallDir,
			});
			await process?.exit;

			const proc = await container.spawn('node', ['node_modules/@jsnix/relay/dist/relay/main.js'], {
				cwd: globalInstallDir,
				output: true,
			});
			sharedWriter = proc.input?.getWriter();
			sharedReader = proc.output?.getReader();
			// TODO: technically should check that this is a ready message
			const { value, done } = await sharedReader.read();
			console.debug({ msg: 'received relay start message', value, done });
			relayProcess = proc;
		}
		catch (err) {
			console.error('relay error', err);
		}
		return relayProcess;
	};

	const relayFetch = (url: string) => {
		return async (req: RelayRequestInit) => {
			const release = await mutex.acquire();
			const response: Response | null = null;

			try {
				const relay = await getRelay();

				if (!relay) {
					throw new Error('Container relay unavailable, can\\'t fetch');
				}

				req.headers = {
					...req.headers,
					'Relay-Request-Id': window.crypto.randomUUID(),
					'Relay-Request-Origin': 'client',
				} as Record<string, string>;
				const serialized = await serializeRequest({ ...req, url });
				await sharedWriter.ready;
				await sharedWriter.write(serialized + '\\r');

				for await (const json of readJSONChunks(sharedReader, !import.meta.env.PROD, 'client')) {
					const { type, ...remainder } = json;

					if (type === 'response') {
						console.debug({ msg: 'response received', type, data: remainder });
						return await deserializeResponse(remainder);
					}
					else {
						console.debug({ msg: 'unhandled message received', type, data: remainder });
					}
				}
			}
			catch (error) {
				console.error(error);
			}
			finally {
				release();
			}
			return response || null;
		};
	};

	const createBinAlias = async (bin: string, alias: string) => {
		if (!container) {
			console.warn('webcontainer is unavailable, can\\'t create binary aliases');
			return;
		}
		const proc = await container.spawn('jsh', ['--exec', \`echo "alias \${alias}='\${bin}'" >> ~/.jshrc\`], { cwd: '/' });
		await proc.exit;
	};

	useEffect(() => {
		const unsubs: Unsubscribe[] = [];

		if (container) {
			const ready = container?.on('server-ready', async (port: number, url: string) => {
				console.debug({ msg: 'server-ready', port, url });

				if (port === 5173) {
					setDevServer({ port, url });
				}

				jsnixExports?.forEach(async (e) => {
					if (e.onServerReady) {
						try {
							await e.onServerReady({ container, port, url, fetch: relayFetch(url), editor, terminal, initEditor });
						}
						catch (error) {
							console.error(error);
						}
					}
				});
			});

			const port = container?.on('port', async (port: number, type: 'open' | 'close', url: string) => {
				console.debug({ msg: 'port', type, port, url });

				if (port === 5173 && type === 'close') {
					setDevServer(null);
				}

				jsnixExports?.forEach(async (e) => {
					if (e.onPort) {
						try {
							await e.onPort({ port, url, type, container, fetch: relayFetch(url), editor, terminal, initEditor });
						}
						catch (error) {
							console.error(error);
						}
					}
				});
			});

			unsubs.push(ready, port);
		}
		return () => {
			unsubs.forEach((unsub) => unsub());
		};
	}, [jsnixExports, container, editor, terminal]);

	// Handler for initial prompt to start the webcontainer
	useEffect(() => {
		let listener: IDisposable | undefined;

		if (termReady && terminal && !container) {
			if (prompt) {
				if (typeof prompt === 'string') {
					terminal.writeln(prompt);
				}
				else {
					prompt.forEach((p) => terminal.writeln(p));
				}
				listener = terminal.onKey(async () => {
					if (!container) {
						listener?.dispose();
						listener = undefined;
						await setupContainer(terminal);
					}
				});
			}
			else {
				setupContainer(terminal);
			}
		}
		return () => {
			listener && listener.dispose();
		};
	}, [termReady, terminal, container]);

	const createCommandAliases = async () => {
		console.debug({ msg: 'creating command aliases', jsnixExports });

		const promises = jsnixExports?.filter((e) => e.name && e.bin).map(async (exported) => {
			await Promise.all(
				exported.bin?.map(
					async (bin) => await createBinAlias(\`jsnix \${exported.name}\`, bin),
				) || [],
			);
		}) || [];
		await Promise.all(promises);
		console.debug({ msg: 'created command aliases', promises });
	};

	useEffect(() => {
		if (container) {
			createCommandAliases();
		}
	}, [container, jsnixExports]);

	useEffect(() => {
		const disposables: IDisposable[] = [];

		if (terminal) {
			jsnixExports?.filter((e) => !!e.osc)?.map((e) => e.osc as WrappedOscData).forEach(({ id, handler }) => {
				if (!id || !handler) return;
				console.debug({ msg: 'registering osc handler', id, handler });
				const d = terminal.parser.registerOscHandler(id, async (data) => handler({ data, container, process: currentProcess, terminal, document, editor, initEditor }));
				disposables.push(d);
			});
			setTermReady(true);
		}

		return () => {
			disposables.forEach((d) => d.dispose());
		};
	}, [jsnixExports, container, currentProcess, terminal, document, editor]);

	const setupContainer = async (terminal: JsnixTerminal) => {
		note && terminal.writeln(note);
		const stream = terminal.getWritableStream();

		const spinner = new Spinner({
			text: 'preparing webcontainer',
			stream,
			...dots,
		});
		spinner.start();

		await promiseWithTimeout<void>(async (resolve, reject) => {
			try {
				const container = await initContainer(spinner);

				if (bootstrap) {
					const child = spinner.addChild({
						text: 'bootstrapping webcontainer',
						...dots,
					});
					child.start();

					for (const { cmd, options } of bootstrap) {
						if (cmd && cmd.length > 0) {
							const [command, ...args] = cmd;
							const { detached, ...spawnOptions } = options || {};
							const process = await container.spawn(command!, args, spawnOptions);
							// if output isn't suppressed, pipe it to terminal
							// TODO: make this compatible with the spinners
							const dispose = !spawnOptions?.output ? null : await pipeToTerminal(process, terminal);
							!detached && await process.exit;
							await dispose?.();
						}
					}
					await child.stop(\`\${chalk.green('‚úî')} bootstrap complete\`);
				}
				await spinner.stop(\`\${chalk.green('‚úî')} webcontainer started\`);
				await stream.close();

				terminal.write('\\x1bc'); // terminal clear sequence
				banner && terminal.writeln(banner);

				if (entrypoint) {
					const entryProcess = await start(entrypoint, container, terminal);
					const dispose = await pipeToTerminal(entryProcess, terminal);
					entryProcess && setCurrentProcess(entryProcess);
					entryProcess?.exit.then(async () => await dispose?.());
				}
				onSetup && onSetup(container, terminal);
				resolve();
			} catch (err) {
				reject(err)
			}
		}, 5 * 60 * 1000).catch(async (err) => {
			// TODO: better exception/timeout handling
			if (spinner.isRunning) {
				await spinner.stop(\`\${chalk.red('‚úñ')} webcontainer start failed\`);
			}
			terminal.writeln(err.toString())
		})
	};

	const start = async (entrypoint: string[], container: WebContainer, term: JsnixTerminal) => {
		const [cmd, ...args] = entrypoint;

		const entryProcess = await container.spawn(cmd!, args, {
			terminal: {
				cols: term.cols,
				rows: term.rows,
			},
			env: {
				...necessaryEnv,
				...env,
			},
		});

		entryProcess.exit.then(async (exitCode) => {
			console.debug({ msg: 'entry process exited', cmd, args, exitCode, entryProcess });

			if (entrypoint.pop() !== 'jsh') {
				// write the previous command to the histfile
				await container.spawn('jsh', ['-c', \`echo "\${cmd}\${args.length > 0 ? ' ' + args.join(' ') : ''}" >> /home/.jsh_history\`])
				// spawn the \`jsh\` shell as the next process by default
				const proc = await container.spawn('jsh', [], {
					terminal: {
						cols: term.cols,
						rows: term.rows,
					},
					env: {
						...necessaryEnv,
						...env,
					},
				});
				pipeToTerminal(proc, term);
				setCurrentProcess(proc);
			}
		});
		return entryProcess;
	};

	const pipeToTerminal = async (process: WebContainerProcess, terminal: JsnixTerminal) => {
		process?.output.pipeTo(
			new WritableStream({
				write: (chunk) => {
					terminal.write(chunk);
				},
			}),
		);
		const input = process?.input.getWriter();
		await input.ready;
		terminal.process = { input };

		const disposable = terminal.onData((data: any) => {
			input?.write(data);
		});
		return async () => {
			disposable.dispose();
			await input.close();
		};
	};

	const touchStartY = useRef(0);
	const touchEndY = useRef(0);
	const touchStartTime = useRef(0);

	useEffect(() => {
		const container = jsnixRef.current;

		if (!container) return;

		const handleTouchStart = (e: TouchEvent) => {
			touchStartY.current = e.touches[0].clientY;
			touchStartTime.current = e.timeStamp;
		};

		const handleTouchEnd = (e: TouchEvent) => {
			touchEndY.current = e.changedTouches[0].clientY;
			const touchEndTime = e.timeStamp;

			const deltaY = touchEndY.current - touchStartY.current;
			const deltaTime = touchEndTime - touchStartTime.current;

			const velocity = Math.abs(deltaY / deltaTime);

			const thresholdVelocity = 0.5; // Adjust threshold as needed
			const thresholdDistance = 50; // Minimum distance for a valid swipe

			// Get the target child element
			const target = e.target as HTMLElement;

			// If the target is scrollable and the user is not at its boundaries
			const isScrollable = target.scrollHeight > target.clientHeight;
			const isAtTop = target.scrollTop === 0;
			const isAtBottom
				= target.scrollTop + target.clientHeight >= target.scrollHeight;

			if (
				isScrollable
				&& !(
					(deltaY < 0 && isAtTop) // Scrolling up at the top
					|| (deltaY > 0 && isAtBottom) // Scrolling down at the bottom
				)
			) {
				// Allow inner scrolling
				return;
			}

			// Handle high-velocity swipes for parent container
			if (velocity > thresholdVelocity && Math.abs(deltaY) > thresholdDistance) {
				const isSwipeUp = deltaY < 0;

				const scrollStep = container.offsetHeight;
				container.scrollBy({
					top: isSwipeUp ? scrollStep : -scrollStep,
					behavior: 'smooth',
				});
			}
		};

		container.addEventListener('touchstart', handleTouchStart);
		container.addEventListener('touchend', handleTouchEnd);

		return () => {
			container.removeEventListener('touchstart', handleTouchStart);
			container.removeEventListener('touchend', handleTouchEnd);
		};
	}, []);

	// TODO: refactor to allow multiple terminals/editors/etc. ("processes")
	return (
		<div ref={jsnixRef} className="jsnix-container">
			<div className={\`jsnix-editor-container jsnix-window\`}>
				<div ref={editorRef} className="jsnix-editor" />
			</div>
			<div ref={termRef} className={\`jsnix-terminal-container jsnix-window\`}></div>
			{devServer && <iframe className={\`jsnix-terminal-preview jsnix-window loaded\`} src={devServer.url}></iframe>}
		</div>
	);
}
`}},"Jsnix.css":{file:{contents:`.jsnix-container {
    display: flex;
    flex-wrap: wrap;

    width: 100%;
    height: 100%;

    overflow-x: hidden;
    overflow-y: auto;
    scroll-snap-type: y mandatory;
    scroll-behavior: smooth;

    > .jsnix-window {
        display: flex;
        flex: 1;
        scroll-snap-align: start;
        scroll-snap-stop: always;

        min-width: min(64ch,100%);
        max-width: 80ch;
        height: 100%;

        &:not(:empty) {
            flex: 1;
        }

        &:empty {
            display: none;
        }
    }

    > .jsnix-editor-container:has(> .jsnix-editor:empty) {
        display: none;
    }

    > .jsnix-editor-container:not(:has(> .jsnix-editor > .monaco-editor)) {
        display: none;
    }

    > .jsnix-terminal-container {
        overflow: hidden;

        > .terminal {
            width: 100%;
            height: 100%;
            padding: 14px 0 0 14px;
            overflow: hidden;

            .xterm-viewport {
                overflow-y: auto;
            }
        }
    }

    .jsnix-editor {
        display: flex;
        width: 100%;
        height: 100%;

        .monaco-editor {
            height: 100%;
            width: 100%;
        }
    }

    iframe {
        border: none;
        flex: 1;
    }

    .scroll-decoration {
        box-shadow: none !important;
    }
}

@media (max-width: calc(64ch * 2)) {
    .jsnix-container {
        > .jsnix-window {
            max-width: 100%;
        }
    }
}`}}}},"index.ts":{file:{contents:`import Jsnix from './components/Jsnix';
import useEditor from './hooks/useEditor';
import useTerminal from './hooks/useTerminal';
import useWebContainer from './hooks/useWebContainer';

export { Jsnix, useEditor, useTerminal, useWebContainer };
export type { JsnixOptions, JsnixProps, BootstrapCommand } from './components/Jsnix';
export type { UseEditorProps } from './hooks/useEditor';
export type { UseTerminalProps } from './hooks/useTerminal';
export type { UseWebContainerProps } from './hooks/useWebContainer';
`}},hooks:{directory:{"useEditor.ts":{file:{contents:`import React, { useEffect, useState } from 'react';
import type { JsnixWebContainer } from '@jsnix/utils/container';
import { Editor } from '@jsnix/utils/editor';
import type * as monaco from 'monaco-editor';

export type UseEditorProps = {
	ref: React.RefObject<HTMLDivElement>;
	parentRef?: React.RefObject<HTMLDivElement>;
	container: JsnixWebContainer | null;
	options?: monaco.editor.IStandaloneEditorConstructionOptions;
}

export default function useEditor({ ref, parentRef, container, options }: UseEditorProps) {
	const [_monaco, setMonaco] = useState<monaco.editor.IStandaloneCodeEditor | null>(null);
	const [monacoLib, setMonacoLib] = useState<typeof monaco | null>(null);
	const [editor, setEditor] = useState<Editor | null>(null);

	useEffect(() => {
		const onResize = () => {
			if (_monaco) {
				_monaco.layout(undefined, true);
			}
		};

		window.addEventListener('resize', onResize);

		return () => {
			window.removeEventListener('resize', onResize);
			_monaco?.dispose();
		};
	}, [_monaco, ref.current]);

	useEffect(() => {
		const disposable = editor?.onOpen(async () => {

			if (!ref.current) {
				return;
			}
			ref.current.scrollIntoView({ behavior: 'smooth', block: 'start' });
			editor.focus();
		});

		return () => {
			disposable?.dispose();
		};
	}, [editor, parentRef, ref]);

	// TODO: maybe don't make this called explicitly, just do it lazily when necessary
	const init = async (): Promise<{ monaco: monaco.editor.IStandaloneCodeEditor; editor: Editor }> => {
		// dynamically import monaco to improve load time unless someone actually uses the editor
		const monacoLib: typeof monaco = await import('monaco-editor');
		monacoLib.languages.typescript.typescriptDefaults.setCompilerOptions({
			jsx: monacoLib.languages.typescript.JsxEmit.React,
		});
		monacoLib.editor.defineTheme('jsnix', {
			base: 'vs-dark',
			inherit: true,
			rules: [],
			colors: {
				'editor.background': '#1a1a1a',
			},
		});
		const monacoEditor = monacoLib.editor.create(ref.current!, {
			minimap: { enabled: false },
			automaticLayout: true,
			fixedOverflowWidgets: true,
			overflowWidgetsDomNode: document.body,
			scrollBeyondLastLine: false,
			theme: 'jsnix',
			wordWrap: 'on',
			fontSize: 15,
			...options,
		});

		const body = document.querySelector('body');

		if (body && !body.classList.contains('monaco-editor')) {
			body.classList.add('monaco-editor');
		}

		const editor = new Editor(monacoEditor, monacoLib, container!);
		editor.addDefaultCommands();

		setMonaco(monacoEditor);
		setMonacoLib(monacoLib);
		setEditor(editor);
		return { monaco: _monaco!, editor };
	};

	return { monacoLib, editor, init };
}
`}},"useWebContainer.ts":{file:{contents:`import { useEffect, useState } from 'react';
import { BootOptions } from '@webcontainer/api';
import { Fs, JsnixWebContainer, type FsOrFsFunction } from '@jsnix/utils/container';
import { dots, Spinner } from '@jsnix/utils/spinner';
import chalk from 'chalk';
chalk.level = 3;

export type UseWebContainerProps = {
	fs: FsOrFsFunction;
	stream?: WritableStream;
	autoInit?: boolean;
	mountPoint?: string;
	bootOptions?: BootOptions;
	onTeardown?: () => void;
};

let singleton: JsnixWebContainer | null = null;

export default function useWebContainer({
	fs,
	mountPoint = '/',
	bootOptions = { workdirName: 'workspace' },
	onTeardown,
}: UseWebContainerProps) {
	const [container, setContainer] = useState(singleton);

	const init = async (spinner?: Spinner): Promise<JsnixWebContainer> => {
		if (!singleton) {
			let child = spinner?.addChild({
				text: 'booting webcontainer',
				...dots,
			});
			child?.start();
			singleton = await JsnixWebContainer.boot(bootOptions);
			await child?.stop(chalk.green('‚úî') + ' webcontainer booted');

			child = spinner?.addChild({
				text: 'retrieving filesystem',
				...dots,
			});
			child?.start();
			fs = ((typeof fs === 'function') ? await fs() : fs) as Fs
			await child?.stop(chalk.green('‚úî') + ' filesystem retrieved');

			child = spinner?.addChild({
				text: 'mounting filesystem',
				...dots,
			});
			child?.start();
			await singleton.mount(fs, { mountPoint });
			await child?.stop(chalk.green('‚úî') + ' filesystem mounted');

			setContainer(singleton);
		}
		return singleton;
	};

	const teardown = async () => {
		if (singleton) {
			singleton.teardown();
			singleton = null;
			onTeardown && onTeardown();
			setContainer(singleton);
		}
	};

	useEffect(() => {
		return () => {
			teardown();
		};
	}, []);

	return { init, container: container, setWebContainer: setContainer };
}
`}},"useTerminal.ts":{file:{contents:`import React, { useEffect, useState } from 'react';
import type { ITerminalInitOnlyOptions, ITerminalOptions } from '@jsnix/xterm';
import { FitAddon } from '@jsnix/addon-fit';
import { ClipboardAddon } from '@xterm/addon-clipboard';
import { WebLinksAddon } from '@xterm/addon-web-links';
import { UnicodeGraphemesAddon } from '@jsnix/addon-unicode-graphemes';
import type { WebContainer, WebContainerProcess } from '@webcontainer/api';
import { JsnixTerminal } from '@jsnix/utils/terminal';
import type { Editor } from '@jsnix/utils/editor';

const defaultOptions: ITerminalOptions = {
	cursorBlink: true,
	allowProposedApi: true,
	screenReaderMode: true,
	fontFamily: 'Emoji, Consolas, Menlo, Monaco, "Lucida Console", "Liberation Mono", "DejaVu Sans Mono", "Bitstream Vera Sans Mono", "Courier New", monospace, serif',
	convertEol: true,
	theme: {
		foreground: '#f8f8f2',
		background: '#252525',
		cursor: '#bbbbbb',

		black: '#000000',
		brightBlack: '#555555',

		red: '#ff5555',
		brightRed: '#ff5555',

		green: '#50fa7b',
		brightGreen: '#50fa7b',

		yellow: '#f1fa8c',
		brightYellow: '#f1fa8c',

		blue: '#bd93f9',
		brightBlue: '#bd93f9',

		magenta: '#fe5858',
		brightMagenta: '#feae58',

		cyan: '#8be9fd',
		brightCyan: '#8be9fd',

		white: '#bbbbbb',
		brightWhite: '#ffffff',
	},
};

export type UseTerminalProps = {
	ref: React.RefObject<HTMLDivElement>;
	process: WebContainerProcess | null;
	container: WebContainer | null;
	editor: Editor | null;
	options?: (ITerminalOptions & ITerminalInitOnlyOptions);
};

export default function useTerminal({ ref, process, options }: UseTerminalProps) {
	const [terminal, setTerminal] = useState<JsnixTerminal | null>(null);
	const [fitAddon, setFitAddon] = useState<FitAddon | null>(null);

	useEffect(() => {
		const onResize = async () => {
			if (!terminal || !fitAddon) return;

			await new Promise((resolve) => window.requestAnimationFrame(resolve));

			fitAddon?.fit();
			if (process) {
				process.resize({ cols: terminal.cols, rows: terminal.rows });
			}
		};

		// Use ResizeObserver to watch for parent container size changes
		const resizeObserver = new ResizeObserver((entries) => {
			for (const entry of entries) {
				if (entry.target === ref.current) {
					onResize();
				}
			}
		});

		if (ref.current) {
			resizeObserver.observe(ref.current);
		}

		// Cleanup ResizeObserver and window event listener
		return () => {
			if (ref.current) {
				resizeObserver.unobserve(ref.current);
			}
			resizeObserver.disconnect();
		};
	}, [ref, terminal, process, fitAddon]);

	useEffect(() => {
		let term: JsnixTerminal | null = null;

		if (ref.current && !terminal) {
			options = {
				...defaultOptions,
				...options,
				logger: {
					trace: console.trace,
					debug: console.debug,
					info: (...args: any[]) => {
						console.info(...args);
						term?.printBuffer();
					},
					warn: console.warn,
					error: console.error,
				},
			};
			term = new JsnixTerminal(options);
			term.attachCustomKeyEventHandler((arg) => {
				if (arg.ctrlKey && arg.code === 'KeyC' && arg.type === 'keydown') {
					const selection = term!.getSelection();

					if (selection) {
						navigator.clipboard.writeText(selection);
						return false;
					}
				}

				if (arg.ctrlKey && arg.code === 'KeyV' && arg.type === 'keydown') {
					return false;
				};
				return true;
			});

			const fit = new FitAddon();
			term.loadAddon(fit);
			term.loadAddon(new ClipboardAddon());
			term.loadAddon(new WebLinksAddon());
			term.loadAddon(new UnicodeGraphemesAddon());
			term.open(ref.current);
			fit.fit();

			// Not sure why viewport has a different background color other than what's specified but...
			const viewport = ref.current.querySelector<HTMLElement>('.xterm-viewport');
			if (viewport && options.theme?.background) {
				viewport.style.backgroundColor = options.theme.background;
			}
			setTerminal(term);
			setFitAddon(fit);
			requestAnimationFrame(() => {
				setTimeout(() => term?.focus(), 0);
			});
		}

		return () => {
			term?.dispose();
			setTerminal(null);
		};
	}, [ref]);

	return { terminal, setTerminal };
}
`}}}},"vite-env.d.ts":{file:{contents:`/// <reference types="vite/client" />
declare const APP_VERSION: string;
`}}}},src:{directory:{"main.tsx":{file:{contents:`import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import './index.css';
import App from './App';

createRoot(document.getElementById('root')!).render(
	<StrictMode>
		<App />
	</StrictMode>,
);
`}},assets:{directory:{"react.svg":{file:{contents:'<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>'}}}},"index.css":{file:{contents:`:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;
  font-size: 15px;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

#root {
  width: 100vw;
  height: 100vh;
  overflow: hidden;
  display: flex;
  align-self: flex-start;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}
`}},"App.tsx":{file:{contents:`import { useEffect, useState } from 'react';
import Jsnix, { JsnixOptions } from '../lib/components/Jsnix.js';
import { loadJsnixExports, WrappedJsnixExports } from '@jsnix/utils/osc';
import chalk from 'chalk';


import JSONWorker from 'monaco-editor/esm/vs/language/json/json.worker?worker';
import CSSWorker from 'monaco-editor/esm/vs/language/css/css.worker?worker';
import HTMLWorker from 'monaco-editor/esm/vs/language/html/html.worker?worker';
import TSWorker from 'monaco-editor/esm/vs/language/typescript/ts.worker?worker';
import EditorWorker from 'monaco-editor/esm/vs/editor/editor.worker?worker';

export type WorkerName = string;
const workers = {} as Record<WorkerName, Worker>;
const getWorker = (label: string) => {
	switch (label) {
		case 'json': return new JSONWorker();
		case 'scss':
		case 'less':
		case 'css': return new CSSWorker();
		case 'html':
		case 'handlebars':
		case 'razor': return new HTMLWorker()
		case 'typescript':
		case 'javascript': return new TSWorker()
		default: return new EditorWorker()
	}
};

self.MonacoEnvironment = {
	getWorker: function (_, label) {
		if (label in workers) {
			return workers[label];
		}
		const worker = getWorker(label);
		workers[label] = worker;
		return worker;
	},
};

function App() {
	const [jsnixExports, setJsnixExports] = useState<WrappedJsnixExports[] | undefined>(undefined);
	const options: JsnixOptions = {
		env: {
			PATH: '/home/workspace/bin:/bin:/usr/bin:/usr/local/bin',
			NODE_OPTIONS: '--no-warnings --experimental-global-webcrypto',
		},
		prompt: [
			\`\\x1b]80085;data;152c8668-1bb3-4fa9-9639-6bce2a57a798;eyJodG1sIjoiPGRpdiBzdHlsZT1cIndpZHRoOiAxMDAlO1xuXHRkaXNwbGF5OiBmbGV4O1xuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0cGFkZGluZzogMXJlbTtcIj5cblx0PGRpdiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6ICMzODM4Mzg7XG5cdFx0XHRcdGJveC1zaGFkb3c6IC0xcmVtIDFyZW0gIzE3MTcxNztcblx0XHRcdFx0cGFkZGluZzogMXJlbTtcblx0XHRcdFx0cGFkZGluZy1ib3R0b206IDJyZW07XG5cdFx0XHRcdHdoaXRlLXNwYWNlOiBwcmUtd3JhcDtcblx0XHRcdFx0Zm9udC1zaXplOiBjbGFtcCg2cHgsIGNhbGMoMTAwdncgLyAzNCksIDE2cHgpO1xuXHRcdFx0XHRmb250LWZhbWlseTogbW9ub3NwYWNlO1xuXHRcdFx0XHRjb2xvcjogd2hpdGU7XG5cdFx0XHRcdGJvcmRlcjogNHB4IHNvbGlkICMwYTBhMGE7XG5cdFx0XHRcdHdpZHRoOiAxMDAlO1xuXHRcdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdFx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHRcdFx0YWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG5cdFx0XHRcdGxpbmUtaGVpZ2h0OiBpbml0aWFsO1wiPlxu4paI4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4pWXICDilojilojilZfilojilojilojilojilojilojilojilZcg4paI4paI4paI4paI4paI4paI4pWXIFxu4pWa4pWQ4pWQ4paI4paI4pWU4pWQ4pWQ4pWd4paI4paI4pWRICDilojilojilZHilojilojilZTilZDilZDilZDilZDilZ3ilojilojilZTilZDilZDilZDilojilojilZdcbiAgIOKWiOKWiOKVkSAgIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVkeKWiOKWiOKWiOKWiOKWiOKVlyAg4paI4paI4pWRICAg4paI4paI4pWRXG4gICDilojilojilZEgICDilojilojilZTilZDilZDilojilojilZHilojilojilZTilZDilZDilZ0gIOKWiOKWiOKVkSAgIOKWiOKWiOKVkVxuICAg4paI4paI4pWRICAg4paI4paI4pWRICDilojilojilZHilojilojilojilojilojilojilojilZfilZrilojilojilojilojilojilojilZTilZ1cbiAgIOKVmuKVkOKVnSAgIOKVmuKVkOKVnSAg4pWa4pWQ4pWd4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWdIOKVmuKVkOKVkOKVkOKVkOKVkOKVnVxuXG5cbiAgICAgZGV2IPCfkrsgYXJ0aXN0IPCfjqggZ29vZiDwn6ShXG48L2Rpdj48L2Rpdj4ifQ==\\x07\`,
			'',
			\`press any key to \${chalk.greenBright('start')}\`,
		],
		bootstrap: [
			{
				cmd: ['npm', 'i', '@jsnix/cli'],
				options: {
					cwd: 'bin',
				},
			},
			{
				cmd: ['ln', '-s', 'node_modules/@jsnix/cli/dist/cli/index.js', 'jsnix'],
				options: {
					cwd: 'bin',
				},
			},
		],
		entrypoint: ['jsnix'],
		jsnixExports,
		terminalOptions: {
			logLevel: 'info'
		}
	};

	const loadSnapshot = async () => {
		const module = await import('virtual:@jsnix/snapshot');
		return {
			'jsnix': {
				directory: module.default,
			},
			'bin': {
				directory: {},
			},
			'HELLO.md': {
				file: {
					contents: \`Howdy, stranger! Feel free to poke around.

## Useful commands

\\\`\\\`\\\`sh
jsnix --help
\\\`\\\`\\\`

\\\`\\\`\\\`sh
ls /bin /usr/bin /usr/local/bin
\\\`\\\`\\\`

\\\`\\\`\\\`sh
cat ~/.jshrc
\\\`\\\`\\\`

\\\`\\\`\\\`sh
cd ~/workspace/jsnix/
\\\`\\\`\\\`
\`,
				},
			},
		}
	}

	const loadExports = async () => {
		const modules = import.meta.glob('../../cli/commands/**/_app/jsnix.{js,jsx,ts,tsx}');
		const exports = await loadJsnixExports(modules);
		setJsnixExports(exports.filter((module) => module !== null));
	};

	useEffect(() => {
		loadExports();
	}, []);

	if (jsnixExports === undefined) {
		return null;
	}

	return (
		<Jsnix
			fs={loadSnapshot}
			options={options}
		/>
	);
}

export default App;
`}},"vite-env.d.ts":{file:{contents:`/// <reference types="vite/client" />
/// <reference types="@webcontainer/api" />

declare module 'virtual:@jsnix/snapshot' {
	const snapshot: FileSystemTree; // Export the type
	export default snapshot;
}
`}}}},"tsconfig.json":{file:{contents:`{
    "compilerOptions": {
        "target": "ESNext",
        "useDefineForClassFields": true,
        "lib": [
            "ESNext",
            "DOM",
            "DOM.Iterable"
        ],
        "module": "ESNext",
        "skipLibCheck": true,
        /* Bundler mode */
        "moduleResolution": "bundler",
        "allowImportingTsExtensions": true,
        "resolveJsonModule": true,
        "isolatedModules": true,
        "noEmit": true,
        "jsx": "react-jsx",
        /* Linting */
        "strict": true,
        "noUnusedLocals": true,
        "noUnusedParameters": true,
        "noFallthroughCasesInSwitch": true
    },
    "include": [
        "src",
        "lib",
        "public"
    ],
    "references": [
        {
            "path": "./tsconfig.node.json"
        }
    ]
}`}},"index.html":{file:{contents:`<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <script src="/sw.min.js"><\/script>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="./src/main.tsx"><\/script>
  </body>
</html>
`}},"package.json":{file:{contents:`{
  "name": "@jsnix/react",
  "version": "0.0.53",
  "description": "jsnix react components and hooks",
  "main": "dist/index.js",
  "type": "module",
  "scripts": {
    "dev": "vite --config vite.config.app.ts",
    "check-types": "tsc --noEmit",
    "lint": "eslint --fix .",
    "build": "vite build --config vite.config.lib.ts",
    "test": "echo \\"Error: no test specified\\" && exit 1",
    "preview": "vite preview",
    "clean": "rm -rf .turbo dist node_modules"
  },
  "author": "theodore brockman",
  "license": "MIT",
  "exports": {
    ".": {
      "types": "./dist/index.d.ts",
      "import": "./dist/index.js",
      "require": "./dist/index.js"
    },
    "./assets/*": {
      "import": "./dist/assets/*",
      "require": "./dist/assets/*"
    }
  },
  "peerDependencies": {
    "@webcontainer/api": "^1.5.1",
    "monaco-editor": "^0.52.2",
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "dependencies": {
    "@jsnix/addon-fit": "*",
    "@jsnix/addon-unicode-graphemes": "^0.3.2",
    "@jsnix/utils": "file:../utils",
    "@jsnix/xterm": "^5.5.13",
    "@xterm/addon-clipboard": "^0.1.0",
    "@xterm/addon-web-links": "^0.11.0",
    "async-mutex": "^0.5.0",
    "chalk": "^5.3.0",
    "dockview-core": "^3.0.2"
  },
  "devDependencies": {
    "@types/node": "^22.10.5",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.4",
    "vite": "^5.4.11",
    "vite-plugin-dts": "^4.4.0",
    "vite-plugin-lib-inject-css": "^2.1.1",
    "vite-plugin-top-level-await": "^1.4.4"
  }
}
`}},public:{directory:{"vite.svg":{file:{contents:'<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>'}},"sw.min.js":{file:{contents:`/*! coi-serviceworker v0.1.6 - Guido Zuidhof, licensed under MIT */
'undefined' == typeof window ? (self.addEventListener('install', () => self.skipWaiting()), self.addEventListener('activate', e => e.waitUntil(self.clients.claim())), self.addEventListener('message', (e) => { e.data && 'deregister' === e.data.type && self.registration.unregister().then(() => self.clients.matchAll()).then((e) => { e.forEach(e => e.navigate(e.url)) }) }), self.addEventListener('fetch', function (e) { 'only-if-cached' === e.request.cache && 'same-origin' !== e.request.mode || e.respondWith(fetch(e.request).then((e) => { if (0 === e.status) return e; const r = new Headers(e.headers); return r.set('Cross-Origin-Embedder-Policy', 'require-corp'), r.set('Cross-Origin-Opener-Policy', 'same-origin'), new Response(e.body, { status: e.status, statusText: e.statusText, headers: r }) }).catch(e => console.error(e))) })) : (() => { const e = { shouldRegister: () => !0, shouldDeregister: () => !1, doReload: () => window.location.reload(), quiet: !1, ...window.coi }, r = navigator; e.shouldDeregister() && r.serviceWorker && r.serviceWorker.controller && r.serviceWorker.controller.postMessage({ type: 'deregister' }), !1 === window.crossOriginIsolated && e.shouldRegister() && (window.isSecureContext ? r.serviceWorker && r.serviceWorker.register(window.document.currentScript.src).then((t) => { !e.quiet && console.log('COOP/COEP Service Worker registered', t.scope), t.addEventListener('updatefound', () => { !e.quiet && console.log('Reloading page to make use of updated COOP/COEP Service Worker.'), e.doReload() }), t.active && !r.serviceWorker.controller && (!e.quiet && console.log('Reloading page to make use of COOP/COEP Service Worker.'), e.doReload()) }, (r) => { !e.quiet && console.error('COOP/COEP Service Worker failed to register:', r) }) : !e.quiet && console.log('COOP/COEP Service Worker not registered, a secure context is required.')) })()
`}}}},"CHANGELOG.md":{file:{contents:`# @jsnix/react

## 0.0.53

### Patch Changes

- Updating Pastel dep
- Updated dependencies
  - @jsnix/utils@0.0.60

## 0.0.52

### Patch Changes

- Fixes
- Updated dependencies
  - @jsnix/utils@0.0.59

## 0.0.51

### Patch Changes

- Fix @jsnix/xterm dep
- Updated dependencies
  - @jsnix/utils@0.0.58

## 0.0.50

### Patch Changes

- Remove some logs
- Updated dependencies
  - @jsnix/utils@0.0.57

## 0.0.49

### Patch Changes

- Adding waitForScroll
- Updated dependencies
  - @jsnix/utils@0.0.56

## 0.0.48

### Patch Changes

- Fix focus.

## 0.0.47

### Patch Changes

- Publishing
- Updated dependencies
  - @jsnix/utils@0.0.55

## 0.0.46

### Patch Changes

- Bump
- Updated dependencies
  - @jsnix/utils@0.0.54

## 0.0.45

### Patch Changes

- Don't remember
- Updated dependencies
  - @jsnix/utils@0.0.53

## 0.0.44

### Patch Changes

- Updates
- Updated dependencies
  - @jsnix/utils@0.0.52

## 0.0.43

### Patch Changes

- Change max-width

## 0.0.42

### Patch Changes

- Bumping
- Updated dependencies
  - @jsnix/utils@0.0.51

## 0.0.41

### Patch Changes

- Bump
- Updated dependencies
  - @jsnix/utils@0.0.50

## 0.0.40

### Patch Changes

- Exit early, try writing newline after command.
- Updated dependencies
  - @jsnix/utils@0.0.49

## 0.0.39

### Patch Changes

- Bug fixes
- Updated dependencies
  - @jsnix/utils@0.0.48

## 0.0.38

### Patch Changes

- Add necessary env

## 0.0.37

### Patch Changes

- Forting nites
- Updated dependencies
  - @jsnix/utils@0.0.47

## 0.0.36

### Patch Changes

- Up
- Updated dependencies
  - @jsnix/utils@0.0.46

## 0.0.35

### Patch Changes

- Rebuild
- Updated dependencies
  - @jsnix/utils@0.0.45

## 0.0.34

### Patch Changes

- Removing source maps
- Updated dependencies
  - @jsnix/utils@0.0.44

## 0.0.33

### Patch Changes

- Rendering changes and CLI update
- Updated dependencies
  - @jsnix/utils@0.0.43

## 0.0.32

### Patch Changes

- Fix loadJsnixEports
- Updated dependencies
  - @jsnix/utils@0.0.42

## 0.0.31

### Patch Changes

- Fixing
- Updated dependencies
  - @jsnix/utils@0.0.41

## 0.0.30

### Patch Changes

- Changes
- Updated dependencies
  - @jsnix/utils@0.0.40

## 0.0.29

### Patch Changes

- Removing deps
- Updated dependencies
  - @jsnix/utils@0.0.39

## 0.0.28

### Patch Changes

- Fixing HTML command rendering
- Updated dependencies
  - @jsnix/utils@0.0.38

## 0.0.27

### Patch Changes

- Fix 'html' command and add 'Scroller' component to CLI
- Updated dependencies
  - @jsnix/utils@0.0.37

## 0.0.26

### Patch Changes

- Debug build
- Updated dependencies
  - @jsnix/utils@0.0.36

## 0.0.25

### Patch Changes

- Debug build
- Updated dependencies
  - @jsnix/utils@0.0.35

## 0.0.24

### Patch Changes

- Trying to fix size
- Updated dependencies
  - @jsnix/utils@0.0.34

## 0.0.23

### Patch Changes

- Fixes and such
- Updated dependencies
  - @jsnix/utils@0.0.33

## 0.0.22

### Patch Changes

- Bump
- Updated dependencies
  - @jsnix/utils@0.0.32

## 0.0.21

### Patch Changes

- Bump
- Updated dependencies
  - @jsnix/utils@0.0.31

## 0.0.20

### Patch Changes

- Bump
- Updated dependencies
  - @jsnix/utils@0.0.30

## 0.0.19

### Patch Changes

- Bump
- Updated dependencies
  - @jsnix/utils@0.0.29

## 0.0.18

### Patch Changes

- Bump
- Updated dependencies
  - @jsnix/cli@0.0.23
  - @jsnix/utils@0.0.28

## 0.0.17

### Patch Changes

- Fixing html command
- Updated dependencies
  - @jsnix/utils@0.0.27
  - @jsnix/cli@0.0.22

## 0.0.16

### Patch Changes

- Fixing container path resolution
- Updated dependencies
  - @jsnix/utils@0.0.25
  - @jsnix/cli@0.0.20

## 0.0.15

### Patch Changes

- Bumping
- Updated dependencies
  - @jsnix/cli@0.0.19
  - @jsnix/utils@0.0.24

## 0.0.14

### Patch Changes

- Bumping all for changes
- Updated dependencies
  - @jsnix/cli@0.0.18
  - @jsnix/utils@0.0.23

## 0.0.13

### Patch Changes

- Update addon-fit dep

## 0.0.12

### Patch Changes

- New build
- Updated dependencies
  - @jsnix/cli@0.0.17
  - @jsnix/utils@0.0.22

## 0.0.11

### Patch Changes

- Updating utils, scripts, react, and cli.
- Updated dependencies
  - @jsnix/cli@0.0.16
  - @jsnix/utils@0.0.21

## 0.0.10

### Patch Changes

- Bumping patch
- Updated dependencies
  - @jsnix/cli@0.0.14
  - @jsnix/utils@0.0.20

## 0.0.9

### Patch Changes

- 8899e2e: Releasing version for integration testing
- Updated dependencies [8899e2e]
  - @jsnix/cli@0.0.13
  - @jsnix/utils@0.0.19
`}},"vite.config.lib.ts":{file:{contents:`import { defineConfig } from 'vite';
import { resolve } from 'node:path';
import dts from 'vite-plugin-dts';
import { libInjectCss } from 'vite-plugin-lib-inject-css';
import react from '@vitejs/plugin-react';

export default defineConfig(({ mode }) => ({
	base: './',
	cacheDir: '../../node_modules/.vite',
	esbuild: {
		supported: {
			'top-level-await': true,
		},
		pure: mode === 'production' ? ['console.log', 'console.debug', 'debugger'] : [],
	},
	build: {
		lib: {
			entry: resolve(__dirname, 'lib/index.ts'),
			formats: ['es'],
		},
		rollupOptions: {
			external: ['react', 'react/react-dom', 'monaco-editor', '@webcontainer/api'],
			output: {
				assetFileNames: 'assets/[name][extname]',
				entryFileNames: '[name].js',
			},
		},
	},
	plugins: [
		react(),
		libInjectCss(),
		dts({ include: ['lib'] }),
	],
	define: {
		APP_VERSION: JSON.stringify(process.env['npm_package_version']),
	},
}));
`}},"vite.config.app.ts":{file:{contents:`import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import { snapshot } from '@jsnix/utils/vite';
import { traverse } from '@jsnix/utils/filesystemtree';

export default defineConfig(({ mode }) => ({
	base: './',
	cacheDir: '../../node_modules/.vite',
	esbuild: {
		supported: {
			'top-level-await': true, // browsers can handle top-level-await features
		},
	},
	optimizeDeps: {
		esbuildOptions: {
			target: 'esnext',
			format: 'esm',
		},
	},
	plugins: [
		snapshot({
			root: '../../',
			transform: async (tree) => {
				const locations = [
					['@jsnix/utils', 'file:../utils'],
					['@jsnix/cli', 'file:../cli'],
					['@jsnix/react', 'file:../react'],
					['@jsnix/relay', 'file:../relay'],
					['@jsnix/scripts', 'file:../scripts'],
				];
				for (const { name, node, parent } of traverse(tree)) {
					if (name === 'package-lock.json' && mode === 'production') {
						delete parent[name];
					}

					if (name === 'package.json' && 'file' in node && 'contents' in node.file) {
						const json = JSON.parse(node.file.contents as string);
						const { dependencies, devDependencies } = json;
						for (const [dep, loc] of locations) {
							if (dependencies && dependencies[dep]) {
								dependencies[dep] = loc;
							}
							if (devDependencies && devDependencies[dep]) {
								devDependencies[dep] = devDependencies[loc];
							}
						}
						node.file.contents = JSON.stringify(json, null, 2) + '\\n';
					}
				}
				return tree;
			},
		}),
		react(),
	],
	define: {
		APP_VERSION: JSON.stringify(process.env['npm_package_version']),
	},
}));
`}},"tsconfig.node.json":{file:{contents:`{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "esnext",
    "lib": [
      "ES2023"
    ],
    "composite": true,
    "module": "ESNext",
    "skipLibCheck": true,
    /* Bundler mode */
    "moduleResolution": "node",
    "isolatedModules": true,
    "moduleDetection": "force",
    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true,
    "allowSyntheticDefaultImports": true,
    "types": [
      "node"
    ]
  },
  "include": [
    "vite.config.app.ts",
    "vite.config.lib.ts"
  ]
}`}},"tsconfig.build.json":{file:{contents:`{
    "extends": "./tsconfig.json",
    "include": [
        "lib"
    ]
}`}},"eslint.config.js":{file:{contents:`import baseConfig from '../../eslint.config.js';

export default [
	...baseConfig,
	{
		rules: {
			'react/jsx-uses-react': 'off', // React 17+ JSX Transform
			'react/react-in-jsx-scope': 'off',
		},
	},
	{
		ignores: ['public/*'],
	},
];
`}}}},relay:{directory:{"main.ts":{file:{contents:`import { Readable } from 'node:stream';
import { Relay } from './index.js';

try {
	const input = Readable.toWeb(process.stdin);
	const output = new WritableStream({
		write(chunk) {
			process.stdout.write(chunk, 'utf8');
		},
	});
	const relay = new Relay(input, output);
	await relay.start();
	process.exit(0);
}
catch (err) {
	console.error(err);
	process.exit(1);
}
`}},"tsconfig.json":{file:{contents:`{
    "extends": "../../tsconfig.base.json",
    "compilerOptions": {
        "outDir": "dist",
        "declaration": true,
        "moduleResolution": "node",
        "esModuleInterop": true,
        "types": [
            "node"
        ]
    },
    "include": [
        "**/*.ts"
    ],
    "exclude": [
        "dist",
        "node_modules",
        "**/*.test.ts"
    ]
}`}},"package.json":{file:{contents:`{
  "name": "@jsnix/relay",
  "version": "0.0.37",
  "description": "a relay for host -> webcontainer server communication",
  "main": "dist/relay/index.js",
  "bin": "dist/relay/main.js",
  "scripts": {
    "dev": "tsc",
    "build": "tsc",
    "check-types": "tsc --noEmit",
    "lint": "eslint --fix -c ../../eslint.config.js .",
    "clean": "rm -rf .turbo dist node_modules",
    "test": "echo \\"Error: no test specified\\" && exit 1"
  },
  "author": "theodore brockman",
  "license": "MIT",
  "type": "module",
  "exports": {
    ".": {
      "import": "./dist/relay/index.js",
      "require": "./dist/relay/index.js",
      "types": "./dist/relay/index.d.ts"
    }
  },
  "dependencies": {
    "@jsnix/utils": "file:../utils"
  },
  "devDependencies": {
    "@types/node": "^22.10.5"
  }
}
`}},"index.ts":{file:{contents:`import { deserializeRequest, readJSONChunks, serializeResponse } from '@jsnix/utils/ipc';
import type {
	ReadableStream,
	WritableStream,
} from 'node:stream/web';

export class Relay {
	input: ReadableStream;
	output: WritableStream;

	constructor(input: ReadableStream, output: WritableStream) {
		this.input = input;
		this.output = output;
	}

	async start() {
		const writer = this.output.getWriter();
		await writer.ready;
		await writer.write(JSON.stringify({ type: 'ready' }) + '\\r\\n');

		for await (const json of readJSONChunks(this.input.getReader())) {
			const request = await deserializeRequest(json);
			const response = await fetch(request);
			const serializedResponse = await serializeResponse(response);
			await writer.write(serializedResponse + '\\r\\n');
		}
	}
}
`}},"CHANGELOG.md":{file:{contents:`# @jsnix/relay

## 0.0.37

### Patch Changes

- Updating Pastel dep
- Updated dependencies
  - @jsnix/utils@0.0.60

## 0.0.36

### Patch Changes

- Adding waitForScroll
- Updated dependencies
  - @jsnix/utils@0.0.56

## 0.0.35

### Patch Changes

- Publishing
- Updated dependencies
  - @jsnix/utils@0.0.55

## 0.0.34

### Patch Changes

- Bump
- Updated dependencies
  - @jsnix/utils@0.0.54

## 0.0.33

### Patch Changes

- Don't remember
- Updated dependencies
  - @jsnix/utils@0.0.53

## 0.0.32

### Patch Changes

- Bumping
- Updated dependencies
  - @jsnix/utils@0.0.51

## 0.0.31

### Patch Changes

- Bump
- Updated dependencies
  - @jsnix/utils@0.0.50

## 0.0.30

### Patch Changes

- Up
- Updated dependencies
  - @jsnix/utils@0.0.46

## 0.0.29

### Patch Changes

- Rebuild
- Updated dependencies
  - @jsnix/utils@0.0.45

## 0.0.28

### Patch Changes

- Removing source maps
- Updated dependencies
  - @jsnix/utils@0.0.44

## 0.0.27

### Patch Changes

- Rendering changes and CLI update
- Updated dependencies
  - @jsnix/utils@0.0.43

## 0.0.26

### Patch Changes

- Changes
- Updated dependencies
  - @jsnix/utils@0.0.40

## 0.0.25

### Patch Changes

- Fixing HTML command rendering
- Updated dependencies
  - @jsnix/utils@0.0.38

## 0.0.24

### Patch Changes

- Trying to fix size
- Updated dependencies
  - @jsnix/utils@0.0.34

## 0.0.23

### Patch Changes

- Fixes and such
- Updated dependencies
  - @jsnix/utils@0.0.33

## 0.0.22

### Patch Changes

- Bump
- Updated dependencies
  - @jsnix/utils@0.0.32

## 0.0.21

### Patch Changes

- Bump
- Updated dependencies
  - @jsnix/utils@0.0.31

## 0.0.20

### Patch Changes

- Bump
- Updated dependencies
  - @jsnix/utils@0.0.30

## 0.0.19

### Patch Changes

- Bump
- Updated dependencies
  - @jsnix/utils@0.0.29

## 0.0.18

### Patch Changes

- Bump
- Updated dependencies
  - @jsnix/utils@0.0.28

## 0.0.17

### Patch Changes

- Fixing container path resolution
- Updated dependencies
  - @jsnix/utils@0.0.25

## 0.0.16

### Patch Changes

- Bumping
- Updated dependencies
  - @jsnix/utils@0.0.24

## 0.0.15

### Patch Changes

- Bumping all for changes
- Updated dependencies
  - @jsnix/utils@0.0.23

## 0.0.14

### Patch Changes

- New build
- Updated dependencies
  - @jsnix/utils@0.0.22

## 0.0.13

### Patch Changes

- Updating utils, scripts, react, and cli.
- Updated dependencies
  - @jsnix/utils@0.0.21

## 0.0.12

### Patch Changes

- Bumping patch
- Updated dependencies
  - @jsnix/utils@0.0.20

## 0.0.11

### Patch Changes

- 8899e2e: Releasing version for integration testing
- Updated dependencies [8899e2e]
  - @jsnix/utils@0.0.19
`}}}},scripts:{directory:{soundcloud:{directory:{"run.ts":{file:{contents:`import { Soundcloud } from './scrape.js';

export const run = async (clientId = 'AsIBxSC4kw4QXdGp0vufY0YztIlkRMUc', oauthToken = '', output = './scrape.json') => {
	const fs = await import('node:fs/promises');

	const soundcloud = new Soundcloud(clientId, oauthToken);

	// TODO: filter private songs
	try {
		const data = await soundcloud.list('56992816', {
			tracks: true,
			reposts: true,
			playlists: false,
			likes: true,
		});
		const json = JSON.stringify(data, null, 2);
		await fs.writeFile(output, json, { encoding: 'utf-8' });
	}
	catch (error) {
		console.error(error);
	}
};
`}},"scrape.ts":{file:{contents:`import data from './scrape.json' with { type: 'json' };
export const json = data;

export type SoundcloudResponse<T extends any[]> = {
	collection: T;
	next_href: string | null;
};
export type User = {
	username: string;
	id: number;
};
export type SoundcloudItem = {
	id: number;
	permalink_url: string;
	title: string;
	user: User;
};
export type Playlist = SoundcloudItem & {
	kind: 'playlist';
};
export type Track = SoundcloudItem & {
	embeddable_by: string;
};
export type Repost = {
	type: 'track-repost' | 'playlist-repost';
	user: User;
	track?: Track;
	playlist?: Playlist;
};
export type Like = {
	kind: 'like';
	track?: Track;
	playlist?: Playlist;
};
export type ListResponse = { tracks?: SoundcloudItem[]; reposts?: SoundcloudItem[]; playlists?: SoundcloudItem[]; likes?: SoundcloudItem[] };

export class Soundcloud {
	private clientId: string;
	private oauthToken: string;
	private readonly baseHeaders: Record<string, string>;

	constructor(clientId: string, oauthToken: string) {
		this.clientId = clientId;
		this.oauthToken = oauthToken;
		this.baseHeaders = {
			Authorization: \`OAuth \${this.oauthToken}\`,
		};
	}

	private async fetchAllPages<T extends any[]>(url: string | null): Promise<any[]> {
		const results: any[] = [];

		while (url) {
			// Add a delay of 1 second between requests
			console.log('sleeping for 1 second before request');
			await new Promise((resolve) => setTimeout(resolve, 1000));
			const response = await fetch(url + \`&client_id=\${this.clientId}\`, { headers: this.baseHeaders });

			if (response.status == 404) {
				console.error(\`Not found: \${response.url}\`);
				return results;
			}

			if (!response.ok) {
				throw new Error(\`Failed to fetch: \${response.statusText}: \${response.url}\`);
			}

			const data: SoundcloudResponse<T> = await response.json();
			results.push(...(data.collection || []));
			url = data.next_href || null;
		}

		return results;
	}

	async listTracks(userId: string): Promise<Track[]> {
		const url = \`https://api-v2.soundcloud.com/users/\${userId}/tracks?limit=200\`;
		return this.fetchAllPages<Track[]>(url);
	}

	async listReposts(userId: string): Promise<Repost[]> {
		const url = \`https://api-v2.soundcloud.com/stream/users/\${userId}/reposts?limit=200\`;
		return this.fetchAllPages<Repost[]>(url);
	}

	async listPlaylists(userId: string): Promise<Playlist[]> {
		const url = \`https://api-v2.soundcloud.com/users/\${userId}/playlists?limit=200\`;
		return this.fetchAllPages<Playlist[]>(url);
	}

	async listLiked(userId: string): Promise<Like[]> {
		const url = \`https://api-v2.soundcloud.com/users/\${userId}/likes?limit=200\`;
		return this.fetchAllPages<Like[]>(url);
	}

	async list(
		userId: string,
		options: {
			tracks?: boolean;
			reposts?: boolean;
			playlists?: boolean;
			likes?: boolean;
		},
	): Promise<ListResponse> {
		const results: any = {};

		if (options.tracks) {
			const tracks = await this.listTracks(userId);
			results.tracks = tracks.map(({ id, title, embeddable_by, permalink_url, user }) => ({ id, title, embeddable_by, permalink_url, user: { id: user.id, username: user.username } }));
		}

		if (options.reposts) {
			const reposts = await this.listReposts(userId);
			results.reposts = reposts.map(({ track, playlist }) => {
				if (track) {
					const { id, title, embeddable_by, permalink_url, user } = track;
					return { id, title, embeddable_by, permalink_url, user: { id: user.id, username: user.username } };
				}

				if (playlist) {
					const { id, title, permalink_url, user } = playlist;
					return { id, title, permalink_url, user: { id: user.id, username: user.username } };
				}
				return null;
			}).filter((a) => a !== null);
		}

		if (options.playlists) {
			const playlists = await this.listPlaylists(userId);
			results.playlists = playlists.map(({ id, title, permalink_url, user }) => ({ id, title, permalink_url, user: { id: user.id, username: user.username } }));
		}

		if (options.likes) {
			const likes = await this.listLiked(userId);
			results.likes = likes.map((like) => {
				if (like.track) {
					const { id, title, embeddable_by, permalink_url, user } = like.track;
					return { id, title, embeddable_by, permalink_url, user: { id: user.id, username: user.username } };
				}

				if (like.playlist) {
					const { id, title, permalink_url, user } = like.playlist;
					return { id, title, permalink_url, user: { id: user.id, username: user.username } };
				}
				return null;
			}).filter((a) => a !== null);
		}

		return results;
	}
}
`}},"scrape.json":{file:{contents:`{
    "tracks": [
        {
            "id": 1959806731,
            "title": "the medicated mix",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/nat-port/the-medicated-mix",
            "user": {
                "id": 56992816,
                "username": "Nat Port"
            }
        },
        {
            "id": 698524105,
            "title": "love/hate mix",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/nat-port/lovehate-mix",
            "user": {
                "id": 56992816,
                "username": "Nat Port"
            }
        },
        {
            "id": 559261296,
            "title": "Sydney",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/nat-port/sydney",
            "user": {
                "id": 56992816,
                "username": "Nat Port"
            }
        },
        {
            "id": 518929572,
            "title": "Mix mix",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/nat-port/mix-mix",
            "user": {
                "id": 56992816,
                "username": "Nat Port"
            }
        },
        {
            "id": 375645824,
            "title": "ftc171",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/nat-port/ftc171",
            "user": {
                "id": 56992816,
                "username": "Nat Port"
            }
        },
        {
            "id": 373416272,
            "title": "Futurebeats Minimix 01",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/nat-port/futurebeats-minimix-01",
            "user": {
                "id": 56992816,
                "username": "Nat Port"
            }
        },
        {
            "id": 372969209,
            "title": "Theodore Thugboat Mix",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/nat-port/theodore-thugboat-mix",
            "user": {
                "id": 56992816,
                "username": "Nat Port"
            }
        },
        {
            "id": 252454438,
            "title": "The Unemployable Mix",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/nat-port/the-unemployable-mix",
            "user": {
                "id": 56992816,
                "username": "Nat Port"
            }
        }
    ],
    "playlists": [],
    "reposts": [
        {
            "id": 1863319320,
            "title": "look at me",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/uknip/look-at-me",
            "user": {
                "id": 821482417,
                "username": "pinku."
            }
        },
        {
            "id": 1792350558,
            "title": "TLC.3",
            "permalink_url": "https://soundcloud.com/imjestic/sets/tlc-3",
            "user": {
                "id": 44179776,
                "username": "JESTIC"
            }
        },
        {
            "id": 1658427231,
            "title": "Senko x Glurcky - Fogueta Ela",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/auntmollyrecords/sxnko-x-glurcky-fogueta-ela",
            "user": {
                "id": 244210650,
                "username": "Aunt Molly"
            }
        },
        {
            "id": 1626921570,
            "title": "LYNY x FLY - Pulse",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/lynyofficial/pulse",
            "user": {
                "id": 65575494,
                "username": "LYNY"
            }
        },
        {
            "id": 1211286679,
            "title": "MY FOUR 15s WOKE UP THE NEIGHBOR (7K FREEBIE)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/julomusic/my-four-15s-woke-up-the-neighbor-7k-freebie",
            "user": {
                "id": 3516263,
                "username": "JuLo"
            }
        },
        {
            "id": 1468324420,
            "title": "Vorso - Wannabe (COPYCATT Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/itscopycatt/wannabe",
            "user": {
                "id": 518328864,
                "username": "COPYCATT"
            }
        },
        {
            "id": 992098501,
            "title": "Blinker",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/jerryfolkmusic/blinker",
            "user": {
                "id": 10731939,
                "username": "Jerry Folk"
            }
        },
        {
            "id": 1506632812,
            "title": "Day One",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/koji93/day-one",
            "user": {
                "id": 28682753,
                "username": "koji."
            }
        },
        {
            "id": 1377150151,
            "title": "Jestic Wannabe",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/uknip/jestic-wannabe",
            "user": {
                "id": 821482417,
                "username": "pinku."
            }
        },
        {
            "id": 1273761934,
            "title": "baiana w/ neighbor",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/finestomusic/baiana-w-neighbor",
            "user": {
                "id": 503538948,
                "username": "finesto"
            }
        },
        {
            "id": 1296625342,
            "title": "UP",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/imjestic/up-1",
            "user": {
                "id": 44179776,
                "username": "JESTIC"
            }
        },
        {
            "id": 1277022679,
            "title": "worth it with/ balla",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mogotvibez/worth-it-with-balla",
            "user": {
                "id": 94358610,
                "username": "Mo Vibez"
            }
        },
        {
            "id": 1230358906,
            "title": "favorites",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/naji/favorites-1",
            "user": {
                "id": 10605007,
                "username": "Naji"
            }
        },
        {
            "id": 908380261,
            "title": "rain dance",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/duggmore/rain-dance",
            "user": {
                "id": 35054614,
                "username": "duggmore"
            }
        },
        {
            "id": 1011539572,
            "title": "juju",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/alexisnthere/jujump3",
            "user": {
                "id": 248268300,
                "username": "alex isn't here"
            }
        },
        {
            "id": 835454530,
            "title": "chipped w/milye",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/prod_skxxt/chipped-1",
            "user": {
                "id": 376353791,
                "username": "skoot"
            }
        },
        {
            "id": 1111568548,
            "title": "Envy",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/imjestic/envy",
            "user": {
                "id": 44179776,
                "username": "JESTIC"
            }
        },
        {
            "id": 1055936356,
            "title": "kids w/ dawsonLIED",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/camouflybeats/kids",
            "user": {
                "id": 407474571,
                "username": "camoufly"
            }
        },
        {
            "id": 1010929768,
            "title": "game point",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/weirdinside/game-point",
            "user": {
                "id": 67436159,
                "username": "weird inside"
            }
        },
        {
            "id": 980756683,
            "title": "Like Us (VIBEOUT CLUB VOL 3 OUT NOW)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mogotvibez/like-us-vibeout-club-vol-3-out-now",
            "user": {
                "id": 94358610,
                "username": "Mo Vibez"
            }
        },
        {
            "id": 920210257,
            "title": "Wallflower",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/wtfischee/wallflower-1",
            "user": {
                "id": 8314554,
                "username": "CHEE"
            }
        },
        {
            "id": 979773805,
            "title": "montekit",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mogotvibez/montekit-1",
            "user": {
                "id": 94358610,
                "username": "Mo Vibez"
            }
        },
        {
            "id": 984652801,
            "title": "Diner",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/imjestic/diner",
            "user": {
                "id": 44179776,
                "username": "JESTIC"
            }
        },
        {
            "id": 977275120,
            "title": "trust",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/imfrommarslol/trust",
            "user": {
                "id": 93334766,
                "username": "alex martian"
            }
        },
        {
            "id": 977987227,
            "title": "Rumor (feat. WYN)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/moorekismet/rumor-10",
            "user": {
                "id": 170379294,
                "username": "Moore Kismet"
            }
        },
        {
            "id": 953403334,
            "title": "Next To Blue - Angel Lung (feat. Virginia Palms) üå¨",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/goodsociety/angellung",
            "user": {
                "id": 350254532,
                "username": "Good Society"
            }
        },
        {
            "id": 940085653,
            "title": "feelittoo (+)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/zodivk/feelittoo",
            "user": {
                "id": 138533494,
                "username": "zodivk"
            }
        },
        {
            "id": 320373159,
            "title": "chromonicci. - Finesse.",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/pil-society/chromonicci-finesse",
            "user": {
                "id": 130379995,
                "username": "PIL Society"
            }
        },
        {
            "id": 908733208,
            "title": "more than enough",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/aprovoli/more-than-enough",
            "user": {
                "id": 20342740,
                "username": "aprovoli"
            }
        },
        {
            "id": 933640534,
            "title": "Whenleavesfall",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/theanbuu/whenleavesfall",
            "user": {
                "id": 192298555,
                "username": "anbuu"
            }
        },
        {
            "id": 929364712,
            "title": "DIVER",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/aprovoli/diver",
            "user": {
                "id": 20342740,
                "username": "aprovoli"
            }
        },
        {
            "id": 314617802,
            "title": "1-800-friends (FOREVER DOWNLOAD ON AUDIUS)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/next-to-blue/1-800-friends",
            "user": {
                "id": 62135255,
                "username": "Next To Blue"
            }
        },
        {
            "id": 901783378,
            "title": "Things Change",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/brysontiller/things-change",
            "user": {
                "id": 3197094,
                "username": "brysontiller"
            }
        },
        {
            "id": 902032960,
            "title": "The Yellow In The Middle",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/ikotu/the-yellow-in-the-middle",
            "user": {
                "id": 2262815,
                "username": "Ikotu"
            }
        },
        {
            "id": 730178632,
            "title": "Deluge Beat (ft. Samplified)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/jeremyblake/deluge-beat-ft-samplified",
            "user": {
                "id": 125296,
                "username": "Jeremy Blake"
            }
        },
        {
            "id": 870577360,
            "title": "Alex Martian - In Spirit",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/bloomchild/alex-martian-in-spirit",
            "user": {
                "id": 286161132,
                "username": "Bloom Child"
            }
        },
        {
            "id": 745612534,
            "title": "deep end (by xavier om√§r & sango)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/iamleuca/deepend",
            "user": {
                "id": 135171189,
                "username": "Leuca"
            }
        },
        {
            "id": 815348245,
            "title": "Offline",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/itstabi/offline",
            "user": {
                "id": 807721987,
                "username": "tabi"
            }
        },
        {
            "id": 845805745,
            "title": "Myles Jaeger - LEVELED",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/goodsociety/leveled",
            "user": {
                "id": 350254532,
                "username": "Good Society"
            }
        },
        {
            "id": 867514597,
            "title": "brrrt.",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/yojasmusic/brrrt",
            "user": {
                "id": 52970389,
                "username": "yojas."
            }
        },
        {
            "id": 850605481,
            "title": "Fidus Achates - Intervolve ft. RVKIT",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/phuturecollective/fidus-achates-intervolve-ft-rvkit",
            "user": {
                "id": 133476647,
                "username": "Phuture Collective ‚àû"
            }
        },
        {
            "id": 856208551,
            "title": "SAD",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/jrobbdaproducer/sad",
            "user": {
                "id": 4657451,
                "username": "J.ROBB"
            }
        },
        {
            "id": 598080543,
            "title": "Naive Response",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/thoomn/naive-response",
            "user": {
                "id": 601962,
                "username": "thoomn"
            }
        },
        {
            "id": 803322100,
            "title": "THE TRADE prod. quickly quickly",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/jakbannon/the-trade",
            "user": {
                "id": 27559818,
                "username": "Jak Bannon"
            }
        },
        {
            "id": 840129598,
            "title": "Big Gulp",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/yatesmusics/big-gulp",
            "user": {
                "id": 39134254,
                "username": "Yates"
            }
        },
        {
            "id": 840622996,
            "title": "Blue",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/cygn-artist/blue",
            "user": {
                "id": 70326625,
                "username": "C Y G N"
            }
        },
        {
            "id": 836697151,
            "title": "Uncle Bozo",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/imjestic/uncle-bozo",
            "user": {
                "id": 44179776,
                "username": "JESTIC"
            }
        },
        {
            "id": 236028107,
            "title": "BASECAMP - Watch My Back (Persian Empire Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/owslaofficial/04-watch-my-back-persian-empire-remix",
            "user": {
                "id": 11797934,
                "username": "OWSLA"
            }
        },
        {
            "id": 785739949,
            "title": "autumn keys - bored is good",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/goodsociety/boredisgood",
            "user": {
                "id": 350254532,
                "username": "Good Society"
            }
        },
        {
            "id": 623871402,
            "title": "new magic wand",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/pandi/newmagicwand",
            "user": {
                "id": 154375606,
                "username": "pandi"
            }
        },
        {
            "id": 816678568,
            "title": "Mr.softee",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/imjestic/mrsoftee",
            "user": {
                "id": 44179776,
                "username": "JESTIC"
            }
        },
        {
            "id": 716317189,
            "title": "Janguru",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/jkuch/janguru",
            "user": {
                "id": 33841166,
                "username": "JKuch"
            }
        },
        {
            "id": 571725684,
            "title": "king cobra w/ PROXY ichi",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/theardeamusic/king-cobra-w-proxy-ichi",
            "user": {
                "id": 3752977,
                "username": "Ardea"
            }
        },
        {
            "id": 807704335,
            "title": "lemon rmx",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/djgoldenretriever/lemon",
            "user": {
                "id": 8522411,
                "username": "dj golden retriever"
            }
        },
        {
            "id": 752954566,
            "title": "Iridescence",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/elozi/iridescence",
            "user": {
                "id": 67580058,
                "username": "ùñä·à®‡πè·∫ì·º∞"
            }
        },
        {
            "id": 795156610,
            "title": "stay inside / running (w/ colliding with mars)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/elijahwho/stay-inside-running-w-colliding-with-mars",
            "user": {
                "id": 160763118,
                "username": "‚Äéelijah who"
            }
        },
        {
            "id": 755897434,
            "title": "Saved Me",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/jonnyhenninger/saved-me",
            "user": {
                "id": 742231630,
                "username": "Jonny Henninger"
            }
        },
        {
            "id": 789460306,
            "title": "Guess Again",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/audiopush/guess-again-2",
            "user": {
                "id": 14053376,
                "username": "Audio Push"
            }
        },
        {
            "id": 460597164,
            "title": "Blue Sunday",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/willsniff-music/blue-sunday",
            "user": {
                "id": 341829709,
                "username": "Will Sniff"
            }
        },
        {
            "id": 739516375,
            "title": "Ying'n'Yang",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/imjestic/yingnyang",
            "user": {
                "id": 44179776,
                "username": "JESTIC"
            }
        },
        {
            "id": 761159068,
            "title": "dreamkiddo. - opsimathy",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/bloomchild/opsimathy",
            "user": {
                "id": 286161132,
                "username": "Bloom Child"
            }
        },
        {
            "id": 766973473,
            "title": "Shoot To Kill",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/beatsbyexplore/shoot-to-kill",
            "user": {
                "id": 107015094,
                "username": "EXPLORE"
            }
        },
        {
            "id": 762625675,
            "title": "Chee - Destroy VIP",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/inspected/chee-destroy-vip-1",
            "user": {
                "id": 9850513,
                "username": "Inspected"
            }
        },
        {
            "id": 89553787,
            "title": "See How It Goes",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/iamkayfranklin/see-how-it-goes",
            "user": {
                "id": 23389491,
                "username": "Kay Franklin"
            }
        },
        {
            "id": 618121281,
            "title": "instance",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/herzeloyde/instance",
            "user": {
                "id": 1702771,
                "username": "herzeloyde"
            }
        },
        {
            "id": 708830794,
            "title": "ok boomer",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/sappy94/ok-boomer",
            "user": {
                "id": 112597743,
                "username": "Sappy"
            }
        },
        {
            "id": 733157596,
            "title": "QGRT-007 | capshun & Quiet Bison - Acai Tower",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/qualitygoodsrecs/qgrt-007-capshun-quiet-bison-acai-tower",
            "user": {
                "id": 193633657,
                "username": "Quality Goods Records"
            }
        },
        {
            "id": 739712383,
            "title": "aliotho - Shrine",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/kumocollective/shrine",
            "user": {
                "id": 343570825,
                "username": "KUMO Collective"
            }
        },
        {
            "id": 414326787,
            "title": "91 Flex (prod. by Rascal)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/seritheking/91-flex-prod-by-rascal",
            "user": {
                "id": 5550848,
                "username": "Serious Klein"
            }
        },
        {
            "id": 407558709,
            "title": "Boy (prod. Mucky & J83)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/ayelle/boy",
            "user": {
                "id": 21806881,
                "username": "Ayelle"
            }
        },
        {
            "id": 337002406,
            "title": "Persian Empire - did you just assume my gender?",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/recordrecordparis/persian-empire-did-you-just-assume-my-gender",
            "user": {
                "id": 140402822,
                "username": "Record Record"
            }
        },
        {
            "id": 723448717,
            "title": "Holographic",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/theanbuu/holographic-anbuu-drumkit-vol3-out-now",
            "user": {
                "id": 192298555,
                "username": "anbuu"
            }
        },
        {
            "id": 723692428,
            "title": "Spit That",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/wtfischee/spit-that",
            "user": {
                "id": 8314554,
                "username": "CHEE"
            }
        },
        {
            "id": 555185265,
            "title": "hny ft tullis",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/iloveyousai/happynewyear-w-tullis",
            "user": {
                "id": 45369273,
                "username": "SAIAH"
            }
        },
        {
            "id": 712985536,
            "title": "impossible w/ bsterthegawd",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/legend216/impossible",
            "user": {
                "id": 59505797,
                "username": "legend"
            }
        },
        {
            "id": 178671048,
            "title": "5up",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/leeeeeeee/5up-demo",
            "user": {
                "id": 1254631,
                "username": "lee(asano+ryuhei)"
            }
        },
        {
            "id": 705330319,
            "title": "Virgil",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/tennysonmusic/virgil",
            "user": {
                "id": 5326994,
                "username": "tennyson"
            }
        },
        {
            "id": 705331369,
            "title": "Kaonashi",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/tennysonmusic/kaonashi",
            "user": {
                "id": 5326994,
                "username": "tennyson"
            }
        },
        {
            "id": 711368878,
            "title": "THE NEWS",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/partyomo/the-news",
            "user": {
                "id": 25219981,
                "username": "partyomo"
            }
        },
        {
            "id": 707413054,
            "title": "iyla- Juice (XXYYXX Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/xxyyxx/iyla-juice-xxyyxx-remix",
            "user": {
                "id": 4757232,
                "username": "xxyyxx"
            }
        },
        {
            "id": 177519464,
            "title": "Flamingosis // A Sol Mechanic - Awake To You",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/stereocure/awake-to-you-1",
            "user": {
                "id": 51354560,
                "username": "Stereocure"
            }
        },
        {
            "id": 700005676,
            "title": "Marco Kleebauer - 3rd Molar",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/prrrrrrr-records/marco-kleebauer-3rd-molar",
            "user": {
                "id": 121631178,
                "username": "Prrrrrrr"
            }
        },
        {
            "id": 699216043,
            "title": "better days",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/weirdinside/better-days-1",
            "user": {
                "id": 67436159,
                "username": "weird inside"
            }
        },
        {
            "id": 689535205,
            "title": "Room to Breathe",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/charles-thefirst/room-to-breathe-1",
            "user": {
                "id": 22082767,
                "username": "CharlestheFirst"
            }
        },
        {
            "id": 668470304,
            "title": "The Roundness Of Days",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/lightningbugpjs/the-roundness-of-days",
            "user": {
                "id": 44661363,
                "username": "Lightning Bug"
            }
        },
        {
            "id": 640366347,
            "title": "Adrestia w/ Herzeloyde",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/imjestic/adrestia-w-herzeloyde",
            "user": {
                "id": 44179776,
                "username": "JESTIC"
            }
        },
        {
            "id": 468343209,
            "title": "KLINK X KATTIE",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/klinkd/klink-x-kattie-1",
            "user": {
                "id": 253581583,
                "username": "KLINK"
            }
        },
        {
            "id": 658233764,
            "title": "The Lay Down with H.E.R. & WATT",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/shelleyfkadram/the-lay-down-feat-h-e-r-watt",
            "user": {
                "id": 4614033,
                "username": "DRAM"
            }
        },
        {
            "id": 653487089,
            "title": "GSWLY",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/ianewingmusic/gswly",
            "user": {
                "id": 9702642,
                "username": "Ian Ewing"
            }
        },
        {
            "id": 650358242,
            "title": "INDULGE",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/sebastian_paul/indulge",
            "user": {
                "id": 69181793,
                "username": "SEBASTIAN PAUL"
            }
        },
        {
            "id": 639431205,
            "title": "All That I've Done",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/levitatemusic/all-that-ive-done",
            "user": {
                "id": 1052798,
                "username": "LEViT‚àÜTE."
            }
        },
        {
            "id": 640139775,
            "title": "lean w/ L*o*J",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/aedfxmusic/lean-x-loj",
            "user": {
                "id": 164955794,
                "username": "aedfx."
            }
        },
        {
            "id": 632202900,
            "title": "122011 ( Prod. Alfon Zaaberg )",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mavotheadmiral/122011dash",
            "user": {
                "id": 3380770,
                "username": "Mavo"
            }
        },
        {
            "id": 633222372,
            "title": "Sunken City Of R'lyeh (NEST HQ PREMIERE)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/wtfischee/sunken-city-of-rlyeh-2",
            "user": {
                "id": 8314554,
                "username": "CHEE"
            }
        },
        {
            "id": 567599862,
            "title": "Right Here",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/prodsworn/right-here",
            "user": {
                "id": 462107034,
                "username": "Sw√∏rn"
            }
        },
        {
            "id": 619795251,
            "title": "Fast or Slow, with A-1",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mr_carmack/fast-or-slow",
            "user": {
                "id": 455369,
                "username": "MR‚Ä¢CAR/\\\\\\\\ACK"
            }
        },
        {
            "id": 441437133,
            "title": "IF U",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/deffiedeff/if-u",
            "user": {
                "id": 1581238,
                "username": "DEFFIE"
            }
        },
        {
            "id": 610249815,
            "title": "CRASH",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/brothelmusic/crash",
            "user": {
                "id": 24980742,
                "username": "brothel."
            }
        },
        {
            "id": 603142212,
            "title": "Tales",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/imjestic/tales",
            "user": {
                "id": 44179776,
                "username": "JESTIC"
            }
        },
        {
            "id": 565847061,
            "title": "DGAF feat. Shiloh Dynasty (DKVPZ Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/noahslee/dgafremix",
            "user": {
                "id": 46907647,
                "username": "Noah Slee"
            }
        },
        {
            "id": 600524613,
            "title": "Medasin & Felly - At Fault",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/officialmedasin/medasin-felly-at-fault",
            "user": {
                "id": 21695387,
                "username": "medasin"
            }
        },
        {
            "id": 527896263,
            "title": "Freak",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/amalaofficial/freak",
            "user": {
                "id": 21207090,
                "username": "DOJA CAT"
            }
        },
        {
            "id": 595878567,
            "title": "Midas Touch",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/topdawgent/midas-touch",
            "user": {
                "id": 2171095,
                "username": "TopDawgEnt"
            }
        },
        {
            "id": 315454061,
            "title": "inflatable bounce",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/custodi4n/inflatable-bounce",
            "user": {
                "id": 6973506,
                "username": "custodian"
            }
        },
        {
            "id": 504714885,
            "title": "gate",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/knyvez/gate",
            "user": {
                "id": 114477541,
                "username": "knyvez"
            }
        },
        {
            "id": 504538845,
            "title": "feather",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/underscores/feather",
            "user": {
                "id": 28756589,
                "username": "underscores"
            }
        },
        {
            "id": 573529659,
            "title": "Nullraum",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/josspoop/nullraum-0",
            "user": {
                "id": 158223607,
                "username": "Ôº™ÔΩèÔΩìÔΩìÔΩêÔΩèÔΩèÔΩê"
            }
        },
        {
            "id": 552583209,
            "title": "comin into 2019 like w/ willy crooks & ellio",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/itsbennyfool/x2019",
            "user": {
                "id": 133054467,
                "username": "ache"
            }
        },
        {
            "id": 567768204,
            "title": "DROELOE - Only Be Me",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/droeloemusic/only-be-me",
            "user": {
                "id": 149025691,
                "username": "DROELOE"
            }
        },
        {
            "id": 563654019,
            "title": "Misfortunes",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/imjestic/misfortunes",
            "user": {
                "id": 44179776,
                "username": "JESTIC"
            }
        },
        {
            "id": 564031323,
            "title": "Kingsley Ibeneche - To The Citadel",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/astronautico/kingsley-ibeneche-to-the-citadel",
            "user": {
                "id": 23412,
                "username": "Astro Nautico"
            }
        },
        {
            "id": 562121301,
            "title": "Dabow - Major",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/officialtrapparty/dabow-major",
            "user": {
                "id": 40156276,
                "username": "Trap Party Records"
            }
        },
        {
            "id": 210163520,
            "title": "waters",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/diversa/waters",
            "user": {
                "id": 913067,
                "username": "DIVERSA"
            }
        },
        {
            "id": 267818856,
            "title": "Regret",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/adustio/regret",
            "user": {
                "id": 112394616,
                "username": "IONA"
            }
        },
        {
            "id": 263663324,
            "title": "beginning",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/verzache/beginning",
            "user": {
                "id": 71811764,
                "username": "verzache"
            }
        },
        {
            "id": 278057924,
            "title": "hours w/ tregs",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/verzache/hours-w-tregs",
            "user": {
                "id": 71811764,
                "username": "verzache"
            }
        },
        {
            "id": 333787989,
            "title": "anime and heartbreak [beat tape]",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/vague003/anime-and-heartbreak-beat-tape",
            "user": {
                "id": 1921005,
                "username": "VAGUE003"
            }
        },
        {
            "id": 515214684,
            "title": "Grauer - R Disco",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/noirsurblancrecords/grauer-r-disco",
            "user": {
                "id": 135958707,
                "username": "NOIR SUR BLANC"
            }
        },
        {
            "id": 445724598,
            "title": "yung krillin (prod. yondo)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/deeradio/yungkrillin",
            "user": {
                "id": 45644863,
                "username": "dee smiff"
            }
        },
        {
            "id": 317014250,
            "title": "Mo Vibez - these days pass too fast",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/phuturecollective/mo-vibez-these-days-pass-too-fast",
            "user": {
                "id": 133476647,
                "username": "Phuture Collective ‚àû"
            }
        },
        {
            "id": 248083121,
            "title": "≈†uma - Stutter",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/phuturecollective/suma-stutter",
            "user": {
                "id": 133476647,
                "username": "Phuture Collective ‚àû"
            }
        },
        {
            "id": 444160062,
            "title": "WHOA",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/imjestic/whoa",
            "user": {
                "id": 44179776,
                "username": "JESTIC"
            }
        },
        {
            "id": 448137747,
            "title": "don't mind",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/lophiile/dontmind",
            "user": {
                "id": 1970839,
                "username": "lophiile"
            }
        },
        {
            "id": 471270045,
            "title": "Great Dane - Elevate",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/bassrush/elevate",
            "user": {
                "id": 256086898,
                "username": "Bassrush"
            }
        },
        {
            "id": 471253851,
            "title": "MOB",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/senojnayr/mob",
            "user": {
                "id": 77745482,
                "username": "SENOJNAYR"
            }
        },
        {
            "id": 204812952,
            "title": "A2 - You Are What You Feel",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/perserreich/you-are-what-you-feel",
            "user": {
                "id": 1579400,
                "username": "Persian Empire"
            }
        },
        {
            "id": 468137199,
            "title": "Changing (feat. Lani Rose)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/laxcitymusic/laxcity-changing-ft-lani-rose",
            "user": {
                "id": 27359474,
                "username": "laxcity"
            }
        },
        {
            "id": 442790691,
            "title": "Mask",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/hanzbeats/mask",
            "user": {
                "id": 207447534,
                "username": "Hanz"
            }
        },
        {
            "id": 466887504,
            "title": "maxd - touch (feat. austin salter) [NEST HQ Premiere]",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/maximemakesmusic/maxd-austin-salter-touch",
            "user": {
                "id": 12980766,
                "username": "maxime."
            }
        },
        {
            "id": 439135125,
            "title": "Hidden Lakes (w/ Joose The Conqueror) (prod. by Martin $ky)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/waldoago/hidden-lakes-w-joose-the-conqueror-prod-by-martin-ky",
            "user": {
                "id": 6055208,
                "username": "WALƒêO"
            }
        },
        {
            "id": 400575042,
            "title": "Limbo Feat. SHOR",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/robotaki/limbo",
            "user": {
                "id": 241149,
                "username": "Robotaki"
            }
        },
        {
            "id": 272737969,
            "title": "Dorian's Dream",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/crayonoff/crayon-dorians-dream",
            "user": {
                "id": 216863,
                "username": "Crayon"
            }
        },
        {
            "id": 423219738,
            "title": "Good Morning",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/laxcitymusic/good-morningthank-you-for-10k",
            "user": {
                "id": 27359474,
                "username": "laxcity"
            }
        },
        {
            "id": 207271505,
            "title": "Mo Vibez - Ciara Flip",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/vibeoutclub/mrp-ciara-flip",
            "user": {
                "id": 137991883,
                "username": "VIBEOUT CLUB"
            }
        },
        {
            "id": 377601788,
            "title": "faded w/ west1ne, otxhello, yugi boi",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/dilipvenkatesh/faded-w-west1ne-otxhello-yugi-boi",
            "user": {
                "id": 156341367,
                "username": "DILIP"
            }
        },
        {
            "id": 379216505,
            "title": "Losing My Love",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/verzache/losing-my-love",
            "user": {
                "id": 71811764,
                "username": "verzache"
            }
        },
        {
            "id": 379728470,
            "title": "SPIRITS",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/evo-auxilium/spirits",
            "user": {
                "id": 34637927,
                "username": "Evo Auxilium"
            }
        },
        {
            "id": 359192009,
            "title": "Happy Gilmore [Prod. Origami Beats]",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mickjenkins/happy-gilmore-prod-origami-beats",
            "user": {
                "id": 19675424,
                "username": "MICK JENKINS"
            }
        },
        {
            "id": 349516807,
            "title": "Stranger Things (Louis Futon Flip)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/louisfutonbeats/stranger-things-louis-futon-flip",
            "user": {
                "id": 305137167,
                "username": "Louis Futon Beats"
            }
        },
        {
            "id": 348566164,
            "title": "Lorde - Homemade Dynamite (Sem Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/whosem/lorde",
            "user": {
                "id": 75845847,
                "username": "who's sem"
            }
        },
        {
            "id": 349526046,
            "title": "Vampire In Brooklyn prod. GreenSLLIME",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mickjenkins/vampire-in-brooklyn",
            "user": {
                "id": 19675424,
                "username": "MICK JENKINS"
            }
        },
        {
            "id": 341351219,
            "title": "attached",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/verzache/attached",
            "user": {
                "id": 71811764,
                "username": "verzache"
            }
        },
        {
            "id": 346264468,
            "title": "Moonlight",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/soberrob/moonlight",
            "user": {
                "id": 123213574,
                "username": "sober rob"
            }
        },
        {
            "id": 344239020,
            "title": "Holding On",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/lapalux/holding-on",
            "user": {
                "id": 181062,
                "username": "Lapalux"
            }
        },
        {
            "id": 340926656,
            "title": "JT Soul - Down The Silhouette Road (jamvvis Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/jamvvis/jt-soul-down-the-silhouette-road-jamvvis-remix",
            "user": {
                "id": 31130424,
                "username": "jamvvis"
            }
        },
        {
            "id": 338268600,
            "title": "HARD üöÄ (w/LSL ‚úò BOYGOLD ‚úò M-PIECE)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/alphainception/genesis-x-lsl-x-boygold-x-m-piece-digital-inferno",
            "user": {
                "id": 129655032,
                "username": "GENESIS"
            }
        },
        {
            "id": 337440463,
            "title": "San Holo & James Vincent McMorrow - The Future (Taska Black Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/bitbird/san-holo-james-vincent-mcmorrow-the-future-taska-black-remix",
            "user": {
                "id": 102435699,
                "username": "bitbird"
            }
        },
        {
            "id": 281176188,
            "title": "clinch",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/west1ne/clinch",
            "user": {
                "id": 7466893,
                "username": "west1ne"
            }
        },
        {
            "id": 333884136,
            "title": "Hudson Lee & Verzache - Fix Me",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/verzache/hudson-lee-verzache-fix-me",
            "user": {
                "id": 71811764,
                "username": "verzache"
            }
        },
        {
            "id": 333039473,
            "title": "floating w/ comodo",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mogotvibez/floating-w-comodo",
            "user": {
                "id": 94358610,
                "username": "Mo Vibez"
            }
        },
        {
            "id": 305737903,
            "title": "Monday",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/hanzbeats/monday",
            "user": {
                "id": 207447534,
                "username": "Hanz"
            }
        },
        {
            "id": 333220591,
            "title": "Your Own Company",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/laxcitymusic/your-own-company",
            "user": {
                "id": 27359474,
                "username": "laxcity"
            }
        },
        {
            "id": 302948033,
            "title": "Underwaterfall",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/bearcubs/underwaterfall",
            "user": {
                "id": 2602232,
                "username": "Bearcubs"
            }
        },
        {
            "id": 315241667,
            "title": "AIRWAV, Akamu, & Shisto - Champloo",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/bydaruma/airwav-akamu-shisto-champloo",
            "user": {
                "id": 11047065,
                "username": "Daruma"
            }
        },
        {
            "id": 315401914,
            "title": "Drunk Feat. Reece",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/robotaki/drunk",
            "user": {
                "id": 241149,
                "username": "Robotaki"
            }
        },
        {
            "id": 315241703,
            "title": "VAGUE003 - lovetokyo",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/bydaruma/vague003-lovetokyo",
            "user": {
                "id": 11047065,
                "username": "Daruma"
            }
        },
        {
            "id": 312354836,
            "title": "blue moon",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/hali0001/blue-moon",
            "user": {
                "id": 100906043,
                "username": "hali"
            }
        },
        {
            "id": 306711134,
            "title": "Weight",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/crywolf/weight",
            "user": {
                "id": 3528180,
                "username": "Crywolf"
            }
        },
        {
            "id": 306666818,
            "title": "hz",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/west1ne/hz-1",
            "user": {
                "id": 7466893,
                "username": "west1ne"
            }
        },
        {
            "id": 305293191,
            "title": "feel so down for",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/vbnd/feel-so-down-for-u",
            "user": {
                "id": 61006167,
                "username": "vbnd"
            }
        },
        {
            "id": 283047258,
            "title": "GTA ft. Vince Staples - Little Bit of This",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/goodtimesaheadmusic/gta-ft-vince-staples-little-bit-of-this",
            "user": {
                "id": 2987587,
                "username": "Good Times Ahead"
            }
        },
        {
            "id": 253875649,
            "title": "DROELOE - zZz",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/bitbird/droeloe-zzz",
            "user": {
                "id": 102435699,
                "username": "bitbird"
            }
        },
        {
            "id": 279534282,
            "title": "With You",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/yoitsloko/high-w-me",
            "user": {
                "id": 213225410,
                "username": "Loko"
            }
        },
        {
            "id": 280250360,
            "title": "tbh, ÌïúÍ∏ÄÏùÄ Ï†ïÎßê Î©ãÏ†∏ Î≥¥Ïù∏Îã§",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/therealbonjr/noticemeoshi",
            "user": {
                "id": 219403684,
                "username": "bonjr"
            }
        },
        {
            "id": 294092924,
            "title": "Promise (w/ adustio)  - STU DRUMKIT VOL 2 - https://sellfy.com/p/DUej/",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/stumusic/promise-w-adustio-1",
            "user": {
                "id": 87814173,
                "username": "STU"
            }
        },
        {
            "id": 125172044,
            "title": "Milo Mills - Sweeter Than Rice Cake",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/milomills/milo-mills-sweeter-than-rice",
            "user": {
                "id": 3639258,
                "username": "MILO MILLS"
            }
        },
        {
            "id": 291071632,
            "title": "AS ABOVE, SO BELOW W/ BABE",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/idstayawaytoo/as-above-so-below-x-babe-1",
            "user": {
                "id": 143019496,
                "username": "IDSTAYAWAYTOO"
            }
        },
        {
            "id": 296532923,
            "title": "Realize (ft. BLANDA)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/soberrob/realize-ft-blanda",
            "user": {
                "id": 123213574,
                "username": "sober rob"
            }
        },
        {
            "id": 295985435,
            "title": "weak",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/herzeloyde/weak",
            "user": {
                "id": 1702771,
                "username": "herzeloyde"
            }
        },
        {
            "id": 294021790,
            "title": "1UP",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/vague000/1up",
            "user": {
                "id": 152218443,
                "username": "VAGUE000"
            }
        },
        {
            "id": 274107129,
            "title": "Nobodies",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/laire/nobodies",
            "user": {
                "id": 149834982,
                "username": "laire"
            }
        },
        {
            "id": 291448117,
            "title": "lost",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/tregsmusic/im-a-little-lost",
            "user": {
                "id": 2178220,
                "username": "tregs"
            }
        },
        {
            "id": 244156679,
            "title": "Berry",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/tregsmusic/berry",
            "user": {
                "id": 2178220,
                "username": "tregs"
            }
        },
        {
            "id": 290460205,
            "title": "Keep it One Step A Day",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mogotvibez/keep-it-one-step-a-day",
            "user": {
                "id": 94358610,
                "username": "Mo Vibez"
            }
        },
        {
            "id": 283403425,
            "title": "the big picture",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/knifegirll/the-big-picture",
            "user": {
                "id": 29993242,
                "username": "KNIFE GIRL"
            }
        },
        {
            "id": 289055619,
            "title": "eli sostre - lean on (thunder6 remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/thundersix/eli-sostre-lean-on-thunder6-remix",
            "user": {
                "id": 198579406,
                "username": "thunder6"
            }
        },
        {
            "id": 289358653,
            "title": "Whethan VS  Oliver Tree - When I'm Down",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/whethan/whenimdown",
            "user": {
                "id": 108856420,
                "username": "Whethan"
            }
        },
        {
            "id": 286380777,
            "title": "three years later",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/wizetheproducer/three-years-later",
            "user": {
                "id": 676359,
                "username": "WIZE"
            }
        },
        {
            "id": 236761146,
            "title": "VAGUE003 - Your Sun Still Burns My Eyes ft. Lilja",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/astariarchives/vague003-your-sun-still-burns-my-eyes",
            "user": {
                "id": 171832743,
                "username": "Astari Archives"
            }
        },
        {
            "id": 283237287,
            "title": "C Y G N Feat. Jazzo - Human Nature",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/ogvfamily/c-y-g-n-feat-jazzo-human-nature",
            "user": {
                "id": 242700047,
                "username": "Only Good Vibes"
            }
        },
        {
            "id": 283173235,
            "title": "SUICIDE",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mirvzh/suicide",
            "user": {
                "id": 40587066,
                "username": "MIRVZH"
            }
        },
        {
            "id": 283329627,
            "title": "falling",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/instupendo/falling",
            "user": {
                "id": 22144015,
                "username": "instupendo"
            }
        },
        {
            "id": 264243222,
            "title": "FORGETMEw/divine.",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/brothelmusic/brotheldivineforgetme",
            "user": {
                "id": 24980742,
                "username": "brothel."
            }
        },
        {
            "id": 280321361,
            "title": "i kno what u want",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/montebooker/iknowhatuwant",
            "user": {
                "id": 41547600,
                "username": "monte booker"
            }
        },
        {
            "id": 280463190,
            "title": "Dope",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mogotvibez/dope",
            "user": {
                "id": 94358610,
                "username": "Mo Vibez"
            }
        },
        {
            "id": 281050338,
            "title": "All Or Nothing (feat. Angelica Bess)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/chrome-sparks/all-or-nothing-feat-angelica-bess",
            "user": {
                "id": 1346791,
                "username": "chrome sparks"
            }
        },
        {
            "id": 224228371,
            "title": "Ticklish - One Day (Enrawn Bootleg)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/stylsslovesyou/ticklish-one-day-enrawn",
            "user": {
                "id": 22486778,
                "username": "STYLSS LOVES YOU"
            }
        },
        {
            "id": 281055949,
            "title": "Lobelia (ft. Weird Inside)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/katuchat/lobelia",
            "user": {
                "id": 30341076,
                "username": "katu"
            }
        },
        {
            "id": 279986087,
            "title": "Fall in Love ft. Ciscero (produced by KAYTRANADA & BadBadNotGood)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/goldlink/fall-in-love-ft-ciscero",
            "user": {
                "id": 6010584,
                "username": "GoldLink"
            }
        },
        {
            "id": 279989691,
            "title": "one thing",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/joshpanii/one-thing",
            "user": {
                "id": 249237724,
                "username": "josh pan ii"
            }
        },
        {
            "id": 279998265,
            "title": "lexus  - STU DRUMKIT VOL 2 - https://sellfy.com/p/DUej/",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/stumusic/lexus-1",
            "user": {
                "id": 87814173,
                "username": "STU"
            }
        },
        {
            "id": 278636622,
            "title": "Spread Love (Prod. by Sango)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mickjenkins/spread-love-prod-by-sango",
            "user": {
                "id": 19675424,
                "username": "MICK JENKINS"
            }
        },
        {
            "id": 278035384,
            "title": "Bel-Air ft. Mick Jenkins - Drive Slow (prod. By Donato)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/nuworld_bel-air/bel-air-ft-mick-jenkins-drive-slow",
            "user": {
                "id": 132237272,
                "username": "NuWorld_Bel-Air"
            }
        },
        {
            "id": 278005711,
            "title": "SPREAD LOVE FT ERIC CHOICE",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/audiopush/spread-love-ft-eric-choice",
            "user": {
                "id": 14053376,
                "username": "Audio Push"
            }
        },
        {
            "id": 277561480,
            "title": "play this at my funeral",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/win32/play-this-at-my-funeral",
            "user": {
                "id": 91517026,
                "username": "win"
            }
        },
        {
            "id": 277260436,
            "title": "Jonah Christian feat. C Y G N & The Xtraordinair$ - Back to the Villa",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/melodysoul/jonah-christian-c-y-g-n-the-xtraordinair-back-to-the-villa",
            "user": {
                "id": 113411598,
                "username": "MelodySoul"
            }
        },
        {
            "id": 275795475,
            "title": "Wander",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mictorrance/wander",
            "user": {
                "id": 10178878,
                "username": "Mic Torrance"
            }
        },
        {
            "id": 276398272,
            "title": "Taptone x Airwav - Above",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/taptone/above",
            "user": {
                "id": 8846741,
                "username": "taptone"
            }
        },
        {
            "id": 275661472,
            "title": "Jade",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mogotvibez/jade-145bpm",
            "user": {
                "id": 94358610,
                "username": "Mo Vibez"
            }
        },
        {
            "id": 263542353,
            "title": "i'm trying to imagine your, your half of this conversation. {}",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/fuckthisurl/asmr",
            "user": {
                "id": 40380190,
                "username": "j^p^n"
            }
        },
        {
            "id": 274974846,
            "title": "Oh Shit!!!",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/injuryreserve/oh-shit",
            "user": {
                "id": 45895213,
                "username": "Injury Reserve"
            }
        },
        {
            "id": 275623820,
            "title": "Descent (prod. ylxr)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/itsmdnt/descent000",
            "user": {
                "id": 23690125,
                "username": "midnight"
            }
        },
        {
            "id": 193103699,
            "title": "pillow talk w/ c y g n",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/appetitesounds/pillow-talk-luminate-x-c-y-g-n",
            "user": {
                "id": 5531472,
                "username": "appetite"
            }
        },
        {
            "id": 275357869,
            "title": "Trust",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/blandamusic/trust",
            "user": {
                "id": 16924920,
                "username": "BLANDA"
            }
        },
        {
            "id": 275340243,
            "title": "kingdom <3",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/williamcrooks/kingdom-3",
            "user": {
                "id": 904751,
                "username": "william crooks"
            }
        },
        {
            "id": 275279606,
            "title": "Ghostboy Feat. Claire Ridgely",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/robotaki/ghostboy-feat-claire-ridgely",
            "user": {
                "id": 241149,
                "username": "Robotaki"
            }
        },
        {
            "id": 272312119,
            "title": "del perro (thank you for 3 million plays <3)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/wizetheproducer/del-perro",
            "user": {
                "id": 676359,
                "username": "WIZE"
            }
        },
        {
            "id": 269927538,
            "title": "Anax",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/swumbeats/anax",
            "user": {
                "id": 2937497,
                "username": "SwuM"
            }
        },
        {
            "id": 275080863,
            "title": "initiation w/ null chloe",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/luiscansino/initiation",
            "user": {
                "id": 106714070,
                "username": "Cansino"
            }
        },
        {
            "id": 274739170,
            "title": "OOKAY - Thief (HABU remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/habumusic/thief-habu-remix",
            "user": {
                "id": 198396320,
                "username": "HABU"
            }
        },
        {
            "id": 274570437,
            "title": "rage logic & sober rob - fragile",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/ragelogic/fragile",
            "user": {
                "id": 6523547,
                "username": "rage logic"
            }
        },
        {
            "id": 273993647,
            "title": "get you alone",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/whereisalex/get-you-alone",
            "user": {
                "id": 141986896,
                "username": "whereisalex"
            }
        },
        {
            "id": 263989881,
            "title": "TOKiMONSTA Star Gazing Coma (2009)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/bedtimelullabies/tokimonsta-star-gazing-coma",
            "user": {
                "id": 226438435,
                "username": "Bedtime Lullabies"
            }
        },
        {
            "id": 273838527,
            "title": "EASTGHOST - Exile",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/bitbird/eastghost-exile-1",
            "user": {
                "id": 102435699,
                "username": "bitbird"
            }
        },
        {
            "id": 273657402,
            "title": "barbershop cartoons",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/montebooker/barbershopcartoons",
            "user": {
                "id": 41547600,
                "username": "monte booker"
            }
        },
        {
            "id": 272557296,
            "title": "vice",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/aywymusic/vice",
            "user": {
                "id": 8181885,
                "username": "aywy"
            }
        },
        {
            "id": 271772048,
            "title": "legacies",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/padillion/legacies",
            "user": {
                "id": 80431618,
                "username": "padillion"
            }
        },
        {
            "id": 273056126,
            "title": "next 2 u",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/dkthepunisher/next-2-u",
            "user": {
                "id": 11969544,
                "username": "dkthepunisher"
            }
        },
        {
            "id": 272654192,
            "title": "chicago ft. j.robb",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/iamwntr/chicago-w-jrobb",
            "user": {
                "id": 21080785,
                "username": "wntr"
            }
        },
        {
            "id": 271883292,
            "title": "fractals",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/cehryl/fractals",
            "user": {
                "id": 56232211,
                "username": "cehryl"
            }
        },
        {
            "id": 272896883,
            "title": "More//Night - London Town",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/goldprospector/morenight-london-town",
            "user": {
                "id": 12042001,
                "username": "GOLD PROSPECTOR"
            }
        },
        {
            "id": 270592877,
            "title": "Blue (feat. Myra Molloy)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/soberrob/blue-feat-myra-molloy",
            "user": {
                "id": 123213574,
                "username": "sober rob"
            }
        },
        {
            "id": 272913987,
            "title": "Lately / The Fall (W/ Ordnry Yngstr)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/legekale/lately-the-fall",
            "user": {
                "id": 148588004,
                "username": "ùêøùëíùëîùëí ‰ºùË™¨"
            }
        },
        {
            "id": 272933629,
            "title": "Quarter [wippy]",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/ianewingmusic/quarter-wippy",
            "user": {
                "id": 9702642,
                "username": "Ian Ewing"
            }
        },
        {
            "id": 273141206,
            "title": "FORGIVE ME",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/swellism/forgive-me",
            "user": {
                "id": 50929434,
                "username": "swell"
            }
        },
        {
            "id": 272887365,
            "title": "long live.",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/instupendo/asap",
            "user": {
                "id": 22144015,
                "username": "instupendo"
            }
        },
        {
            "id": 273351225,
            "title": "chorus howl",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/charles-nimbus/chorus-howl",
            "user": {
                "id": 122861262,
                "username": "charles nimbus"
            }
        },
        {
            "id": 271904976,
            "title": "CANINE",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/dojodojo/canine",
            "user": {
                "id": 10357265,
                "username": "DOJO!"
            }
        },
        {
            "id": 273227525,
            "title": "grieve w/ kyddiekafka",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/supagucci/grieve-w-kyddiekafka",
            "user": {
                "id": 58443498,
                "username": "supagucci"
            }
        },
        {
            "id": 270686525,
            "title": "love sosa",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/eugenecam/love-sosa",
            "user": {
                "id": 99623599,
                "username": "eugene cam"
            }
        },
        {
            "id": 272328110,
            "title": "Smino - Runnin (IAMNOBODI Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/iamnobodi/smino-runnin-iamnobodi-remix",
            "user": {
                "id": 8334954,
                "username": "IAMNOBODI"
            }
        },
        {
            "id": 272144231,
            "title": "aurora",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/s7eelix/aurora",
            "user": {
                "id": 57222452,
                "username": "ig: yungsteelix"
            }
        },
        {
            "id": 272473987,
            "title": "Keyframe w/ Weroh K",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mystdubs/keyframe",
            "user": {
                "id": 803851,
                "username": "Myst"
            }
        },
        {
            "id": 271461249,
            "title": "GHOST (MERAKI)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/amistrngr/ghost-meraki",
            "user": {
                "id": 38737539,
                "username": "STRNGR."
            }
        },
        {
            "id": 272634511,
            "title": "YoAstrum ‚Äì Passage22 (prod. Dreamchild)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/section808/yoastrum-passage22-prod-dreamchild",
            "user": {
                "id": 229290629,
                "username": "Section 808"
            }
        },
        {
            "id": 272308514,
            "title": "The Gateway",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/samgellaitry/the-gateway",
            "user": {
                "id": 892605,
                "username": "sam gellaitry"
            }
        },
        {
            "id": 246229652,
            "title": "KEV & steeziak - Crenshaw Blvd",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/steeziakbeats/kevziak",
            "user": {
                "id": 10845445,
                "username": "steeziak"
            }
        },
        {
            "id": 269930533,
            "title": "balamari",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/rndysvge/rndysvge-balamari",
            "user": {
                "id": 1848149,
                "username": "RNDYSVGE"
            }
        },
        {
            "id": 269653443,
            "title": "It Ain't Full (feat. sober rob & Masego)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/deffiedeff/it-aint-full-feat-sober-rob-masego",
            "user": {
                "id": 1581238,
                "username": "DEFFIE"
            }
        },
        {
            "id": 270653090,
            "title": "Crayon - Flee (feat. Ann Shirley)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/rochemusique/flee-feat-ann-shirley",
            "user": {
                "id": 8880243,
                "username": "Roche Musique"
            }
        },
        {
            "id": 268324485,
            "title": "candy",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/wizetheproducer/candy",
            "user": {
                "id": 676359,
                "username": "WIZE"
            }
        },
        {
            "id": 268562504,
            "title": "Dave B ‚Äî Parallel (Prod. Sango)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/sangobeats/dave-b-parallel-prod-sango",
            "user": {
                "id": 1184201,
                "username": "S√°ngo"
            }
        },
        {
            "id": 269130078,
            "title": "STIMULATE.",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/win32/stimulate",
            "user": {
                "id": 91517026,
                "username": "win"
            }
        },
        {
            "id": 161164561,
            "title": "Gold (w/ MadBliss)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mars_nova/trinidad-james-all-gold-everything-madbliss-mar-nova-remix",
            "user": {
                "id": 60903749,
                "username": "MARSNOVA"
            }
        },
        {
            "id": 265321098,
            "title": "rilla force - youth (baby) (wntr remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/iamwntr/rilla-force-youth-baby-wntr-remix",
            "user": {
                "id": 21080785,
                "username": "wntr"
            }
        },
        {
            "id": 258478986,
            "title": "Speaking Gently",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/badbadnotgood/speaking-gently",
            "user": {
                "id": 11284014,
                "username": "BADBADNOTGOOD"
            }
        },
        {
            "id": 266028792,
            "title": "Thomas White - Drunk Mind, Sober <3 (with RYAN Playground)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/raw-records/thomas-white-drunk-mind-sober-with-ryan-playground",
            "user": {
                "id": 16471779,
                "username": "RAW Records"
            }
        },
        {
            "id": 241120514,
            "title": "Lmo - Bamboo",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/lmo21/bamboo",
            "user": {
                "id": 13314801,
                "username": "Luuk Age"
            }
        },
        {
            "id": 262207432,
            "title": "Burnout [Prod. By Ermahnx]",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/jay2aintshit/burnout",
            "user": {
                "id": 5682160,
                "username": "Jay2"
            }
        },
        {
            "id": 261204083,
            "title": "menu (prod by monte booker)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/sminoworld/menu",
            "user": {
                "id": 104423637,
                "username": "Smino"
            }
        },
        {
            "id": 265526827,
            "title": "C Y G N - Newclear",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/rauthentic/c-y-g-n-newclear",
            "user": {
                "id": 161216609,
                "username": "Rauthentic"
            }
        },
        {
            "id": 265589273,
            "title": "eugene cam x meltycanon - BASTION",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mekaplex/akihabara-x-meltycanon-bastion",
            "user": {
                "id": 123017612,
                "username": "‚òÖ mekaplex ‚òÖ"
            }
        },
        {
            "id": 243955648,
            "title": "Intimate Feat. E.Doza",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/jrjarris/intimate-feat-e-doza",
            "user": {
                "id": 6002429,
                "username": "JR JARRIS"
            }
        },
        {
            "id": 263212542,
            "title": "Good Love (feat. Jay Prince)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/brasstracks/good-love-feat-jay-prince",
            "user": {
                "id": 85976765,
                "username": "Brasstracks"
            }
        },
        {
            "id": 262829366,
            "title": "FOR REAL (Prod. Droc x Tory Lanez x Play Picasso)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/torylanez/for-real",
            "user": {
                "id": 28970722,
                "username": "Tory Lanez"
            }
        },
        {
            "id": 264514399,
            "title": "Goldlink - Celebration Freestyle",
            "embeddable_by": "me",
            "permalink_url": "https://soundcloud.com/squaaashclub/goldlink-celebration-freestyle-prod-by-kaytranada",
            "user": {
                "id": 82415430,
                "username": "Squaaash Club"
            }
        },
        {
            "id": 264582608,
            "title": "DJ Earl & Manny - 'We Do This'",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/180fact/dj-earl-manny-we-do-this",
            "user": {
                "id": 603520,
                "username": "180.Fact"
            }
        },
        {
            "id": 264442968,
            "title": "MYRIA",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/houndsx/myria",
            "user": {
                "id": 149894714,
                "username": "HOUNDS"
            }
        },
        {
            "id": 264617625,
            "title": "Feel Like You",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/blewie17/feel-like-you-2",
            "user": {
                "id": 424551,
                "username": "B. Lewis"
            }
        },
        {
            "id": 263222162,
            "title": "Birocratic x Flamingosis - Passing By",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/flamingosis/birocratic-x-flamingosis-passing-by",
            "user": {
                "id": 1410762,
                "username": "Flamingosis"
            }
        },
        {
            "id": 263882479,
            "title": "vivian",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/pictochat/vivian",
            "user": {
                "id": 2112532,
                "username": "pax"
            }
        },
        {
            "id": 264614649,
            "title": "Hoverboots - Digital Bubblebath",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/goodenuff/hoverboots-digital-bubblebath",
            "user": {
                "id": 204297345,
                "username": "Good Enuff"
            }
        },
        {
            "id": 264462313,
            "title": "some1else [‚Ç™ sleepgod bootleg]",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/sleepgodd/some1else-jetson-bootleg",
            "user": {
                "id": 227256660,
                "username": "jetson as well"
            }
        },
        {
            "id": 260919238,
            "title": "Wild One",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/rgsmmm/wild-one",
            "user": {
                "id": 203738956,
                "username": "RGSM"
            }
        },
        {
            "id": 255288514,
            "title": "03 An Idea (featuring Emmavie, Zacari & Josh J)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/iamnobodi/03-an-idea-featuring-emmavie-zacari-josh-j",
            "user": {
                "id": 8334954,
                "username": "IAMNOBODI"
            }
        },
        {
            "id": 261884426,
            "title": "Pourquoi",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/unexotic/pourquoi-1",
            "user": {
                "id": 8975138,
                "username": "unexotic."
            }
        },
        {
            "id": 262646654,
            "title": "StayLoose & Sober Rob - Science",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/hebinomichi/stelouse-sober-rob-science-1",
            "user": {
                "id": 111063904,
                "username": "Hebinomichi"
            }
        },
        {
            "id": 251715585,
            "title": "Cound Pake",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/laxcitymusic/drake-pound-cake-redo-2",
            "user": {
                "id": 27359474,
                "username": "laxcity"
            }
        },
        {
            "id": 262459386,
            "title": "champion!",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mr_carmack/champion",
            "user": {
                "id": 455369,
                "username": "MR‚Ä¢CAR/\\\\\\\\ACK"
            }
        },
        {
            "id": 261823988,
            "title": "Raiku - Fl√Ωja [Myst Remix]",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mystdubs/flyja-myst-remix",
            "user": {
                "id": 803851,
                "username": "Myst"
            }
        },
        {
            "id": 153965941,
            "title": "Photay - No Sass",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/astronautico/no-sass",
            "user": {
                "id": 23412,
                "username": "Astro Nautico"
            }
        },
        {
            "id": 261173635,
            "title": "Ramzoid - Nature Nature",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/sodaisland/ramzoid-nature-nature",
            "user": {
                "id": 126957743,
                "username": "Soda Island"
            }
        },
        {
            "id": 244930220,
            "title": "graves & Tails. - Vega",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/wearegraves/graves-tails-vega",
            "user": {
                "id": 2170912,
                "username": "graves"
            }
        },
        {
            "id": 259111878,
            "title": "a team thingy",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/jrobbdaproducer/a-team-jrobb-remix",
            "user": {
                "id": 4657451,
                "username": "J.ROBB"
            }
        },
        {
            "id": 261199469,
            "title": "experiences feat. west1ne",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/jamvvis/experiences",
            "user": {
                "id": 31130424,
                "username": "jamvvis"
            }
        },
        {
            "id": 261648377,
            "title": "Dialed Up",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/morenightmusic/dialed-up",
            "user": {
                "id": 6685724,
                "username": "MoreNight"
            }
        },
        {
            "id": 261000676,
            "title": "HELIX",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/gjonesbass/helix",
            "user": {
                "id": 922952,
                "username": "G JONES"
            }
        },
        {
            "id": 260845865,
            "title": "Audiobot - Im Here",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/solasounds/audiobot-im-here",
            "user": {
                "id": 178834336,
                "username": "Sola"
            }
        },
        {
            "id": 246572926,
            "title": "kr√®me br√ªl√©e (prod by monte booker)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/sminoworld/kreme-brulee-prod-by-monte-booker",
            "user": {
                "id": 104423637,
                "username": "Smino"
            }
        },
        {
            "id": 259886037,
            "title": "deception",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/herzeloyde/deception",
            "user": {
                "id": 1702771,
                "username": "herzeloyde"
            }
        },
        {
            "id": 220696490,
            "title": "Skit x Kareful - Luminoscity",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/skit/skit-x-kareful-luminoscity-xo",
            "user": {
                "id": 1031935,
                "username": "Skit‡§™‡•ç‡§∞‡§π‡§∏‡§®"
            }
        },
        {
            "id": 260089435,
            "title": "moves in circles",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/falls-2/moves-in-circles",
            "user": {
                "id": 56058641,
                "username": "falls"
            }
        },
        {
            "id": 260097092,
            "title": "girls like u",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/beartrapsound/girls-like-u",
            "user": {
                "id": 9011647,
                "username": "beartrap sound"
            }
        },
        {
            "id": 260841663,
            "title": "Airwav & Jbell - 100M",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/solasounds/airwav-jbell-100m",
            "user": {
                "id": 178834336,
                "username": "Sola"
            }
        },
        {
            "id": 260826031,
            "title": "CORNERSTORE (Ft. Saba & theMIND)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/joey-purp/cornerstore-ft-saba-themind-1",
            "user": {
                "id": 40074118,
                "username": "Joey Purp"
            }
        },
        {
            "id": 219084783,
            "title": "Drake - Marvins Room // Oshi Redo",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/carly_catt/drake-marvins-room-oshi-redo",
            "user": {
                "id": 73666492,
                "username": "carly_catt"
            }
        },
        {
            "id": 257129917,
            "title": "Back 2 U [prod. Wonya Love]",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/joeygattotv/back-2-u",
            "user": {
                "id": 2528256,
                "username": "Joey Gatto"
            }
        },
        {
            "id": 257862505,
            "title": "Missy Elliot ‚Äì Lick Shots (Grey Killer RMX)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/grey-killer/missy-elliot-lick-shots-grey-killer-remx",
            "user": {
                "id": 23115665,
                "username": "Grey Killer"
            }
        },
        {
            "id": 256757832,
            "title": "Modern Romance (feat. JNTHN STEIN)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/iamdot/dot-modern-romance-feat-jnthn-stein",
            "user": {
                "id": 2305025,
                "username": "dot"
            }
        },
        {
            "id": 257528666,
            "title": "Saverem's Beat",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/spiralssydney/04-saverems-beat",
            "user": {
                "id": 25054469,
                "username": "SPIRALS"
            }
        },
        {
            "id": 249720975,
            "title": "David .",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/kingnamedsol/david-1",
            "user": {
                "id": 7749744,
                "username": "Kns"
            }
        },
        {
            "id": 249742652,
            "title": "Rikki (feat. Rahmaan) [Prod. DILIP]",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/iamdeverano/rikki",
            "user": {
                "id": 36090288,
                "username": "Deverano"
            }
        },
        {
            "id": 257446487,
            "title": "TWOsDAY II",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/twofreshbeats/twosday-ii-1",
            "user": {
                "id": 465863,
                "username": "TWO FRESH."
            }
        },
        {
            "id": 256400441,
            "title": "whisp",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/lunartalk/whisp",
            "user": {
                "id": 132162116,
                "username": "lunar vision"
            }
        },
        {
            "id": 256289237,
            "title": "VAGUE003 - We Won't Speak Like This Again",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/bydaruma/vague003-we-wont-speak-like-this-again",
            "user": {
                "id": 11047065,
                "username": "Daruma"
            }
        },
        {
            "id": 256282464,
            "title": "St√©Louse - Zone",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/bydaruma/stelouse-zone",
            "user": {
                "id": 11047065,
                "username": "Daruma"
            }
        },
        {
            "id": 245102927,
            "title": "Bon Voyage",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/tonton/bon-voyage",
            "user": {
                "id": 109191881,
                "username": "Tonton"
            }
        },
        {
            "id": 252345650,
            "title": "Better Days",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/grey-killer/better-dayss",
            "user": {
                "id": 23115665,
                "username": "Grey Killer"
            }
        },
        {
            "id": 250109962,
            "title": "KR - Complicated (Prod. by Tim Suby)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/whokr/kr-complicated-prod-by-tim-suby",
            "user": {
                "id": 79480461,
                "username": "KR RADIO"
            }
        },
        {
            "id": 254695921,
            "title": "I FEEL YOUR PAIN (feat. D.R.A.M. & Mabel)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/sbtrkt/i-feel-your-pain-feat-dram-mabel",
            "user": {
                "id": 68181,
                "username": "SBTRKT"
            }
        },
        {
            "id": 254342247,
            "title": "ElijahPrice",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/rndysvge/elijahprice",
            "user": {
                "id": 1848149,
                "username": "RNDYSVGE"
            }
        },
        {
            "id": 254684515,
            "title": "Healer (feat. GoldLink)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/moxieraia/healer-feat-goldlink",
            "user": {
                "id": 56056409,
                "username": "Moxie Raia"
            }
        },
        {
            "id": 232076856,
            "title": "Green [demo]",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/omarijazz/green-demo-thanks-guys",
            "user": {
                "id": 1931488,
                "username": "Omari Jazz"
            }
        },
        {
            "id": 253684450,
            "title": "The Mood",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/kaelyn/themood",
            "user": {
                "id": 87706847,
                "username": "Kaelyn"
            }
        },
        {
            "id": 251881468,
            "title": "SAFARI",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/anubiiis/safari",
            "user": {
                "id": 48573704,
                "username": "ANUBIS-XIII"
            }
        },
        {
            "id": 243473065,
            "title": "tonight",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/west1ne/tonight",
            "user": {
                "id": 7466893,
                "username": "west1ne"
            }
        },
        {
            "id": 225339643,
            "title": "Caught Up - Milly Manson [Prod By. Eestbound]",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/eestbound/caught-up-milly-manson-prod-by-eestbound",
            "user": {
                "id": 39018652,
                "username": "EestBound"
            }
        },
        {
            "id": 252191674,
            "title": "VAGUE001givesnofuckstyperemix - Happy Waka, Sad Waka",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/vague000/vague001givesnofuckstyperemix-happy-waka-sad-waka",
            "user": {
                "id": 152218443,
                "username": "VAGUE000"
            }
        },
        {
            "id": 252352630,
            "title": "Flapo - Dear Neighbor (feat. Jenni Potts) (Pham Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/itspham/flapo",
            "user": {
                "id": 171248497,
                "username": "Pham"
            }
        },
        {
            "id": 251851427,
            "title": "Fabian Mazur - Thinking Bout U",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/elysianrecords/fabian-mazur-thinking-bout-u",
            "user": {
                "id": 99300046,
                "username": "elysian."
            }
        },
        {
            "id": 251202264,
            "title": "We Do This Shit",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/modsun/we-do-this-shit",
            "user": {
                "id": 1922213,
                "username": "Mod Sun"
            }
        },
        {
            "id": 247081574,
            "title": "lets get in formation",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/vague001/lets-get-in-formation",
            "user": {
                "id": 44878596,
                "username": "VAGUE001"
            }
        },
        {
            "id": 236681937,
            "title": "FF",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/kirankai/snug",
            "user": {
                "id": 43303637,
                "username": "Kiran Kai"
            }
        },
        {
            "id": 250777751,
            "title": "BLANDA & SINEPHRO - Relief",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/blandamusic/blanda-x-sinephro-relief",
            "user": {
                "id": 16924920,
                "username": "BLANDA"
            }
        },
        {
            "id": 249737659,
            "title": "Prismo - Senses (Whispa Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/chill/prismo-senses-whispa-remix",
            "user": {
                "id": 74594593,
                "username": "Hegemon: Chinchilla"
            }
        },
        {
            "id": 250707877,
            "title": "HXV - NEEDED ME RMX",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/heroesxvillains/hxv-needed-me-rmx",
            "user": {
                "id": 1415004,
                "username": "HXV"
            }
        },
        {
            "id": 242432425,
            "title": "Creepa x Mo Vibez x Paisan - Dimensions",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/thisiscreepa/creepa-x-mo-vibez-x-flint-beastwood-dimensions",
            "user": {
                "id": 1830057,
                "username": "Creepa"
            }
        },
        {
            "id": 250538475,
            "title": "Home",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/sorare/home-1",
            "user": {
                "id": 21808369,
                "username": "rare"
            }
        },
        {
            "id": 243100979,
            "title": "Odd Future",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/jahkoy/oddfuture",
            "user": {
                "id": 4122084,
                "username": "JAHKOY"
            }
        },
        {
            "id": 249364078,
            "title": "VAGUE001 - dare i say you're killing me",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/vague000/dare-i-say-youre-killing-me-1",
            "user": {
                "id": 152218443,
                "username": "VAGUE000"
            }
        },
        {
            "id": 250049103,
            "title": "motion",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/officialmedasin/motion",
            "user": {
                "id": 21695387,
                "username": "medasin"
            }
        },
        {
            "id": 220845888,
            "title": "Everything Above",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/ravynlenaesounds/everything-aboveprod-by-monte-booker",
            "user": {
                "id": 130867429,
                "username": "Ravyn Lenae"
            }
        },
        {
            "id": 249844431,
            "title": "Holly & Hounds - Heckler",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/hollyhollys/holly-hounds-heckler",
            "user": {
                "id": 62258473,
                "username": "HOLLY"
            }
        },
        {
            "id": 231160275,
            "title": "slow hours",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/weirdinside/slow-hours",
            "user": {
                "id": 67436159,
                "username": "weird inside"
            }
        },
        {
            "id": 245273240,
            "title": "Atman - Beautiful",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/morethanrecs/atman-beautiful",
            "user": {
                "id": 122637617,
                "username": "More Than Records"
            }
        },
        {
            "id": 248192656,
            "title": "SEQUESTERED",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/deadwint3r/sequestered",
            "user": {
                "id": 14917061,
                "username": "deadwinter"
            }
        },
        {
            "id": 248360627,
            "title": "Losi - WUZU",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/bitbird/losi-wuzu-1",
            "user": {
                "id": 102435699,
                "username": "bitbird"
            }
        },
        {
            "id": 248436960,
            "title": "matt",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/harriscole/matt",
            "user": {
                "id": 20194131,
                "username": "harris cole"
            }
        },
        {
            "id": 205914960,
            "title": "JNTHN STEIN - Float (feat. G.L.A.M.)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/wearealaya/jnthn-stein-float-feat-g-l-a-m",
            "user": {
                "id": 5455161,
                "username": "alaya"
            }
        },
        {
            "id": 245985649,
            "title": "goodbye lonely",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/williamcrooks/goodbye-lonely",
            "user": {
                "id": 904751,
                "username": "william crooks"
            }
        },
        {
            "id": 47025892,
            "title": "Nothing Thought",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/sonnymoonmusic/nothing-thought",
            "user": {
                "id": 5193836,
                "username": "Sonnymoon"
            }
        },
        {
            "id": 247202480,
            "title": "Daybreak",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/electricmantis/daybreak",
            "user": {
                "id": 2730329,
                "username": "Electric Mantis"
            }
        },
        {
            "id": 245265683,
            "title": "Point Point - F+L",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/pointpoint/point-point-fplusl",
            "user": {
                "id": 27741504,
                "username": "Point Point"
            }
        },
        {
            "id": 245099572,
            "title": "jumpoff",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/iamwntragain/jumpoff",
            "user": {
                "id": 7782866,
                "username": "wntr‚ÇÇ"
            }
        },
        {
            "id": 218039697,
            "title": "Bout It w/ TEK.LUN",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/aywymusic/bout-it-w-teklun",
            "user": {
                "id": 8181885,
                "username": "aywy"
            }
        },
        {
            "id": 246044335,
            "title": "Her",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/vincent_official/her",
            "user": {
                "id": 22944258,
                "username": "Vincent"
            }
        },
        {
            "id": 245813663,
            "title": "possible",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/montell2099/possible",
            "user": {
                "id": 7587103,
                "username": "montell2099"
            }
        },
        {
            "id": 244061081,
            "title": "Mercury Rising Feat. Nico Segal and Sylvie Grace (Prod. by THEMpeople)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/themindmusic/mercury-rising-prod-by-thempeople",
            "user": {
                "id": 22598928,
                "username": "theMIND"
            }
        },
        {
            "id": 244949554,
            "title": "Courtesy (ft. Dj Heroin)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/carlmmmusic/courtesy-ft-dj-heroin",
            "user": {
                "id": 63375,
                "username": "cvrl (carl)"
            }
        },
        {
            "id": 243933602,
            "title": "OCEANDRIVE",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/kempeh/oceandrive",
            "user": {
                "id": 1105487,
                "username": "Kempeh"
            }
        },
        {
            "id": 242302416,
            "title": "Level Up",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/ftureable/level-up",
            "user": {
                "id": 4285975,
                "username": "Ftureable"
            }
        },
        {
            "id": 237602254,
            "title": "10 Bands [Remix]",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/chris-havok/10-bands",
            "user": {
                "id": 62149188,
                "username": "Chris Havok"
            }
        },
        {
            "id": 192012024,
            "title": "Toro Y Moi -  Buffalo",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/carparkrecords/toro-y-moi-buffalo",
            "user": {
                "id": 665379,
                "username": "Carpark Records"
            }
        },
        {
            "id": 242108439,
            "title": "Pham - Off the Chair (ft. Mayowa)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/hip-hop/pham-off-the-chair-mayo",
            "user": {
                "id": 52641014,
                "username": "Hip-Hop"
            }
        },
        {
            "id": 243728019,
            "title": "i love you",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/amah_music/i-love-you",
            "user": {
                "id": 19205967,
                "username": "Amah"
            }
        },
        {
            "id": 228432510,
            "title": "yvonne (ft. WTCHCRFT)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/vague003/yvonne-ft-wtchcrft",
            "user": {
                "id": 1921005,
                "username": "VAGUE003"
            }
        },
        {
            "id": 215845356,
            "title": "sacred",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/alfonzaaberg/sacred",
            "user": {
                "id": 31854931,
                "username": "alfon zaaberg | EMP ÿ£ÿ¨ŸÜÿ®Ÿä"
            }
        },
        {
            "id": 229744672,
            "title": "Monte Booker - Baby Ft. Ravyn Lenae",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/soulection/monte-booker-baby-ft-ravyn-lenae",
            "user": {
                "id": 483960,
                "username": "SOULECTION"
            }
        },
        {
            "id": 243221766,
            "title": "Tom Misch & Carmody - Easy Love",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/tommisch/tom-misch-carmody-easy-love",
            "user": {
                "id": 2019686,
                "username": "Tom Misch"
            }
        },
        {
            "id": 242571420,
            "title": "GoldLink - Zipporah (Gravez Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/gravez/goldlink-zipporah-gravez-remix-1",
            "user": {
                "id": 111907102,
                "username": "Gravez"
            }
        },
        {
            "id": 242449318,
            "title": "Babe",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/sorare/babe-1",
            "user": {
                "id": 21808369,
                "username": "rare"
            }
        },
        {
            "id": 242539038,
            "title": "NO MORE PARTIES IN L.A. FEAT. KENDRICK LAMAR",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/kanyewest/nomorepartiesinla",
            "user": {
                "id": 174006135,
                "username": "Kanye West"
            }
        },
        {
            "id": 242135194,
            "title": "Louis The Child Feat. K.Flay - It's Strange (CRNKN Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/nextwaverecs/louis-the-child-feat-kflay-its-strange-crnkn-remix",
            "user": {
                "id": 98827620,
                "username": "Next Wave"
            }
        },
        {
            "id": 239121841,
            "title": "separated",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/oshi/separated",
            "user": {
                "id": 33814476,
                "username": "oshi"
            }
        },
        {
            "id": 197817156,
            "title": "sailent ft. strngr",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mirvzh/sailentftstrngr",
            "user": {
                "id": 40587066,
                "username": "MIRVZH"
            }
        },
        {
            "id": 241462534,
            "title": "DROELOE - Make My Day",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/bitbird/droeloe-make-my-day-1",
            "user": {
                "id": 102435699,
                "username": "bitbird"
            }
        },
        {
            "id": 238332171,
            "title": "I'm sorry (feat. shiloh)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/swellism/im-sorry-feat-shiloh-dynasty",
            "user": {
                "id": 50929434,
                "username": "swell"
            }
        },
        {
            "id": 240382012,
            "title": "trust",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/othellohou/trust",
            "user": {
                "id": 21841190,
                "username": "otxhello"
            }
        },
        {
            "id": 240662158,
            "title": "C Y G N - She Left Me",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/inchpersecond/c-y-g-n-she-left-me",
            "user": {
                "id": 114047355,
                "username": "InchPerSecond"
            }
        },
        {
            "id": 240734313,
            "title": "Ayahuasca w/ Airwav",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/stayloosemusic/ayahuasca-w-airwav",
            "user": {
                "id": 54673479,
                "username": "St√©Louse | StayLoose"
            }
        },
        {
            "id": 225845905,
            "title": "no more heroes",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/weirdinside/nomoreheroes",
            "user": {
                "id": 67436159,
                "username": "weird inside"
            }
        },
        {
            "id": 240615414,
            "title": "who knows?",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/weirdinside/wk2",
            "user": {
                "id": 67436159,
                "username": "weird inside"
            }
        },
        {
            "id": 227209003,
            "title": "2099 flow",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/montebooker/2099flow",
            "user": {
                "id": 41547600,
                "username": "monte booker"
            }
        },
        {
            "id": 233212931,
            "title": "new chapter",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/montebooker/newchapter",
            "user": {
                "id": 41547600,
                "username": "monte booker"
            }
        },
        {
            "id": 240258138,
            "title": "Parkinson White - '97 [Free DL]",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/parkinsonwhite/parkinson-white-97-free-dl",
            "user": {
                "id": 64656840,
                "username": "Parkinson White"
            }
        },
        {
            "id": 239793212,
            "title": "Wonderful Ft.The Weeknd",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/travisscott-2/wonderful-ftthe-weeknd",
            "user": {
                "id": 40174345,
                "username": "Travis Scott"
            }
        },
        {
            "id": 226363302,
            "title": "Architect",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/myrne/architect",
            "user": {
                "id": 18691658,
                "username": "MYRNE"
            }
        },
        {
            "id": 239188867,
            "title": "Carol w/ Sober Rob",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/luximpala/carol-w-sober-rob",
            "user": {
                "id": 161517541,
                "username": "lux.impala"
            }
        },
        {
            "id": 238194627,
            "title": "Ache",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/eastghost/ache",
            "user": {
                "id": 7333116,
                "username": "Eastghost"
            }
        },
        {
            "id": 237314431,
            "title": "naz. & .disfnk - Perfecto. (ft. Daniela Andrade)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/disfnk/perfecto",
            "user": {
                "id": 22113859,
                "username": ".disfnk"
            }
        },
        {
            "id": 205676057,
            "title": "freak no mas",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/rndysvge/freak-no-mas",
            "user": {
                "id": 1848149,
                "username": "RNDYSVGE"
            }
        },
        {
            "id": 162698253,
            "title": "aywy & Ekali - Your Love",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/aywymusic/aywy-ekali-your-love",
            "user": {
                "id": 8181885,
                "username": "aywy"
            }
        },
        {
            "id": 237193943,
            "title": "Dirty Chocolate - Flutter",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/secretstash/dirty-chocolate-flutter",
            "user": {
                "id": 36229295,
                "username": "Secret Stash"
            }
        },
        {
            "id": 237103236,
            "title": "you w/ montell2099",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/herzeloyde/you-w-montell2099",
            "user": {
                "id": 1702771,
                "username": "herzeloyde"
            }
        },
        {
            "id": 193009190,
            "title": "Nachtzug",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/hnrk93/nachtzug",
            "user": {
                "id": 18849598,
                "username": "hnrk"
            }
        },
        {
            "id": 169971370,
            "title": "Joey Bada$$ - \\"Christ Conscious\\" (Prod. by Basquiat)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/proeraradio/joey-bada-christ-conscious-prod-by-basquiat-1",
            "user": {
                "id": 7071549,
                "username": "PRO ERA RECORDS."
            }
        },
        {
            "id": 236431784,
            "title": "ALL IN (Prod. Kaytranada)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/govales/all-in-prod-kaytranada",
            "user": {
                "id": 37695246,
                "username": "GOVALES"
            }
        },
        {
            "id": 236417597,
            "title": "myleaf ft. sosi",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/drip-133/myleaf-ft-sosi",
            "user": {
                "id": 27218273,
                "username": "drip-133"
            }
        },
        {
            "id": 236519385,
            "title": "And Sooner Than We Know It... (Psymun Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/morlymusic/and-sooner-than-we-know-it-psymun-remix",
            "user": {
                "id": 30993092,
                "username": "Morly"
            }
        },
        {
            "id": 235635694,
            "title": "Koto",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/awe/koto",
            "user": {
                "id": 25279198,
                "username": "AWE"
            }
        },
        {
            "id": 235611244,
            "title": "Helena's Skin",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/fiftygrand/helenas-skin",
            "user": {
                "id": 9871727,
                "username": "fifty grand"
            }
        },
        {
            "id": 165464821,
            "title": "Body Not Your Mind",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/thomasallenaudio/body-not-your-mind-no-vocals",
            "user": {
                "id": 1731022,
                "username": "Thomas   Allen"
            }
        },
        {
            "id": 181361428,
            "title": "I Forgive",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/grynpyret/i-forgive",
            "user": {
                "id": 7098329,
                "username": "Grynpyret"
            }
        },
        {
            "id": 216439988,
            "title": "Colder",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/trshlrd/colder",
            "user": {
                "id": 43879096,
                "username": "Trash Lord"
            }
        },
        {
            "id": 234292033,
            "title": "Like What?",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/tennysonmusic/likewhat",
            "user": {
                "id": 5326994,
                "username": "tennyson"
            }
        },
        {
            "id": 233404661,
            "title": "you hurt me (prod. antonio) part 1",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/cats-kill/you-hurt-me-when-you-pulled-up-prod-antonio-part-1",
            "user": {
                "id": 4819303,
                "username": "Jimmy V"
            }
        },
        {
            "id": 233472457,
            "title": "KRANE x West Metro - Pools [SESSIONS_01.4]",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/kranesessions/pools-sessions_014",
            "user": {
                "id": 184758911,
                "username": "SESSIONS"
            }
        },
        {
            "id": 233535393,
            "title": "Slipperz",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/tennysonmusic/slipperz",
            "user": {
                "id": 5326994,
                "username": "tennyson"
            }
        },
        {
            "id": 233491762,
            "title": "strngr. - left behind",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/bydaruma/strngr-left-behind",
            "user": {
                "id": 11047065,
                "username": "Daruma"
            }
        },
        {
            "id": 233491813,
            "title": "Lege Kale - Syzurp (w/ KMB, OY, Amazing Prophet)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/bydaruma/lege-kale-syzurp-w-kmb-oy-amazing-prophet",
            "user": {
                "id": 11047065,
                "username": "Daruma"
            }
        },
        {
            "id": 233493965,
            "title": "JNTHN STEIN - CMPRSSN",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/jnthnstein/cmprssn",
            "user": {
                "id": 3010673,
                "username": "JNTHN STEIN"
            }
        },
        {
            "id": 232696119,
            "title": "Silk (feat. Senojnayr)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/escents/silk",
            "user": {
                "id": 13663109,
                "username": "MadBliss"
            }
        },
        {
            "id": 231754914,
            "title": "one day",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/harriscole/one-day",
            "user": {
                "id": 20194131,
                "username": "harris cole"
            }
        },
        {
            "id": 232620966,
            "title": "Sango -  Dias Melhores (InterluÃÅdio)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/soulection/sango-dias-melhores-interludio",
            "user": {
                "id": 483960,
                "username": "SOULECTION"
            }
        },
        {
            "id": 231846569,
            "title": "pure earth (prod. falls)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/abbipress/pure-earth-prod-falls",
            "user": {
                "id": 951235,
                "username": "Abbi Press"
            }
        },
        {
            "id": 232126745,
            "title": "nostalgia",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/kvnisblack/nostalgia",
            "user": {
                "id": 75880639,
                "username": "KVN AUST"
            }
        },
        {
            "id": 231552148,
            "title": "GoldLink - New Black",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/soulection/goldlink-new-black",
            "user": {
                "id": 483960,
                "username": "SOULECTION"
            }
        },
        {
            "id": 231460025,
            "title": "Morgan Freeman",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/joey-purp/morgan-freemanlbmix3-1",
            "user": {
                "id": 40074118,
                "username": "Joey Purp"
            }
        },
        {
            "id": 211590791,
            "title": "Round Whippin'",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/achal/round_whippin",
            "user": {
                "id": 4155414,
                "username": "A.CHAL"
            }
        },
        {
            "id": 230659433,
            "title": "The One",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/electricmantis/the-one",
            "user": {
                "id": 2730329,
                "username": "Electric Mantis"
            }
        },
        {
            "id": 222868440,
            "title": "Boiling Blood",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/thefaded/boiling-blood",
            "user": {
                "id": 3262296,
                "username": "thefaded."
            }
        },
        {
            "id": 230564438,
            "title": "DEFFIE + ROM - Jumpsuit 2 (Das Bae)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/deffiedeff/deffie-rom-jumpsuit-2-das-bae",
            "user": {
                "id": 1581238,
                "username": "DEFFIE"
            }
        },
        {
            "id": 230354436,
            "title": "FYAYWAS",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/jnthnstein/fyaywas",
            "user": {
                "id": 3010673,
                "username": "JNTHN STEIN"
            }
        },
        {
            "id": 230230333,
            "title": "Joey Purp, Vic Mensa & Two Fresh - Still Got It",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/maddecent/joey-purp-vic-mensa-two-fresh-still-got-it",
            "user": {
                "id": 14730,
                "username": "Mad Decent"
            }
        },
        {
            "id": 140231107,
            "title": "Point Point - Life In Grey",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/pointpoint/life-in-grey",
            "user": {
                "id": 27741504,
                "username": "Point Point"
            }
        },
        {
            "id": 228511715,
            "title": "Kasbo - World Away",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/foreignfamily/world-away",
            "user": {
                "id": 128082007,
                "username": "Foreign Family Collective"
            }
        },
        {
            "id": 229965816,
            "title": "pure light",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/nu_meta/pure-light",
            "user": {
                "id": 42467630,
                "username": "[nu-meta.]"
            }
        },
        {
            "id": 230070230,
            "title": "nebula (100K free download)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/samgellaitry/nebula-100k-free-downlad",
            "user": {
                "id": 892605,
                "username": "sam gellaitry"
            }
        },
        {
            "id": 160405250,
            "title": "Only U",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/misogi/only-u",
            "user": {
                "id": 55596316,
                "username": "MISOGI"
            }
        },
        {
            "id": 226892711,
            "title": "Solace (Evo Auxilium Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/lukesuperior/solace-evo-auxilium-remix",
            "user": {
                "id": 9145615,
                "username": "Luke Superior"
            }
        },
        {
            "id": 228367236,
            "title": "Melanie Martinez - Soap (Gladiator Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/wearebigbeat/melanie-martinez-soap-gladiator-remix",
            "user": {
                "id": 2638734,
                "username": "Big Beat Records"
            }
        },
        {
            "id": 228418807,
            "title": "null",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/officialmedasin/null-1",
            "user": {
                "id": 21695387,
                "username": "medasin"
            }
        },
        {
            "id": 228386081,
            "title": "must be it ft. louis",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/sys_tem/must-be-it-ft-louis",
            "user": {
                "id": 2156967,
                "username": "system"
            }
        },
        {
            "id": 228388201,
            "title": "HudMo - Forever 1 (Cashmere Cat Edit)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/cashmerecat/forevercashmere",
            "user": {
                "id": 3436341,
                "username": "CASHMERE CAT"
            }
        },
        {
            "id": 190259720,
            "title": "Crystal Cavern",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/dirtychocolate/crystal-cavern",
            "user": {
                "id": 3123507,
                "username": "lowlife"
            }
        },
        {
            "id": 228276534,
            "title": "Quiet Minds feat. Emily",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/fekibeats/feki-quiet-minds-feat-emily",
            "user": {
                "id": 10687538,
                "username": "Feki"
            }
        },
        {
            "id": 228383381,
            "title": "Two Fresh - For The World (feat. Njomza)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/maddecent/two-fresh-for-the-world-feat-njomza",
            "user": {
                "id": 14730,
                "username": "Mad Decent"
            }
        },
        {
            "id": 225046946,
            "title": "Ryan Hemsworth & Lucas - From Grace",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/shhsecretsongs/fromgrace",
            "user": {
                "id": 92183354,
                "username": "Secret Songs"
            }
        },
        {
            "id": 227834799,
            "title": "Fifty Grand - Asphodel",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/abandoned-for-now/fifty-grand-asphodel",
            "user": {
                "id": 126518895,
                "username": "„Ö§„Ö§„Ö§"
            }
        },
        {
            "id": 227318766,
            "title": "Iglooghost - 'Gold Coat (ft. Cuushe)'",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/brainfeeder/iglooghost-gold-coat",
            "user": {
                "id": 570385,
                "username": "BRAINFEEDER"
            }
        },
        {
            "id": 227110946,
            "title": "found",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/montell2099/found",
            "user": {
                "id": 7587103,
                "username": "montell2099"
            }
        },
        {
            "id": 224909267,
            "title": "Matter w/ TEK.LUN",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/fortune_beats/matter-w-teklun",
            "user": {
                "id": 44096802,
                "username": "FORTUNE"
            }
        },
        {
            "id": 216772566,
            "title": "Drama (Ft. Drake)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/roywoodsofficial/drama-feat-drake",
            "user": {
                "id": 8690456,
                "username": "Roy Woods"
            }
        },
        {
            "id": 227097464,
            "title": "u know what i need",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/octbr/u-know-what-i-need",
            "user": {
                "id": 67048324,
                "username": "octbr"
            }
        },
        {
            "id": 226881841,
            "title": "Don't leave me",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/lunartalk/dont-leave-me",
            "user": {
                "id": 132162116,
                "username": "lunar vision"
            }
        },
        {
            "id": 226456212,
            "title": "Giraffage & Viceroy -  Impression Of You (LUCA LUSH Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/lucalush/impressionofyou-lucalush",
            "user": {
                "id": 1007622,
                "username": "ùêãùêîùêÇùêÄ ùêãùêîùêíùêá"
            }
        },
        {
            "id": 224338173,
            "title": "That Way (Prod. KINGBNJMN & H&D)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/lifenhd/that-way-produced-by-bnjmn-hd",
            "user": {
                "id": 15620320,
                "username": "MVLIK HD"
            }
        },
        {
            "id": 212257367,
            "title": "brkensub",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/damacha/u-got-aids",
            "user": {
                "id": 4646881,
                "username": "Damacha"
            }
        },
        {
            "id": 226064523,
            "title": "Wave Racer - World Record feat. Lido",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/futureclassic/wave-racer-world-record-feat-lido",
            "user": {
                "id": 375,
                "username": "future classic"
            }
        },
        {
            "id": 225434218,
            "title": "Foals x Honne - No Place Like Spanish Sahara (Golden Vessel Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/golden-vessel/foals-x-honne-no-place-like-spanish-sahara-golden-vessel-remix",
            "user": {
                "id": 49977151,
                "username": "Golden Vessel"
            }
        },
        {
            "id": 203728248,
            "title": "Jeremih - Fuck You All The Time (Pham Flip)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/wctt/jeremih-fuck-you-all-the-time-pham-flip",
            "user": {
                "id": 150127613,
                "username": "We Call This Trap"
            }
        },
        {
            "id": 141597808,
            "title": "Travis Scott - Uptown Ft. ASAP Ferg",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mallory-lowe/travis-scott-uptown-ft-asap",
            "user": {
                "id": 66897199,
                "username": "Mallory Lowe"
            }
        },
        {
            "id": 129394144,
            "title": "\\"Without You\\", Lapalux.",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/musiciansdomusic/without-you-lapalux",
            "user": {
                "id": 3404356,
                "username": "Do you like music?"
            }
        },
        {
            "id": 122327378,
            "title": "Alina Baraz & Galimatias - Make You Feel",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/galimatias/alina-baraz-galimatias-make",
            "user": {
                "id": 488287,
                "username": "Galimatias"
            }
        },
        {
            "id": 162740117,
            "title": "intro (prod. Curtis Heron & Thestandard)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/spookycorbin/01-intro-prod-curtis-heron",
            "user": {
                "id": 25195365,
                "username": "corbin"
            }
        },
        {
            "id": 219999794,
            "title": "if only this swing can take us higher",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/smittythebg/if-only-this-swing-can-take-us-higher",
            "user": {
                "id": 5460910,
                "username": "smitty the bg"
            }
        },
        {
            "id": 225872515,
            "title": "Medasin ~ Spacehead",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/noirsound/spacehead",
            "user": {
                "id": 135499232,
                "username": "Film Noir Sound"
            }
        },
        {
            "id": 225594700,
            "title": "COMA",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/evo-auxilium/coma",
            "user": {
                "id": 34637927,
                "username": "Evo Auxilium"
            }
        },
        {
            "id": 225228233,
            "title": "Solitaire",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/fiancedelaware/solitaire",
            "user": {
                "id": 38872945,
                "username": "fianc√©"
            }
        },
        {
            "id": 221173528,
            "title": "Danny Brown - I Will (Pham Flip)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/absthetic/danny-brown-i-will-pham-flip",
            "user": {
                "id": 80483994,
                "username": "Absthetic"
            }
        },
        {
            "id": 224799335,
            "title": "whereisalex ~ S E P A R A T E",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/noirsound/separate",
            "user": {
                "id": 135499232,
                "username": "Film Noir Sound"
            }
        },
        {
            "id": 194214267,
            "title": "Sad Bitch",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/arca1000000/sad-bitch-official-audio",
            "user": {
                "id": 3201738,
                "username": "Arca"
            }
        },
        {
            "id": 224901149,
            "title": "MEDASIN - Silver",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/elysianrecords/medasin-silver",
            "user": {
                "id": 99300046,
                "username": "elysian."
            }
        },
        {
            "id": 181709165,
            "title": "all.i.do",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/herzeloyde/allido",
            "user": {
                "id": 1702771,
                "username": "herzeloyde"
            }
        },
        {
            "id": 181467402,
            "title": "\\"Stevie Wonder\\" ft Chance The Rapper",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/boob7/stevie-wonder-ft-chance-the-rapper",
            "user": {
                "id": 5993221,
                "username": "LUCKI"
            }
        },
        {
            "id": 181277943,
            "title": "Javiera Mena - Otra Era (High Klassified Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/javieramena/javiera-mena-otra-era-high-klassified-remix",
            "user": {
                "id": 642326,
                "username": "Javiera Mena"
            }
        },
        {
            "id": 115340326,
            "title": "Hilarity Duff",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/kaytranada/hilarity-duff",
            "user": {
                "id": 788205,
                "username": "\\"KKAAYYTTRRAA\\""
            }
        },
        {
            "id": 128263394,
            "title": "001",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/hwls/001-w-b-lewis",
            "user": {
                "id": 67190652,
                "username": "HWLS"
            }
        },
        {
            "id": 224747872,
            "title": "here we go again..",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/kvnisblack/hwgagain",
            "user": {
                "id": 75880639,
                "username": "KVN AUST"
            }
        },
        {
            "id": 224845460,
            "title": "A Million Miles Away",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/spireproject/a-million-miles-away",
            "user": {
                "id": 21955734,
                "username": "spire"
            }
        },
        {
            "id": 223743438,
            "title": "ALL NIGHT",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/andruofficial/all-night",
            "user": {
                "id": 15795820,
                "username": "ANDRU."
            }
        },
        {
            "id": 223864829,
            "title": "rain, pt. 2",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/harriscole/rain",
            "user": {
                "id": 20194131,
                "username": "harris cole"
            }
        },
        {
            "id": 223885830,
            "title": "Bowlection Radio #001",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/memorecks/bowlection-radio-001",
            "user": {
                "id": 361948,
                "username": "memorecks"
            }
        },
        {
            "id": 189092673,
            "title": "Still Don't Understand",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/spireproject/still-dont-understand",
            "user": {
                "id": 21955734,
                "username": "spire"
            }
        },
        {
            "id": 223385914,
            "title": "think about",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/oshi/no-soundcloud-beef-pls",
            "user": {
                "id": 33814476,
                "username": "oshi"
            }
        },
        {
            "id": 220441698,
            "title": "Fubu. GXD LEVEL DREAMER",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/gxdleveldreamer/kiid-dreamer-x-fubu-prod-by-kiid-dreamer",
            "user": {
                "id": 43874560,
                "username": "GXD LEVEL DREAMER"
            }
        },
        {
            "id": 164037521,
            "title": "Gone Til November (prod. Obeatz)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/cousinstizz/november",
            "user": {
                "id": 86268399,
                "username": "Cousin Stizz"
            }
        },
        {
            "id": 220929372,
            "title": "Praey",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/eastghost/praey",
            "user": {
                "id": 7333116,
                "username": "Eastghost"
            }
        },
        {
            "id": 111967956,
            "title": "Crystals (GTA V EXCLUSIVE)",
            "embeddable_by": "none",
            "permalink_url": "https://soundcloud.com/clammyclams/crystals-gta-v-exclusive",
            "user": {
                "id": 5394147,
                "username": "clammyclams"
            }
        },
        {
            "id": 125533918,
            "title": "13 Youforia [Mac Miller]",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/clammyclams/13-youforia-mac-miller-1",
            "user": {
                "id": 5394147,
                "username": "clammyclams"
            }
        },
        {
            "id": 220457525,
            "title": "soft crush",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/distancedecay/soft-crush",
            "user": {
                "id": 69581730,
                "username": "distance decay"
            }
        },
        {
            "id": 189096658,
            "title": "government",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/herzeloyde/government",
            "user": {
                "id": 1702771,
                "username": "herzeloyde"
            }
        },
        {
            "id": 218801452,
            "title": "IMPALE",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/pearlywhite/impale",
            "user": {
                "id": 44469336,
                "username": "PEARL WHITE"
            }
        },
        {
            "id": 218931369,
            "title": "Israel (Sparring) - Chance The Rapper & Noname Gypsy",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/chancetherapper/israel-sparring-chance-the-rapper-noname-gypsy",
            "user": {
                "id": 6969243,
                "username": "\\"Chance The Rapper\\""
            }
        },
        {
            "id": 213038982,
            "title": "Orion",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/young_bosnia/orion",
            "user": {
                "id": 40381229,
                "username": "Young Bosnia"
            }
        },
        {
            "id": 216847454,
            "title": "fetch (ft. xian & gaszia)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/joshpan/fetch",
            "user": {
                "id": 7941708,
                "username": "josh pan"
            }
        },
        {
            "id": 216944283,
            "title": "once this was an option",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/drewthearchitect/oncethiswasaoption",
            "user": {
                "id": 31247209,
                "username": "drew the architect"
            }
        },
        {
            "id": 212447007,
            "title": "blackbear - Idfc (tarro Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/tarroofficial/blackbear-idfc-tarro-remixx",
            "user": {
                "id": 23207907,
                "username": "tarro"
            }
        },
        {
            "id": 186621592,
            "title": "Thinking About It [Free DL]",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/kadela/thinking",
            "user": {
                "id": 132204175,
                "username": "Kadela"
            }
        },
        {
            "id": 216155073,
            "title": "Darius & FKJ - √î",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/rochemusique/darius-fkj-o",
            "user": {
                "id": 8880243,
                "username": "Roche Musique"
            }
        },
        {
            "id": 214693389,
            "title": "shh030: Robert Robert - Apple Glass",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/shhsecretsongs/appleglass",
            "user": {
                "id": 92183354,
                "username": "Secret Songs"
            }
        },
        {
            "id": 201741942,
            "title": "cln - Hold Me",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/callanalexander/cln-hold-me",
            "user": {
                "id": 1892549,
                "username": "cln"
            }
        },
        {
            "id": 211453388,
            "title": "Mattanoll - Clearness (Robotaki Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/robotaki/mattanoll-clearness-robotaki-remix",
            "user": {
                "id": 241149,
                "username": "Robotaki"
            }
        },
        {
            "id": 208682358,
            "title": "pestilence",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/prxz/pestilence",
            "user": {
                "id": 111862109,
                "username": "prxz"
            }
        },
        {
            "id": 209254144,
            "title": "garbage",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/theunfinishedpickle/melon",
            "user": {
                "id": 11737596,
                "username": "the unfinished pickle ‚ú™"
            }
        },
        {
            "id": 208168066,
            "title": "my dear (feat. t√§m√§)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/knifegirll/my-dear-feat-tama",
            "user": {
                "id": 29993242,
                "username": "KNIFE GIRL"
            }
        },
        {
            "id": 188366143,
            "title": "Evo Auxilium - Chrysalis",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/svnsetwaves/evoauxilium-chrysalis",
            "user": {
                "id": 43874249,
                "username": "SVNSET WAVES"
            }
        },
        {
            "id": 211610914,
            "title": "Teotihuacan (Part 2) with Tom Hodge",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/max-cooper/teotihuacan-part-2-with-tom-hodge",
            "user": {
                "id": 79981,
                "username": "Max Cooper"
            }
        },
        {
            "id": 199820460,
            "title": "HUSKY (ft. VODUZ)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/gregar/husky-ft-voduz",
            "user": {
                "id": 18526987,
                "username": "GRXGVR"
            }
        },
        {
            "id": 203621060,
            "title": "chet porter // fellow feeling (octbr flip)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/octbr/chet-porter-fellow-feeling-octbr-bootleg-1",
            "user": {
                "id": 67048324,
                "username": "octbr"
            }
        },
        {
            "id": 207330726,
            "title": "Denzel Curry - Threatz (Ekali & Gravez Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/ekalimusic/denzel-curry-threatz-ekali-gravez-remix-1",
            "user": {
                "id": 27053630,
                "username": "EKALI"
            }
        },
        {
            "id": 208711731,
            "title": "lasting yesterday w/ bones",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/drewthearchitect/lasting-yesterday-w-bones",
            "user": {
                "id": 31247209,
                "username": "drew the architect"
            }
        },
        {
            "id": 208425597,
            "title": "Zella Day - High (Kill Them With Colour Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/killthemwithcolour/zella-day-high-kill-them-with-colour-remix-1",
            "user": {
                "id": 20475,
                "username": "Kill Them With Colour"
            }
        },
        {
            "id": 84592071,
            "title": "And the walls came tumbling down (demo)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/hotsugar/and-the-walls-came-tumbling-down",
            "user": {
                "id": 1891147,
                "username": "Hot Sugar"
            }
        },
        {
            "id": 206541105,
            "title": "Neck - Cherry M3",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/iamneck/neck-cherry-m3",
            "user": {
                "id": 110945129,
                "username": "Neck"
            }
        },
        {
            "id": 206771095,
            "title": "'last time'",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/allthedeadones/last-time",
            "user": {
                "id": 823746,
                "username": "atu"
            }
        },
        {
            "id": 206215459,
            "title": "shh027: Koloto - Life in Clay",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/shhsecretsongs/koloto",
            "user": {
                "id": 92183354,
                "username": "Secret Songs"
            }
        },
        {
            "id": 207014287,
            "title": "Gleisdreieck",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/hnrk93/gleisdreieck",
            "user": {
                "id": 18849598,
                "username": "hnrk"
            }
        },
        {
            "id": 206627115,
            "title": "come home",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/iamrellim/comehome",
            "user": {
                "id": 150672415,
                "username": "RELLIM"
            }
        },
        {
            "id": 181538889,
            "title": "Tora - Jaigantic (Galimatias Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/galimatias/tora-jaigantic-galimatias-remix",
            "user": {
                "id": 488287,
                "username": "Galimatias"
            }
        },
        {
            "id": 204037565,
            "title": "munno - sea",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/shhsecretsongs/01-sea-1",
            "user": {
                "id": 92183354,
                "username": "Secret Songs"
            }
        },
        {
            "id": 204037550,
            "title": "munno - rodzina",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/shhsecretsongs/05-rodzina-1",
            "user": {
                "id": 92183354,
                "username": "Secret Songs"
            }
        },
        {
            "id": 205157425,
            "title": "Apollo",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/electricmantis/apollo-1",
            "user": {
                "id": 2730329,
                "username": "Electric Mantis"
            }
        },
        {
            "id": 105721949,
            "title": "SCARY ALL OVER",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/fiftygrand/01-scary-all-over",
            "user": {
                "id": 9871727,
                "username": "fifty grand"
            }
        },
        {
            "id": 170490855,
            "title": "BLACKHEART (FT. FIFTY GRAND)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/misogi/blackheart",
            "user": {
                "id": 55596316,
                "username": "MISOGI"
            }
        },
        {
            "id": 202708216,
            "title": "Braeden Bailey ~ The Kids Are Not Alright",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/noirsound/tkana",
            "user": {
                "id": 135499232,
                "username": "Film Noir Sound"
            }
        },
        {
            "id": 202758856,
            "title": "BITTER BOY Feat. Anthony White (prod. Illyland)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/applesgotit/tellmyex",
            "user": {
                "id": 113087648,
                "username": "appleby..."
            }
        },
        {
            "id": 202199972,
            "title": "Shash'U - Turbo",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/onandonrecords/shashu-turbo-from-on-and-on-1o1-compilation",
            "user": {
                "id": 68716495,
                "username": "On And On"
            }
        },
        {
            "id": 201719951,
            "title": "Shadow",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/thefaded/shadow",
            "user": {
                "id": 3262296,
                "username": "thefaded."
            }
        },
        {
            "id": 201163080,
            "title": "Daniel Johns - Aerial Love (Naderi Remix) [Thissongissick.com Premiere] [Free Download]",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/nickraymondg/daniel-johns-naderi-aerial-love-remix-premiere",
            "user": {
                "id": 445063,
                "username": "Thissongissick.com"
            }
        },
        {
            "id": 200083292,
            "title": "Lovesick",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/muramasamusic/6-lovesick-fuck",
            "user": {
                "id": 27059681,
                "username": "Mura Masa"
            }
        },
        {
            "id": 200083519,
            "title": "Are U There?",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/muramasamusic/1-are-u-there",
            "user": {
                "id": 27059681,
                "username": "Mura Masa"
            }
        },
        {
            "id": 200477403,
            "title": "tribes",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/kvnisblack/tribes",
            "user": {
                "id": 75880639,
                "username": "KVN AUST"
            }
        },
        {
            "id": 200217104,
            "title": "U Mad (feat. Kanye West)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/vicsavemoney/u-mad-feat-kanye-west",
            "user": {
                "id": 28508171,
                "username": "Vic Mensa."
            }
        },
        {
            "id": 199524186,
            "title": "Never Stop",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/krane/never-stop",
            "user": {
                "id": 11560129,
                "username": "KRANE"
            }
        },
        {
            "id": 199087560,
            "title": "In For It (Prod. by RL Grime) - Tory Lanez",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/i1l1/in_for_it",
            "user": {
                "id": 12671150,
                "username": "ùïª"
            }
        },
        {
            "id": 190330959,
            "title": "Padre Ft Jova - Chasing Mirrors Christian L√∂ffler Remix (D002)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/derelicht-1/padre-ft-jova-chasing-mirrors-christian-loffler-remix-d002",
            "user": {
                "id": 50066691,
                "username": "DERELICHT"
            }
        },
        {
            "id": 197931400,
            "title": "Crushin",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/tinderolympics/crushin-forthcoming-tape",
            "user": {
                "id": 1491819,
                "username": "TINDER OLYMPICS"
            }
        },
        {
            "id": 197293385,
            "title": "Hoodboi - Shallow",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/foolsgoldrecs/hoodboi-shallow-1",
            "user": {
                "id": 5636679,
                "username": "Fool's Gold Records"
            }
        },
        {
            "id": 196387410,
            "title": "Mr. Carmack - FF308",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mr-carmacks-secret-gems/mr-carmack-ff308",
            "user": {
                "id": 112448718,
                "username": "Mr. Carmack's Secret Gems"
            }
        },
        {
            "id": 195728711,
            "title": "RedEye to Paris Feat. Skepta",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/flatbushzombies/redeye-to-paris-feat-skepta",
            "user": {
                "id": 5736626,
                "username": "Flatbush ZOMBiES"
            }
        },
        {
            "id": 195179865,
            "title": "shh023: Grynpyret - A Song About Naps",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/shhsecretsongs/naps",
            "user": {
                "id": 92183354,
                "username": "Secret Songs"
            }
        },
        {
            "id": 195611240,
            "title": "Tokimonsta - Steal My Attention (Dot Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/iamdot/tokimonsta-steal-my-attention-dot-remix",
            "user": {
                "id": 2305025,
                "username": "dot"
            }
        },
        {
            "id": 195579895,
            "title": "childhood",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/samgellaitry/childhood",
            "user": {
                "id": 892605,
                "username": "sam gellaitry"
            }
        },
        {
            "id": 142065423,
            "title": "dot - Super Moon",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/onchain/dot-super-moon",
            "user": {
                "id": 80339202,
                "username": "PORTAL MUSIC"
            }
        },
        {
            "id": 194906837,
            "title": "Smother (with Mothica)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/tennysonmusic/smother-with-mothica",
            "user": {
                "id": 5326994,
                "username": "tennyson"
            }
        },
        {
            "id": 193829854,
            "title": "Baby Blue (feat. Chance the Rapper)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/actionbronson/baby-blue-ft-chance-the-rapper",
            "user": {
                "id": 34614727,
                "username": "ACTION BRONSON"
            }
        },
        {
            "id": 165059474,
            "title": "Nothing Lasts Forever",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/fekibeats/nothing-lasts-forever",
            "user": {
                "id": 10687538,
                "username": "Feki"
            }
        },
        {
            "id": 192771168,
            "title": "shh022: CutMyLips x INODI - Killing Me Inside (CutMyLips Version)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/shhsecretsongs/shh022-cutmylips-x-inodi-1",
            "user": {
                "id": 92183354,
                "username": "Secret Songs"
            }
        },
        {
            "id": 192640441,
            "title": "The Fortress",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mockyrecordings/2-the-fortress-mocky-1",
            "user": {
                "id": 2862055,
                "username": "@Mockyrecordings"
            }
        },
        {
            "id": 191927209,
            "title": "George Maple - Talk Talk (Ta-ku Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/takugotbeats/george-maple-talk-talk-ta-ku-remix-1",
            "user": {
                "id": 284803,
                "username": "Ta-ku"
            }
        },
        {
            "id": 188448402,
            "title": "yasi is the aurora borealis",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/yaasii/aurora",
            "user": {
                "id": 115837186,
                "username": "yasi"
            }
        },
        {
            "id": 143729761,
            "title": "FADER Mix: Hot Sugar's Seductive Nightmares Part II",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/fadermedia/fader-mix-hot-sugars-seductive",
            "user": {
                "id": 21305,
                "username": "The FADER"
            }
        },
        {
            "id": 159802157,
            "title": "Minimix 001",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/shhsecretsongs/minimix-001",
            "user": {
                "id": 92183354,
                "username": "Secret Songs"
            }
        },
        {
            "id": 189694264,
            "title": "state of flux",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/oshi/state-of-flux",
            "user": {
                "id": 33814476,
                "username": "oshi"
            }
        },
        {
            "id": 189108754,
            "title": "Monarch - Stay (Kill Them With Colour Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/killthemwithcolour/monarch-stay-kill-them-with-colour-remix",
            "user": {
                "id": 20475,
                "username": "Kill Them With Colour"
            }
        },
        {
            "id": 188439500,
            "title": "AIAIAI Mix 010: HWLS",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/aiaiaiaudio/aiaiai-mix-010-hwls",
            "user": {
                "id": 9285102,
                "username": "AIAIAI.Audio"
            }
        }
    ],
    "likes": [
        {
            "id": 1582271863,
            "title": "aedfx. - Deprived",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/innersus/aedfx-deprived",
            "user": {
                "id": 140181969,
                "username": "SUS COLLECTIVE"
            }
        },
        {
            "id": 1804973556,
            "title": "Unreleased Bangers MiniMix (100% original Mo Vibez)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mogotvibez/unreleased-bangers-minimix-100-original-mo-vibez",
            "user": {
                "id": 94358610,
                "username": "Mo Vibez"
            }
        },
        {
            "id": 1748909553,
            "title": "Vol.1",
            "permalink_url": "https://soundcloud.com/imjestic/sets/vol-1",
            "user": {
                "id": 44179776,
                "username": "JESTIC"
            }
        },
        {
            "id": 1775551584,
            "title": "Vibeout Club Vol.4",
            "permalink_url": "https://soundcloud.com/mogotvibez/sets/vibeout-club-vol-4",
            "user": {
                "id": 94358610,
                "username": "Mo Vibez"
            }
        },
        {
            "id": 1703119962,
            "title": "WE CAN NEVER BE FRIENDS",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/madimakesmusica/we-can-never-be-friends",
            "user": {
                "id": 5661250,
                "username": "MADI"
            }
        },
        {
            "id": 1567680376,
            "title": "Becomer",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/herzeloyde/becomer",
            "user": {
                "id": 1702771,
                "username": "herzeloyde"
            }
        },
        {
            "id": 1567680775,
            "title": "Epiphany",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/herzeloyde/epiphany",
            "user": {
                "id": 1702771,
                "username": "herzeloyde"
            }
        },
        {
            "id": 1756283214,
            "title": "awakening",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/jnthnstein/awakening-1",
            "user": {
                "id": 3010673,
                "username": "JNTHN STEIN"
            }
        },
        {
            "id": 1670601168,
            "title": "Partica Radio: Ep. 42 | wasteurself b2b pinku. Guest Mix",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/particaartistgroup/radioep42",
            "user": {
                "id": 186179687,
                "username": "Partica Artist Group"
            }
        },
        {
            "id": 1614925533,
            "title": "Spass - Hi Tek (STUCA Edit)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/stucamusic/hi-tek-stuca-edit",
            "user": {
                "id": 217893465,
                "username": "STUCA"
            }
        },
        {
            "id": 1564339912,
            "title": "Juelz Presents Floorspace (Live @ The Teragram Ballroom)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/bbjuelz/floorspace-la",
            "user": {
                "id": 11785313,
                "username": "Juelz"
            }
        },
        {
            "id": 1492888705,
            "title": "IMANU X LIA - Temper (Chee Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/wtfischee/8-imanu-x-lia-temper-chee-remix",
            "user": {
                "id": 8314554,
                "username": "CHEE"
            }
        },
        {
            "id": 1514723632,
            "title": "Hekler - THUNDER SENSE",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/heklermusic/hekler-thunder-sense",
            "user": {
                "id": 257374571,
                "username": "HEKLER"
            }
        },
        {
            "id": 1539273439,
            "title": "Noizon - Resonate",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/noizon/noizon-resonate-1",
            "user": {
                "id": 28956043,
                "username": "Noizon"
            }
        },
        {
            "id": 186569072,
            "title": "Herzeloyde - Pull",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/flowfi/herzeloyde-pull",
            "user": {
                "id": 78858658,
                "username": "FLOW FI"
            }
        },
        {
            "id": 1519289902,
            "title": "Drowning Moon",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/styemmy/drowning-moon",
            "user": {
                "id": 397432734,
                "username": "Yem"
            }
        },
        {
            "id": 1522666327,
            "title": "Counting (ft. Princess Superstar)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/hamdiofficialmusic/counting",
            "user": {
                "id": 8994735,
                "username": "Hamdi"
            }
        },
        {
            "id": 1312325767,
            "title": "DRIP",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/yxnwr/drip",
            "user": {
                "id": 776611006,
                "username": "Yxnwr"
            }
        },
        {
            "id": 1439217202,
            "title": "FOR THE TEAM 120 (out now on bandcamp)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/tsuruda/for-the-team-120-out-now-on-bandcamp",
            "user": {
                "id": 2900130,
                "username": "tsuruda"
            }
        },
        {
            "id": 1329583195,
            "title": "AS√ÅU STUNNA POSSE CULT MIX",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/stunnapossecult/asau-stunna-posse-cult-mix",
            "user": {
                "id": 4159016,
                "username": "STUNNA POSSE"
            }
        },
        {
            "id": 1281734959,
            "title": "Undone (feat. Holly Hebe)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/callanalexander/undone-feat-holly-hebe",
            "user": {
                "id": 1892549,
                "username": "cln"
            }
        },
        {
            "id": 1219499248,
            "title": "Warm Death",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/tobesnoisemachine/warm-death",
            "user": {
                "id": 33370318,
                "username": "Tobes."
            }
        },
        {
            "id": 1216700281,
            "title": "cleanthehouse",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/sha_ri/cleanthehouse",
            "user": {
                "id": 1085510971,
                "username": "SHARI"
            }
        },
        {
            "id": 1208620990,
            "title": "Maybe (with Adam Tell)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/jkuch/maybe",
            "user": {
                "id": 33841166,
                "username": "JKuch"
            }
        },
        {
            "id": 1209997981,
            "title": "afternoon bike ride - rise again (harris cole & somni remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/harriscole/rise-again-remix",
            "user": {
                "id": 20194131,
                "username": "harris cole"
            }
        },
        {
            "id": 1095809782,
            "title": "neverbthesame",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/fooliesurfin/neverbthesame",
            "user": {
                "id": 36947243,
                "username": "Foolie $urfin"
            }
        },
        {
            "id": 1185502180,
            "title": "hop out",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/montebooker/hop-out",
            "user": {
                "id": 41547600,
                "username": "monte booker"
            }
        },
        {
            "id": 1091926228,
            "title": "tomb wards",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mvgmvr-music/tomb-wards",
            "user": {
                "id": 290600094,
                "username": "MVGMVR"
            }
        },
        {
            "id": 1021283716,
            "title": "BOOST TAPE 02",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/boostgangmusic/boost-tape-02",
            "user": {
                "id": 956035579,
                "username": "BOOST GANG"
            }
        },
        {
            "id": 1020863098,
            "title": "Soulection Radio Show #498 (Seangran Takeover)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/soulection/soulection-radio-show-498-seangran-takeover",
            "user": {
                "id": 483960,
                "username": "SOULECTION"
            }
        },
        {
            "id": 1005231175,
            "title": "FUXWITHIT Guest Mix: 145 - whereisalex",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/fuxwithit-1/fuxwithit-guest-mix-145-whereisalex",
            "user": {
                "id": 74273356,
                "username": "FUXWITHIT"
            }
        },
        {
            "id": 972698599,
            "title": "\\"The 80s\\" Presets for Massive (info in description)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/aprovoli/mixtrack-for-my-first-preset-pack-read-description",
            "user": {
                "id": 20342740,
                "username": "aprovoli"
            }
        },
        {
            "id": 985836799,
            "title": "All Those Estranged Things I Have Created, Look At Me",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/grand-inc/all-those-estranged-things-i-have-created-look-at-me",
            "user": {
                "id": 37565087,
                "username": "Grand Inc"
            }
        },
        {
            "id": 1076562397,
            "title": "glue70 - 2070",
            "permalink_url": "https://soundcloud.com/glue70/sets/glue70-2070",
            "user": {
                "id": 3025113,
                "username": "g l u e 7 0"
            }
        },
        {
            "id": 904390435,
            "title": "Axian, Soul Food Horns & Michael Michaelson - Kindred",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/axiannn/axian-soul-food-horns-michael-michaelson-kindred",
            "user": {
                "id": 207776735,
                "username": "Axian"
            }
        },
        {
            "id": 492806736,
            "title": "Selector: Mo Vibez (guestmix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/staycoolfam/selector-mix-mo-vibez",
            "user": {
                "id": 337346255,
                "username": "Stay Cool"
            }
        },
        {
            "id": 1084713787,
            "title": "Esrevoinma",
            "permalink_url": "https://soundcloud.com/lapalux/sets/esrevoinma",
            "user": {
                "id": 181062,
                "username": "Lapalux"
            }
        },
        {
            "id": 799611982,
            "title": "knocker",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/lynyofficial/knocker",
            "user": {
                "id": 65575494,
                "username": "LYNY"
            }
        },
        {
            "id": 1029039235,
            "title": "Quarter Inch",
            "permalink_url": "https://soundcloud.com/wtfischee/sets/quarter-inch-ep",
            "user": {
                "id": 8314554,
                "username": "CHEE"
            }
        },
        {
            "id": 248518163,
            "title": "K√úNO EP (300x 12\\" VINYL)",
            "permalink_url": "https://soundcloud.com/prrrrrrr-records/sets/kueno-ep",
            "user": {
                "id": 121631178,
                "username": "Prrrrrrr"
            }
        },
        {
            "id": 803154067,
            "title": "j.robb cantbecancelled set",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/jrobbdaproducer/cantbecancelled-set",
            "user": {
                "id": 4657451,
                "username": "J.ROBB"
            }
        },
        {
            "id": 752635600,
            "title": "Escape Everything | A Chill Mix ‚ô´",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/majesticcasual/escape-everything",
            "user": {
                "id": 14514906,
                "username": "Majestic Casual"
            }
        },
        {
            "id": 752639332,
            "title": "Escape Everything 2 | A Chill Mix ‚ô´",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/majesticcasual/escape-everything-2",
            "user": {
                "id": 14514906,
                "username": "Majestic Casual"
            }
        },
        {
            "id": 744368830,
            "title": "Handbook - Eyes (Edit)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/wearestereofox/handbook-eyes-edit",
            "user": {
                "id": 28898954,
                "username": "Stereofox"
            }
        },
        {
            "id": 943613557,
            "title": "IV",
            "permalink_url": "https://soundcloud.com/hwls/sets/ep-iv",
            "user": {
                "id": 67190652,
                "username": "HWLS"
            }
        },
        {
            "id": 693990307,
            "title": "GALACTIC SOUNDS VOL.13 | MIXED AND CURATED BY K-SADILLA (10/8/19)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/thunderstone-labs/gs13",
            "user": {
                "id": 21986995,
                "username": "THUNDERSTONE LABS"
            }
        },
        {
            "id": 715985914,
            "title": "Theodor - I'm Hot (My Sample pack in Bio)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/tedfresco/theodor-im-hot",
            "user": {
                "id": 16037364,
                "username": "Ted Fresco"
            }
        },
        {
            "id": 699580870,
            "title": "Rusted Rhythms Vol. 33 - COPYCATT",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/therust/rusted-rhythms-vol-33-copycatt",
            "user": {
                "id": 1219830,
                "username": "The Rust Music"
            }
        },
        {
            "id": 888156598,
            "title": "Vocabulary",
            "permalink_url": "https://soundcloud.com/ampzer/sets/vocabulary",
            "user": {
                "id": 135071457,
                "username": "Ampzer"
            }
        },
        {
            "id": 283978587,
            "title": "NEST HQ MiniMix: Herzeloyde",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/nesthq/nest-hq-minimix-herzeloyde",
            "user": {
                "id": 43485614,
                "username": "NEST HQ"
            }
        },
        {
            "id": 829129838,
            "title": "Lakehouse",
            "permalink_url": "https://soundcloud.com/ianewingmusic/sets/lakehouse",
            "user": {
                "id": 9702642,
                "username": "Ian Ewing"
            }
        },
        {
            "id": 477345885,
            "title": "bottom text. cypher #4",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/bagcyphers/bottom-text-cypher-4",
            "user": {
                "id": 374767067,
                "username": "bottom text."
            }
        },
        {
            "id": 632703210,
            "title": "Arbour + Fantompower - Inner Ocean Sessions No. 1",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/inneroceanrecords/arbour-fantompower-inner-ocean-sessions-no-1",
            "user": {
                "id": 870943,
                "username": "Inner Ocean Records"
            }
        },
        {
            "id": 792984894,
            "title": "Souletiquette 'Ingenious pleasure' Vol. 4",
            "permalink_url": "https://soundcloud.com/souletiquette/sets/souletiquette-ip-vol-4",
            "user": {
                "id": 68612109,
                "username": "Souletiquette."
            }
        },
        {
            "id": 789533847,
            "title": "Project Cucuron Mixtape #1",
            "permalink_url": "https://soundcloud.com/noannaos/sets/project-cucuron-mixtape-1",
            "user": {
                "id": 637607610,
                "username": "Noannaos"
            }
        },
        {
            "id": 787730103,
            "title": "BEAST COAST - Escape From New York",
            "permalink_url": "https://soundcloud.com/proeraradio/sets/beast-coast-escape-from-new",
            "user": {
                "id": 7071549,
                "username": "PRO ERA RECORDS."
            }
        },
        {
            "id": 785110800,
            "title": "Great Dane - Respect: Self (EP)",
            "permalink_url": "https://soundcloud.com/adbcrecords/sets/great-dane-respect-self-ep",
            "user": {
                "id": 326535761,
                "username": "ADBC Records"
            }
        },
        {
            "id": 775513746,
            "title": "NOSTALGIA MIXTAPE",
            "permalink_url": "https://soundcloud.com/itspham/sets/nostalgia",
            "user": {
                "id": 171248497,
                "username": "Pham"
            }
        },
        {
            "id": 606917733,
            "title": "Awakening - Mix.7",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/ekalimusic/awakening-mix7",
            "user": {
                "id": 27053630,
                "username": "EKALI"
            }
        },
        {
            "id": 600476337,
            "title": "Holly - Deadbeats x Brownies & Lemonade LA (Live Set)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/hollyhollys/holly-deadbeats-x-brownies-lemonade-la-live-set",
            "user": {
                "id": 62258473,
                "username": "HOLLY"
            }
        },
        {
            "id": 714673401,
            "title": "Shrimpnose & K.Raydio - ...And The World Weeps",
            "permalink_url": "https://soundcloud.com/johnshrimpnose/sets/and-the-world-weeps",
            "user": {
                "id": 73036204,
                "username": "shrimpnose  üç§ üëÉ"
            }
        },
        {
            "id": 592779297,
            "title": "Hi This Is Flume (Mixtape)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/flume/hi-this-is-flume-mixtape",
            "user": {
                "id": 2976616,
                "username": "Flume"
            }
        },
        {
            "id": 598273329,
            "title": "vibecypher #3 woosta x herzeloyde",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/herzeloyde/vibecypher-3-woosta-x-herzeloyde",
            "user": {
                "id": 1702771,
                "username": "herzeloyde"
            }
        },
        {
            "id": 582901455,
            "title": "Holy Ship! 2019 Live Sets: Louis The Child b2b Ekali b2b Whethan b2b Melvv (Playground Set)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/holy_ship/holy-ship-2019-live-sets-louis-the-child-b2b-ekali-b2b-whethan-b2b-melvv-playground-set",
            "user": {
                "id": 185970227,
                "username": "Holy Ship!"
            }
        },
        {
            "id": 579061746,
            "title": "Vol. 155",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/beatteamsupreme/vol-155",
            "user": {
                "id": 14820110,
                "username": "TeamSupreme"
            }
        },
        {
            "id": 677468019,
            "title": "N≈´r",
            "permalink_url": "https://soundcloud.com/doitlikedua/sets/nur",
            "user": {
                "id": 106866414,
                "username": "dua saleh"
            }
        },
        {
            "id": 648734616,
            "title": "Louded EP",
            "permalink_url": "https://soundcloud.com/herzeloyde/sets/louded-ep",
            "user": {
                "id": 1702771,
                "username": "herzeloyde"
            }
        },
        {
            "id": 480399471,
            "title": "knowiknowiknowiknowiknow",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/williamcrooks/knowi",
            "user": {
                "id": 904751,
                "username": "william crooks"
            }
        },
        {
            "id": 515084187,
            "title": "Pandaraps ~ Femboy [Full Album]",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/effortlessaudio/femboy",
            "user": {
                "id": 274118299,
                "username": "|| Effortless ."
            }
        },
        {
            "id": 478687773,
            "title": "In Session: Sinjin Hawke & Zora Jones",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/mixmag-1/in-session-sinjin-hawke-zora-jones",
            "user": {
                "id": 3941306,
                "username": "Mixmag"
            }
        },
        {
            "id": 376835285,
            "title": "Fireworks",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/itspham/fireworks",
            "user": {
                "id": 171248497,
                "username": "Pham"
            }
        },
        {
            "id": 527138757,
            "title": "Act I",
            "permalink_url": "https://soundcloud.com/naji/sets/act-i-1",
            "user": {
                "id": 10605007,
                "username": "Naji"
            }
        },
        {
            "id": 428616066,
            "title": "Sober Rob b2b Rage Logic - Exclusive Mix - Beat Lab Radio 190",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/beatlabradio/sober-rob-b2b-rage-logic-exclusive-mix-beat-lab-radio-190",
            "user": {
                "id": 104983816,
                "username": "Beat Lab Radio"
            }
        },
        {
            "id": 480036488,
            "title": "Woolymammoth's \\"Filling Spots\\" [PREVIEW]",
            "permalink_url": "https://soundcloud.com/jasonwool/sets/woolymammoth-filling-spots",
            "user": {
                "id": 24563796,
                "username": "JASON WOOL"
            }
        },
        {
            "id": 465914799,
            "title": "Twenty Three",
            "permalink_url": "https://soundcloud.com/cabubeats/sets/twenty-three-ep-1",
            "user": {
                "id": 208050393,
                "username": "Cabu"
            }
        },
        {
            "id": 392034117,
            "title": "IRENE 0.5",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/officialmedasin/irene-full-ep-mix",
            "user": {
                "id": 21695387,
                "username": "medasin"
            }
        },
        {
            "id": 317020087,
            "title": "chromonicci. - Dreaming.",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/phuturecollective/chromonicci-dreaming",
            "user": {
                "id": 133476647,
                "username": "Phuture Collective ‚àû"
            }
        },
        {
            "id": 429521516,
            "title": "Make Me Scared Again",
            "permalink_url": "https://soundcloud.com/lewisjamesgrant/sets/makemescaredagain",
            "user": {
                "id": 150292453,
                "username": "Lewis Grant"
            }
        },
        {
            "id": 361973219,
            "title": "THESE SONGS AND MORE IN MY SPOTIFY!!!<333",
            "permalink_url": "https://soundcloud.com/vague003/sets/these-songs-and-more-in-my",
            "user": {
                "id": 1921005,
                "username": "VAGUE003"
            }
        },
        {
            "id": 345396708,
            "title": "HWLS - I MIGHT BE DEAD MIXTAPE",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/futureclassic/hwls-i-might-be-dead-mixtape",
            "user": {
                "id": 375,
                "username": "future classic"
            }
        },
        {
            "id": 323420030,
            "title": "pulp",
            "permalink_url": "https://soundcloud.com/weirdinside/sets/pulp",
            "user": {
                "id": 67436159,
                "username": "weird inside"
            }
        },
        {
            "id": 314010522,
            "title": "Vol. 140 (The Chord Progression Cypher - Curated by PHPH, JNTHN STEIN & Dot)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/beatteamsupreme/vol-140",
            "user": {
                "id": 14820110,
                "username": "TeamSupreme"
            }
        },
        {
            "id": 253449858,
            "title": "Weekend Warmup #19, August 25, 2016 | Hosted by Explore",
            "permalink_url": "https://soundcloud.com/urban-outfitters/sets/weekend-warmup-19-august-25",
            "user": {
                "id": 51538371,
                "username": "Urban Outfitters"
            }
        },
        {
            "id": 297727627,
            "title": "RADAR RADIO w/ KAREFUL 08.12.16",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/jossymitsu/radar-radio-081216",
            "user": {
                "id": 113549312,
                "username": "Jossy Mitsu"
            }
        },
        {
            "id": 294623899,
            "title": "wavemob mix016 - Skit",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/wavemob/wavemob-mix016-skit",
            "user": {
                "id": 57333537,
                "username": "wavemob"
            }
        },
        {
            "id": 208465666,
            "title": "Ekali for Raised by Wolves",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/raisedbywolves/ekali-for-raised-by-wolves",
            "user": {
                "id": 147106730,
                "username": "RAISEDBYWOLVES"
            }
        },
        {
            "id": 281817836,
            "title": "Clash DJ Mix - Kareful",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/clashmagazine/clash-dj-mix-kareful",
            "user": {
                "id": 109427,
                "username": "Clash Magazine"
            }
        },
        {
            "id": 255772345,
            "title": "Lapis Lazuli EP",
            "permalink_url": "https://soundcloud.com/katuchat/sets/lapis-lazuli-ep",
            "user": {
                "id": 30341076,
                "username": "katu"
            }
        },
        {
            "id": 249910989,
            "title": "D97",
            "permalink_url": "https://soundcloud.com/verzache/sets/d97",
            "user": {
                "id": 71811764,
                "username": "verzache"
            }
        },
        {
            "id": 246379696,
            "title": "Telefone",
            "permalink_url": "https://soundcloud.com/noname/sets/telefone",
            "user": {
                "id": 26410175,
                "username": "Noname"
            }
        },
        {
            "id": 275058140,
            "title": "ASTROCAST52: Your Gay Thoughts",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/astronautico/astrocast52-your-gay-thoughts",
            "user": {
                "id": 23412,
                "username": "Astro Nautico"
            }
        },
        {
            "id": 272148051,
            "title": "EntranÃÉas",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/arca1000000/entranas",
            "user": {
                "id": 3201738,
                "username": "Arca"
            }
        },
        {
            "id": 234099985,
            "title": "CRi - Tell Her",
            "permalink_url": "https://soundcloud.com/young-art-records/sets/cri-tell-her-2",
            "user": {
                "id": 104858966,
                "username": "YOUNG ART RECORDS"
            }
        },
        {
            "id": 232396672,
            "title": "Self Jupiter & Kenny Segal - Season Two (Deluxe Edition)",
            "permalink_url": "https://soundcloud.com/theorderlabel/sets/self-jupiter-kenny-segal-season-two-deluxe-edition",
            "user": {
                "id": 201130923,
                "username": "invisible college"
            }
        },
        {
            "id": 218538542,
            "title": "sosi - this is the thing",
            "permalink_url": "https://soundcloud.com/seesosi/sets/sosi-this-is-the-thing",
            "user": {
                "id": 127966097,
                "username": "sosi"
            }
        },
        {
            "id": 216228340,
            "title": "Silhouette Of A Sunkken City",
            "permalink_url": "https://soundcloud.com/sparkmastertape/sets/silhouette-of-a-sunkken-city",
            "user": {
                "id": 12562091,
                "username": "SPARK MASTER TAPE"
            }
        },
        {
            "id": 227056572,
            "title": "wavemob mix005 - Kareful",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/wavemob/wavemob-mix005-kareful",
            "user": {
                "id": 57333537,
                "username": "wavemob"
            }
        },
        {
            "id": 251120309,
            "title": "Ekali - Triple J Mixup Exclusive",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/ekalimusic/triplej",
            "user": {
                "id": 27053630,
                "username": "EKALI"
            }
        },
        {
            "id": 228205550,
            "title": "Silk Road Assassins Boiler Room London DJ Set",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/platform/silk-road-assassins",
            "user": {
                "id": 752705,
                "username": "Boiler Room"
            }
        },
        {
            "id": 199476059,
            "title": "shh041: RYAN Playground - elle",
            "permalink_url": "https://soundcloud.com/shhsecretsongs/sets/shh041",
            "user": {
                "id": 92183354,
                "username": "Secret Songs"
            }
        },
        {
            "id": 185477834,
            "title": "Malibu",
            "permalink_url": "https://soundcloud.com/andersonpaak/sets/malibu",
            "user": {
                "id": 23590048,
                "username": "anderson .paak"
            }
        },
        {
            "id": 246159490,
            "title": "Keith Ape - IT G MA Remix w A$AP Ferg, Father, DFD, Waka Flocka & Anderson .Paak (josh pan Opus)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/joshpan/opus",
            "user": {
                "id": 7941708,
                "username": "josh pan"
            }
        },
        {
            "id": 194246352,
            "title": "Haywyre - Two Fold Pt. 2",
            "permalink_url": "https://soundcloud.com/haywyre/sets/two-fold-pt-2",
            "user": {
                "id": 1065852,
                "username": "Haywyre"
            }
        },
        {
            "id": 188294597,
            "title": "Deluge (Full project on itunes, spotify, amazon, etc)",
            "permalink_url": "https://soundcloud.com/karefuluk/sets/deluge",
            "user": {
                "id": 20750416,
                "username": "Kareful"
            }
        },
        {
            "id": 243087597,
            "title": "CAREPCKG 005 : Sorsari",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/carepckg/carepckg005",
            "user": {
                "id": 194070659,
                "username": "carepackage ‚ô•"
            }
        },
        {
            "id": 241789941,
            "title": "no cake",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/glutenfreebeats/gfbeats-no-cake",
            "user": {
                "id": 166682035,
                "username": "gfbeats"
            }
        },
        {
            "id": 239872093,
            "title": "Getting Lost In Foreign Places",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/andrepower/getting-lost-in-foreign-places",
            "user": {
                "id": 559566,
                "username": "Andre Power"
            }
        },
        {
            "id": 176632871,
            "title": "A LIGHT AT THE END",
            "permalink_url": "https://soundcloud.com/eastghost/sets/a-light-at-the-end",
            "user": {
                "id": 7333116,
                "username": "Eastghost"
            }
        },
        {
            "id": 232936912,
            "title": "we lift it from us - [full album]",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/falls-2/we-lift-it-from-us",
            "user": {
                "id": 56058641,
                "username": "falls"
            }
        },
        {
            "id": 174244956,
            "title": "Inhale EP",
            "permalink_url": "https://soundcloud.com/waveless/sets/inhale-ep-1",
            "user": {
                "id": 106632523,
                "username": "waveless"
            }
        },
        {
            "id": 195670113,
            "title": "Sango Boiler Room NYC x MoMA PS1 Live Set",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/platform/sango",
            "user": {
                "id": 752705,
                "username": "Boiler Room"
            }
        },
        {
            "id": 168005464,
            "title": "Fifty Grand: FADER Mix",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/fadermedia/fader-mix-fifty-grand",
            "user": {
                "id": 21305,
                "username": "The FADER"
            }
        },
        {
            "id": 206590789,
            "title": "Soulection Guest Mix for Diplo & Friends on BBC Radio 1xtra",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/soulection/soulection-guest-mix-for-diplo-friends-on-bbc-radio-1xtra",
            "user": {
                "id": 483960,
                "username": "SOULECTION"
            }
        },
        {
            "id": 113022531,
            "title": "bobby raps & corbin - couch potato",
            "permalink_url": "https://soundcloud.com/spookycorbin/sets/bobby-raps-corbin-couch-potato",
            "user": {
                "id": 25195365,
                "username": "corbin"
            }
        },
        {
            "id": 112430729,
            "title": "I Appreciate U",
            "permalink_url": "https://soundcloud.com/brennanhenderson/sets/i-appreciate-u-1",
            "user": {
                "id": 8756016,
                "username": "brennan henderson"
            }
        },
        {
            "id": 114182157,
            "title": "Braincase EP",
            "permalink_url": "https://soundcloud.com/electricmantis/sets/braincase",
            "user": {
                "id": 2730329,
                "username": "Electric Mantis"
            }
        },
        {
            "id": 208634894,
            "title": "HSMF15 Mixtape Series #2: Djemba Djemba",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/hardfest/hsmf15-mixtape-series-2-djemba-djemba",
            "user": {
                "id": 1245441,
                "username": "HARD hardfest.com"
            }
        },
        {
            "id": 215542767,
            "title": "BBC RADIO 1 RESIDENCY No. 1 JULY 2015",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/sbtrkt/sbtrkt-bbc-radio-1-residency-july-2015-no-voiceover",
            "user": {
                "id": 68181,
                "username": "SBTRKT"
            }
        },
        {
            "id": 220822505,
            "title": "Too Future. Guest Mix 024: Josh Pan x Y//2//K",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/too-future-mixes/too-future-guest-mix-024-josh-pan-x-y2k",
            "user": {
                "id": 168171707,
                "username": "Too Future Mixes"
            }
        },
        {
            "id": 222048137,
            "title": "Nest HQ MiniMix: Ekali",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/nesthq/nest-hq-minimix-ekali",
            "user": {
                "id": 43485614,
                "username": "NEST HQ"
            }
        },
        {
            "id": 222631147,
            "title": "the ep before the album",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/tit_meat/the-ep-before-the-album",
            "user": {
                "id": 68960825,
                "username": "tit_meat"
            }
        },
        {
            "id": 233912808,
            "title": "BBC RADIO 1 RESIDENCY No. 5 NOVEMBER 2015",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/sbtrkt/bbc-radio-1-residency-no-5-november-2015-non-broadcast",
            "user": {
                "id": 68181,
                "username": "SBTRKT"
            }
        },
        {
            "id": 87681049,
            "title": "SPZRKT & Sango - Hours Spent Loving You",
            "permalink_url": "https://soundcloud.com/soulection/sets/spzrkt-sango-hours-spent",
            "user": {
                "id": 483960,
                "username": "SOULECTION"
            }
        },
        {
            "id": 236963042,
            "title": "Plastician - The Wave Pool MMXV",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/plastician/plastician-wave-pool-mmxv",
            "user": {
                "id": 198038,
                "username": "Plastician"
            }
        },
        {
            "id": 115340326,
            "title": "Hilarity Duff",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/kaytranada/hilarity-duff",
            "user": {
                "id": 788205,
                "username": "\\"KKAAYYTTRRAA\\""
            }
        },
        {
            "id": 123952398,
            "title": "High Klassified Boiler Room Montreal DJ Set",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/platform/high-klassified-boiler-room",
            "user": {
                "id": 752705,
                "username": "Boiler Room"
            }
        },
        {
            "id": 160097478,
            "title": "Pitchfork // MoMA PS1 Warm Up Mix: Cashmere Cat",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/cashmerecat/pitchforkmomamix",
            "user": {
                "id": 3436341,
                "username": "CASHMERE CAT"
            }
        },
        {
            "id": 143729761,
            "title": "FADER Mix: Hot Sugar's Seductive Nightmares Part II",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/fadermedia/fader-mix-hot-sugars-seductive",
            "user": {
                "id": 21305,
                "username": "The FADER"
            }
        },
        {
            "id": 159802157,
            "title": "Minimix 001",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/shhsecretsongs/minimix-001",
            "user": {
                "id": 92183354,
                "username": "Secret Songs"
            }
        },
        {
            "id": 189108754,
            "title": "Monarch - Stay (Kill Them With Colour Remix)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/killthemwithcolour/monarch-stay-kill-them-with-colour-remix",
            "user": {
                "id": 20475,
                "username": "Kill Them With Colour"
            }
        },
        {
            "id": 188439500,
            "title": "AIAIAI Mix 010: HWLS",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/aiaiaiaudio/aiaiai-mix-010-hwls",
            "user": {
                "id": 9285102,
                "username": "AIAIAI.Audio"
            }
        },
        {
            "id": 185501964,
            "title": "T≈åKY≈å",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/kraterbeats/tokyo",
            "user": {
                "id": 9311129,
                "username": "KRATER"
            }
        },
        {
            "id": 128263394,
            "title": "001",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/hwls/001-w-b-lewis",
            "user": {
                "id": 67190652,
                "username": "HWLS"
            }
        },
        {
            "id": 181667097,
            "title": "corbin - worn (prod. by thestand4rd & wedidit)",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/spookycorbin/corbin-worn-prod-by-wedidit-thestand4rd",
            "user": {
                "id": 25195365,
                "username": "corbin"
            }
        },
        {
            "id": 181784994,
            "title": "shh016: Moon Bounce - Body",
            "embeddable_by": "all",
            "permalink_url": "https://soundcloud.com/shhsecretsongs/shh016-moon-bounce-body",
            "user": {
                "id": 92183354,
                "username": "Secret Songs"
            }
        }
    ]
}`}}}},"tsconfig.json":{file:{contents:`{
    "extends": "@sindresorhus/tsconfig",
    "compilerOptions": {
        "moduleResolution": "bundler",
        "resolveJsonModule": true,
        "target": "ESNext",
        "module": "ESNext",
        "outDir": "dist",
        "sourceMap": false,
        "jsx": "react",
        "types": [
            "node"
        ]
    },
    "include": [
        "."
    ]
}`}},"package.json":{file:{contents:`{
  "name": "@jsnix/scripts",
  "version": "1.0.20",
  "type": "module",
  "description": "miscellaneous script code",
  "scripts": {
    "dev": "tsc",
    "build": "tsc",
    "test": "echo \\"Error: no test specified\\" && exit 1",
    "clean": "rm -rf .turbo dist node_modules",
    "lint": "eslint --fix -c ../../eslint.config.js ."
  },
  "exports": {
    "./scrape": {
      "import": "./dist/scrape.js",
      "require": "./dist/scrape.js"
    }
  },
  "author": "theodore brockman",
  "license": "MIT",
  "dependencies": {
    "@webcontainer/api": "^1.5.1"
  },
  "devDependencies": {
    "@types/node": "^22.10.5"
  }
}
`}},"CHANGELOG.md":{file:{contents:`# @jsnix/scripts

## 1.0.20

### Patch Changes

- Updating Pastel dep

## 1.0.19

### Patch Changes

- Bumping

## 1.0.18

### Patch Changes

- Bump

## 1.0.17

### Patch Changes

- Up

## 1.0.16

### Patch Changes

- Rebuild

## 1.0.15

### Patch Changes

- Removing source maps

## 1.0.14

### Patch Changes

- Rendering changes and CLI update

## 1.0.13

### Patch Changes

- Fixing HTML command rendering

## 1.0.12

### Patch Changes

- Move to run.ts

## 1.0.11

### Patch Changes

- Bump

## 1.0.10

### Patch Changes

- Bump

## 1.0.9

### Patch Changes

- Bump

## 1.0.8

### Patch Changes

- Bump

## 1.0.7

### Patch Changes

- Bump

## 1.0.6

### Patch Changes

- Bumping

## 1.0.5

### Patch Changes

- Bumping all for changes

## 1.0.4

### Patch Changes

- New build

## 1.0.3

### Patch Changes

- Updating utils, scripts, react, and cli.

## 1.0.2

### Patch Changes

- Bumping patch

## 1.0.1

### Patch Changes

- 8899e2e: Releasing version for integration testing
`}}}}}},LICENSE:{file:{contents:`GNU AFFERO GENERAL PUBLIC LICENSE
Version 3, 19 November 2007

Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.

     Preamble

The GNU Affero General Public License is a free, copyleft license for
software and other kinds of works, specifically designed to ensure
cooperation with the community in the case of network server software.

The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
our General Public Licenses are intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.

When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

Developers that use our General Public Licenses protect your rights
with two steps: (1) assert copyright on the software, and (2) offer
you this License which gives you legal permission to copy, distribute
and/or modify the software.

A secondary benefit of defending all users' freedom is that
improvements made in alternate versions of the program, if they
receive widespread use, become available for other developers to
incorporate.  Many developers of free software are heartened and
encouraged by the resulting cooperation.  However, in the case of
software used on network servers, this result may fail to come about.
The GNU General Public License permits making a modified version and
letting the public access it on a server without ever releasing its
source code to the public.

The GNU Affero General Public License is designed specifically to
ensure that, in such cases, the modified source code becomes available
to the community.  It requires the operator of a network server to
provide the source code of the modified version running there to the
users of that server.  Therefore, public use of a modified version, on
a publicly accessible server, gives the public access to the source
code of the modified version.

An older license, called the Affero General Public License and
published by Affero, was designed to accomplish similar goals.  This is
a different license, not a version of the Affero GPL, but Affero has
released a new version of the Affero GPL which permits relicensing under
this license.

The precise terms and conditions for copying, distribution and
modification follow.

TERMS AND CONDITIONS

0. Definitions.

"This License" refers to version 3 of the GNU Affero General Public License.

"Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

"The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

A "covered work" means either the unmodified Program or a work based
on the Program.

To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

1. Source Code.

The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

The Corresponding Source for a work in source code form is that
same work.

2. Basic Permissions.

All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

3. Protecting Users' Legal Rights From Anti-Circumvention Law.

No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

4. Conveying Verbatim Copies.

You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

5. Conveying Modified Source Versions.

You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

a) The work must carry prominent notices stating that you modified
it, and giving a relevant date.

b) The work must carry prominent notices stating that it is
released under this License and any conditions added under section
7.  This requirement modifies the requirement in section 4 to
"keep intact all notices".

c) You must license the entire work, as a whole, under this
License to anyone who comes into possession of a copy.  This
License will therefore apply, along with any applicable section 7
additional terms, to the whole of the work, and all its parts,
regardless of how they are packaged.  This License gives no
permission to license the work in any other way, but it does not
invalidate such permission if you have separately received it.

d) If the work has interactive user interfaces, each must display
Appropriate Legal Notices; however, if the Program has interactive
interfaces that do not display Appropriate Legal Notices, your
work need not make them do so.

A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

6. Conveying Non-Source Forms.

You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

a) Convey the object code in, or embodied in, a physical product
(including a physical distribution medium), accompanied by the
Corresponding Source fixed on a durable physical medium
customarily used for software interchange.

b) Convey the object code in, or embodied in, a physical product
(including a physical distribution medium), accompanied by a
written offer, valid for at least three years and valid for as
long as you offer spare parts or customer support for that product
model, to give anyone who possesses the object code either (1) a
copy of the Corresponding Source for all the software in the
product that is covered by this License, on a durable physical
medium customarily used for software interchange, for a price no
more than your reasonable cost of physically performing this
conveying of source, or (2) access to copy the
Corresponding Source from a network server at no charge.

c) Convey individual copies of the object code with a copy of the
written offer to provide the Corresponding Source.  This
alternative is allowed only occasionally and noncommercially, and
only if you received the object code with such an offer, in accord
with subsection 6b.

d) Convey the object code by offering access from a designated
place (gratis or for a charge), and offer equivalent access to the
Corresponding Source in the same way through the same place at no
further charge.  You need not require recipients to copy the
Corresponding Source along with the object code.  If the place to
copy the object code is a network server, the Corresponding Source
may be on a different server (operated by you or a third party)
that supports equivalent copying facilities, provided you maintain
clear directions next to the object code saying where to find the
Corresponding Source.  Regardless of what server hosts the
Corresponding Source, you remain obligated to ensure that it is
available for as long as needed to satisfy these requirements.

e) Convey the object code using peer-to-peer transmission, provided
you inform other peers where the object code and Corresponding
Source of the work are being offered to the general public at no
charge under subsection 6d.

A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

"Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

7. Additional Terms.

"Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

a) Disclaiming warranty or limiting liability differently from the
terms of sections 15 and 16 of this License; or

b) Requiring preservation of specified reasonable legal notices or
author attributions in that material or in the Appropriate Legal
Notices displayed by works containing it; or

c) Prohibiting misrepresentation of the origin of that material, or
requiring that modified versions of such material be marked in
reasonable ways as different from the original version; or

d) Limiting the use for publicity purposes of names of licensors or
authors of the material; or

e) Declining to grant rights under trademark law for use of some
trade names, trademarks, or service marks; or

f) Requiring indemnification of licensors and authors of that
material by anyone who conveys the material (or modified versions of
it) with contractual assumptions of liability to the recipient, for
any liability that these contractual assumptions directly impose on
those licensors and authors.

All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

8. Termination.

You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

9. Acceptance Not Required for Having Copies.

You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

10. Automatic Licensing of Downstream Recipients.

Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

11. Patents.

A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

12. No Surrender of Others' Freedom.

If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

13. Remote Network Interaction; Use with the GNU General Public License.

Notwithstanding any other provision of this License, if you modify the
Program, your modified version must prominently offer all users
interacting with it remotely through a computer network (if your version
supports such interaction) an opportunity to receive the Corresponding
Source of your version by providing access to the Corresponding Source
from a network server at no charge, through some standard or customary
means of facilitating copying of software.  This Corresponding Source
shall include the Corresponding Source for any work covered by version 3
of the GNU General Public License that is incorporated pursuant to the
following paragraph.

Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the work with which it is combined will remain governed by version
3 of the GNU General Public License.

14. Revised Versions of this License.

The Free Software Foundation may publish revised and/or new versions of
the GNU Affero General Public License from time to time.  Such new versions
will be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU Affero General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU Affero General Public License, you may choose any version ever published
by the Free Software Foundation.

If the Program specifies that a proxy can decide which future
versions of the GNU Affero General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

15. Disclaimer of Warranty.

THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

16. Limitation of Liability.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

17. Interpretation of Sections 15 and 16.

If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

END OF TERMS AND CONDITIONS

How to Apply These Terms to Your New Programs

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

<one line to give the program's name and a brief idea of what it does.>
Copyright (C) <year>  <name of author>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

If your software can interact with users remotely through a computer
network, you should also make sure that it provides a way for users to
get its source.  For example, if your program is a web application, its
interface could display a "Source" link that leads users to an archive
of the code.  There are many ways you could offer source, and different
solutions will be better for different programs; see section 13 for the
specific requirements.

You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU AGPL, see
<https://www.gnu.org/licenses/>.
`}},"README.md":{file:{contents:`# [jsnix](https://github.com/tbrockman/jsnix)

is a wrapper around [stackblitz/webcontainers](https://github.com/stackblitz/webcontainer-core), combined with some utility functions, whichs allows you to run Node.js in the browser with the typical editor ([\`monaco-editor\`](https://microsoft.github.io/monaco-editor/)) and terminal ([\`xterm.js\`](https://xtermjs.org/)) combo, but with a bit less setup and more of a focus on terminal interactivity.

It has nothing to do with \`nix\` (nor \`jslinux\`), it isn't POSIX-compliant, and really isn't all that Unix-like (I just liked the name).

You shouldn't use this for anything serious, and any usage is subject to the underlying [WebContainers license](https://webcontainers.io/enterprise).

## Getting started

### Install

\`\`\`sh
npm i @jsnix/react
\`\`\`

### Import

\`\`\`tsx
import { Jsnix } from '@jsnix/react'
\`\`\`

### Usage

\`\`\`tsx
export default function App() {
    const filesystem = {
        'index.js': {
            file: {
                contents: \`console.log("Hello, world!");\`,
            },
        },
    }

    return <Jsnix fs={filesystem} />
}
\`\`\`

## Creating a filesystem snapshot

\`@jsnix/utils\` provides functionality to create a WebContainer snapshot from a specified path ([default options](packages/utils/snapshot.ts#L72)).

### [\`vite\`](packages/utils/vite.ts) / [\`esbuild\`](packages/utils/esbuild.ts)

Create the snapshot:

\`\`\`js
// vite.config.js
import { defineConfig } from 'vite'
import { snapshot } from '@jsnix/utils/vite'

export default function getConfig() {
    return defineConfig({
        plugins: [
            snapshot()
        ],
    })
}
\`\`\`

or

\`\`\`js
// esbuild.config.js
import * as esbuild from 'esbuild'
import { snapshot } from '@jsnix/utils/esbuild'

esbuild.build({
    entryPoints: ['src/App.tsx'],
    outdir: 'dist',
    plugins: [
        snapshot()
    ],
})
\`\`\`

Then, reference it in your code:

\`\`\`tsx
import { Jsnix } from "@jsnix/react"
import snapshot from 'virtual:@jsnix/snapshot'

export default function App() {

    return (
        <Jsnix
            fs={snapshot}
        />
    )
}
\`\`\`


### Custom

If you're not using \`esbuild\` or \`vite\`, you can still use the provided [\`takeSnapshot\`](packages/utils/snapshot.ts#L93) function to integrate it into whatever build process you use (you'll just have to figure out your own way of referencing the snapshot in your code. \`hint\`: you can store the resulting snapshot using \`JSON.stringify()\`).

\`\`\`ts
// whatever.js
import { takeSnapshot } from '@jsnix/utils'

const snapshot = await takeSnapshot()

// ... the rest is up to you!
\`\`\`

See ["Working with the File System"](https://webcontainers.io/guides/working-with-the-file-system) in the WebContainers documentation for more information on the WebContainer filesystem.

## Contributing

I make no guarantee that I will ever acknowledge or respond to any particular bugs, issues, or feature requests (but you are welcome to try).
`}},"turbo.json":{file:{contents:`{
    "$schema": "https://turbo.build/schema.v1.json",
    "pipeline": {
        "build": {
            "dependsOn": [
                "^build"
            ],
            "outputs": [
                "dist/**"
            ],
            "cache": true
        },
        "lint": {
            "dependsOn": [
                "^lint"
            ]
        },
        "check-types": {
            "dependsOn": [
                "^check-types"
            ]
        },
        "dev": {
            "dependsOn": [
                "^dev"
            ],
            "cache": false
        },
        "clean": {
            "dependsOn": [
                "^clean"
            ]
        }
    }
}`}},".npmignore":{file:{contents:""}},"tsconfig.base.json":{file:{contents:`{
    "extends": "@sindresorhus/tsconfig",
    "compilerOptions": {
        "target": "ESNext",
        "module": "ESNext",
        "noPropertyAccessFromIndexSignature": false,
        "moduleResolution": "bundler",
        "resolveJsonModule": true,
        "outDir": "dist",
        "sourceMap": false,
        "jsx": "react",
        "baseUrl": "./",
        "paths": {
            "@jsnix/*": [
                "packages/*"
            ]
        },
        "lib": [
            "DOM.AsyncIterable",
            "DOM",
            "DOM.Iterable",
            "WebWorker",
            "ESNext"
        ]
    },
    "include": [
        "packages/**/*"
    ]
}`}},"eslint.config.js":{file:{contents:`import globals from 'globals';
import pluginJs from '@eslint/js';
import tseslint from 'typescript-eslint';
import stylistic from '@stylistic/eslint-plugin';
import pluginReact from 'eslint-plugin-react';
import { includeIgnoreFile } from '@eslint/compat';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const gitignorePath = path.resolve(__dirname, '.gitignore');

/** @type {import('eslint').Linter.Config[]} */
export default [
  { files: ['**/*.{js,mjs,cjs,ts,jsx,tsx}'] },
  { languageOptions: { globals: { ...globals.browser, ...globals.node } } },
  pluginJs.configs.recommended,
  ...tseslint.configs.recommended,
  // TODO: move this to projects that specifically require React support
  {
    ...pluginReact.configs.flat.recommended,
    settings: {
      react: {
        version: "detect",
      },
    },
  },
  includeIgnoreFile(gitignorePath),
  {
    rules: {
      '@typescript-eslint/no-explicit-any': 'off',
      '@typescript-eslint/ban-ts-comment': 'off',
      '@typescript-eslint/no-unused-expressions': ['error', {
        'allowShortCircuit': true,
        'allowTernary': true
      }],
      'react/no-unknown-property': 'off',
      'react/no-unescaped-entities': 'off',
    }
  },
  stylistic.configs.customize({
    indent: 'tab',
    quotes: 'single',
    semi: true,
    jsx: true,
    arrowParens: true,
  }),
];`}}};export{e as default};
